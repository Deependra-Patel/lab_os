Question 1:
Boot Process is started from GeekOS/src/geekos/main.c. There are many function calls are there in
main.c . Give a brief decription for each of the function call and where is that function defined.
(Make yourself familar with those functions as some basic questions will be asked about those
functions .)
(Hint: See All the header files inherited by main.c and search for function definition. Or Try to use
cscope for this purpose.)


Answer: 

1. Init_BSS();
     Sets bss to zero. bss (better save image) is the portion of memory where unitialized variables are stored;
     Defined in mem.c

2.  Init_Screen():
    Initializes the screen module.
    Defined in screen.c and declared in screen.h

3.  Init_Mem(bootInfo);
    Initialize memory management data structures. Enables the use of Alloc_Page() and Free_Page() functions.
    Defined in mem.c

4. Init_CRC32();
    This routine writes each crc_table entry exactly once, with the correct final value.  Thus, it is safe to call even on a table that someone else is using concurrently.CRC table is used for error detection.
    Defined in crc.c


5.  Init_TSS();
    Initializes the kernel TSS. This must be done after the memory and GDT(Global Descriptor Table) initialization, but before the scheduler is started.
    Defined in tss.c

6.  lockKernel();
    Implements coarse grained kernel locks.  The functions lockKernel and unlockKernel will be called whenever interrupts are enabled or disabled. 
    Defined in smp.c


7.  Init_Interrupts(0);
    Initialize the interrupt system. Initialize all entries of the handler table with a dummy handler. This will ensure that we always have a handler function to call.
    Defined in int.c


8.  Init_SMP();
    Initializes symmetric multiprocessing for multi core systems.
    Defined in smp.c


9.  TODO_P(PROJECT_VIRTUAL_MEMORY_A,
           "initialize virtual memory page tables.");
    
    Macro, not a function used for printing
    defined in include/geekos/projects.h

10. Init_Scheduler(0, (void *)KERN_STACK);
    Creates kernel thread for main and starts it
    Defined in kthread.c


11. Init_Traps(void) :
    Initializes handlers for processor traps (e.g. stack exception and general protection faults).
    Defined in trap.c and declared in trap.h


12. Init_Local_APIC(0);
    Sets up local APIC including calibrating its timer register(Advanced Programmable Interrupt controller)
    Defined in smp.c

13. Init_Timer();
    Installs an interrupt handler for the timer interrupts and initialises it
    Defined in timer.c

14. Init_Keyboard(void);
    Make arrangements for the keyboard event: disables all shift keys, makes the buffer empty and installs interrupt handler.
    Defined in keyboard.c and declared in keyboard.h

15. Init_DMA();
    Initialises IDE controller
    Defined in dma.c
    
16. Init_IDE();
    Initialises IDE controller
    Defined in ide.c

    Init_PFAT();
    Registers pfat file system 
    Defined in pfat.c

    Init_GFS2();
    Registers gfs2 file system 
    Defined in gfs2.c

    Init_GOSFS();
    Registers gosfs file system 
    Defined in gosfs.c

    
    Init_CFS(void) ;
    Registers a cfs type filesystem. This should be called before any processes are started.
    Defined in cfs.c


    Init_Alarm(void);
    Starts a new kernel thread (kernel-mode-only thread) with the function to be called by the new thread as Alarm_handler, 0 arguments for this function and with normal priority.
    Defined in alarm.c and declared in alarm.h


    Release_SMP();
    Releases resources to symmetric multiprocessing
    Defined in smp.c

    Init_Network_Devices();
    Initializes network devices found on hardware
    Defined in net/net.c

    Init_ARP_Protocol();
    Prepares arp table for network communication
    Defined in net/arp.c
    
    Init_IP();
    Initialises the ip of the machine 
    Defined in net/ip.c
    
    Init_Routing();
    Initialises the routing table with all local routes
    Defined in ip/routing.c
    
    Init_Sockets();
    Initialises sockets of hardware
    Defined in net/socket.c
    
    Init_RIP();
    Initiates RIP protocol
    Defined in net/rip.c
    
    Init_Sound_Devices();
    Initializes sound hardware.
    Defined in sound.c

    Mount_Root_Filesystem();
    Mounts the file system of the hardware for use
    Defined in main.c

    TODO_P(PROJECT_VIRTUAL_MEMORY_A, "initialize page file.");
    Macro, not a function used for printing
    Defined in include/geekos/projects.h

    Set_Current_Attr(ATTRIB(BLACK, GREEN | BRIGHT));
    Sets the current character attribute
    Defined in screen.c

    Print("Welcome to GeekOS!\n");
    Prints the text on screen
    Defined in screen.c

    Set_Current_Attr(ATTRIB(BLACK, GRAY));
    Sets the current character attribute
    Defined in screen.c

    TODO_P(PROJECT_SOUND, "play startup sound");
    Macro, not a function used for printing
    Defined in include/geekos/projects.h

    Spawn_Init_Process();
    loads and run shell.exe 
    Defined in main.c

    Hardware_Shutdown();
    shuts down the hardware
    Defined in main.c





Question 2: Add a kernel thread on the bootup of the Geek-OS, just after the init() process. Kernel state will be maintained for that thread. Traverse the whole kernel_thread structure and tell what does each element in the kernel_thread structure mean ? Add a function that asks for a password and compares it with some stored password to decide whether to allow access. (Hint: Passwords should be stored in a file with some standard name, say Password.txt. Put this file in GeekOS/build/user/Password.txt and in Open function path will be “/c/Password.txt” .See fileio.h and string.h) 
Answer:
    ulong_t esp;                    : stack base pointer 
    volatile ulong_t numTicks;      :  number of CPU ticks occurred till now
    volatile ulong_t totalTime;     : total time elapsed by the process
    int priority;               : Priority of the thread used for scheduling
    DEFINE_LINK(Thread_Queue, Kernel_Thread);       : Link fields for list of all threads in  
  the system.

    void *stackPage;            : address of the process stack
    struct User_Context *userContext;  : stores all the general purpose registers

    struct Kernel_Thread *owner;    : Pointer to parent thread
    int affinity;               : preferred core = AFFINITY_ANY_CORE --> can run on any core

    int refCount;         : how many references including it’s self reference 
    /*
     * The thread has an implicit self-reference.
     * If the thread is not detached, then its owner
     * also has a reference to it so Wait will work.
     */


    int detached;           // detached processes don't linger on Exit as zombies waiting for wait to reap

    /* The kernel thread id; also used as process id */
    int pid;

    /* These fields are used to implement the Join() function */
    bool alive;     // alive or dead
    struct Thread_Queue joinQueue;   
    int exitCode;       //Code returned while exiting, used for checking zombie processes

    /* Link fields for list of all threads in the system. */
     DEFINE_LINK(All_Thread_List, Kernel_Thread);

    /* Array of MAX_TLOCAL_KEYS pointers to thread-local data. */
    #define MAX_TLOCAL_KEYS 128
    const void *tlocalData[MAX_TLOCAL_KEYS];    //
    char threadName[20];  // Stores name of the thread



Question 3: Many operating systems do not use terms “Kernel Thread and User Thread”strictly. So we have to study kernel threads of Geek-OS and decide whether it is a kernel-level thread or user-level thread. Give proper reasons for your answer. (Refer Class notes to get the difference between User Thread and Kernel Thread) 

Answer:
    GeekOs doesn’t distinguish between kernel level threads and user level thread. Both the threads are inserted into the All_Thread_List struct which is used by scheduler for scheduling. User level threads gets the priority of the parent process creating it. On the other hand, priorities of kernel level threads can be set while creating. While creating user thread, the context of the parent process is copied into the child process.



Question 4: In Question 2, you are waiting for the keyboard input i.e waiting for an I/O.Say, how is a process put to sleep or activated when it is engaged in doing I/O? (Describe from both I/O as well as scheduling point of view.)

Answer:
If the process is waiting for an I/O, then the thread is added in a wait queue, namely "s_waitQueue" and the scheduler is called. The scheduler gets the next runnable thread from the run queue and the execution is switched to that thread.

    When a keyboard event occurs, the interrupt handler(Keyboard_Interrupt_Handler) wakes up all the threads waiting for keyboard input which are present in s_waitQueue and enqueues the key in s_queue . The wake up function makes all the threads in a given queue runnable and empties the queue. When the next time the thread is run, It detects the key in s_queue and deques s_queue.




Question 5: In GeekOS source files they have given TODO_P(PROJECT_NAME,”Message”) for some of the functions instead of giving actual definition. For example in syscall.c static int Sys_Fork(struct Interrupt_State *state) { TODO_P(PROJECT_FORK, "Fork system call"); return EUNSUPPORTED; } Give detailed implementataion level work flow for fork() system call.

Answer: fork() creates new process copying all data that was present earlier including open files, register state and all memory allocations, which includes the program code to child process. For implementing fork, we create a new Kernel_Thread and copies all the general purpose registers and stack data to the new thread. Then push all data onto stack.

1. Program calls fork() system call
    Calls the Create_Thread function which will call the init_thread function.
    int priority is set to the priortiy of the parent
    bool detached is set to FALSE if the parent process is KERNEL 
    and is set to TRUE if it is user process.
    
2. Kernel fork system call duplicates the process running the program
    It creates a new instance of the KERNEL_THREAD class 
    Initializes the member variables using Init_Thread. It will also 
    set the parent of the child process to CURRENT_THREAD.
    Also, create a new object for User_Context such that the user space of the 
    child process is same as that of the parent process.    
    The content of StackPage of parent is copied to the stack of the 
    newly created child process. and esp is set accordingly (all the general purpose registers and stack data are copied)
    Also, link the new User_Context to the Kernel_Thread object.
    
3. The kernel sets the return value for the system call for the original program and for the duplicate (PID of the duplicate and 0, respectively)
    Change the return value in the new stack page.
    
4. The kernel puts both processes in the scheduler queue
    In the fork() function make a call to Add_To_Back_Of_All_Thread_List(...) to add this new process in the list
    of running processes

5. As each process is scheduled, the kernel 'returns' to each of the two programs.
    Return and let the current process continue.
