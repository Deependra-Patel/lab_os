cscope 15 $HOME/Desktop/lab_os/project -q 0000008308 0001001248
	@build/libc/errno.c

1 c⁄° *
	g__°ªºTabÀ
[] = {

25 c⁄° 
	g__°ªºTabÀSize
 = (
__°ªºTabÀ
) / (const *);

	@include/geekos/alarm.h

17 #i‚de‡
ALARM_H


18 
	#ALARM_H


	)

20 
	~<gìkos/defs.h
>

21 
	~<gìkos/kty≥s.h
>

22 
	~<gìkos/li°.h
>

24 (*
	tAœrm_CÆlback
) (*);

26 
Aœrm_Evít
;

28 
	`DEFINE_LIST
(
Aœrm_H™dÀr_Queue
, 
Aœrm_Evít
);

30 
	sAœrm_Evít
 {

31 
timîId
;

32 
Aœrm_CÆlback
 
ˇŒback
;

33 *
d©a
;

34 
Kî√l_Thªad
 *
thªad
;

36 
	`DEFINE_LINK
(
Aœrm_H™dÀr_Queue
, 
Aœrm_Evít
);

39 
	`Aœrm_C™˚l_F‹_Thªad
(
Kî√l_Thªad
 *
thªad
);

40 
	`Aœrm_Cª©e
(
Aœrm_CÆlback
 
ˇŒback
, *
d©a
,

41 
mûliSec⁄ds
);

42 
	`Aœrm_De°roy
(
id
);

43 
	`Inô_Aœrm
();

45 
	`IMPLEMENT_LIST
(
Aœrm_H™dÀr_Queue
, 
Aœrm_Evít
);

	@include/geekos/apic.h

14 
	#APIC_ID
 0x20

	)

15 
	#APIC_VER
 0x30

	)

16 
	#APIC_TPR
 0x80

	)

17 
	#APIC_APR
 0x90

	)

18 
	#APIC_PPR
 0xA0

	)

19 
	#APIC_EOI
 0xB0

	)

20 
	#APIC_LDR
 0xD0

	)

21 
	#APIC_DFR
 0xE0

	)

22 
	#APIC_SPIV
 0xF0

	)

23 
	#APIC_SPIV_ENABLE_APIC
 0x100

	)

24 
	#APIC_ISR
 0x100

	)

25 
	#APIC_TMR
 0x180

	)

26 
	#APIC_IRR
 0x200

	)

27 
	#APIC_ESR
 0x280

	)

28 
	#APIC_ICR
 0x300

	)

29 
	#APIC_LVTT
 0x320

	)

30 
	#APIC_LVTPC
 0x340

	)

31 
	#APIC_LVT0
 0x350

	)

32 
	#APIC_LVT1
 0x360

	)

33 
	#APIC_LVTE
 0x370

	)

34 
	#APIC_TICR
 0x380

	)

35 
	#APIC_TCCR
 0x390

	)

36 
	#APIC_TDCR
 0x3E0

	)

39 
	#APIC_ICR_DM_LOWPRI
 0x100

	)

40 
	#APIC_ICR_DM_SMI
 0x200

	)

41 
	#APIC_ICR_DM_NMI
 0x400

	)

42 
	#APIC_ICR_DM_INIT
 0x500

	)

43 
	#APIC_ICR_DM_SIPI
 0x600

	)

44 
	#APIC_ICR_DM_LOGICAL
 0x800

	)

45 
	#APIC_ICR_STATUS_PEND
 0x1000

	)

46 
	#APIC_ICR_LEVELASSERT
 0x4000

	)

47 
	#APIC_ICR_TM_LEVEL
 0x8000

	)

48 
	#APIC_ICR_DS_SELF
 0x40000

	)

49 
	#APIC_ICR_DS_ALLINC
 0x80000

	)

50 
	#APIC_ICR_DS_ALLEX
 0xC0000

	)

52 
	#GET_APIC_ID
(
x
Ë((xË>> 24)

	)

54 
	#APIC_DISABLE
 0x10000

	)

55 
	#APIC_SW_ENABLE
 0x100

	)

58 
	#TMR_PERIODIC
 0x20000

	)

	@include/geekos/argblock.h

18 #i‚de‡
GEEKOS_ARGBLOCK_H


19 
	#GEEKOS_ARGBLOCK_H


	)

26 
	sArgumít_Block
 {

27 
	m¨gc
;

28 **
	m¨gv
;

31 #ifde‡
GEEKOS


36 
Gë_Argumít_Block_Size
(c⁄° *
comm™d
, *
numArgs
,

37 
ul⁄g_t
 * 
¨gBlockSize
);

38 
F‹m©_Argumít_Block
(*
¨gBlock
, 
numArgs
,

39 
ul⁄g_t
 
u£rAddªss
, c⁄° *
comm™d
);

	@include/geekos/bget.h

1 
	~"../libc/bgë.h
"

	@include/geekos/bitset.h

18 #i‚de‡
GEEKOS_BITSET_H


19 
	#GEEKOS_BITSET_H


	)

21 
	~<gìkos/kty≥s.h
>

23 *
Cª©e_Bô_Së
(
uöt_t
 
tŸÆBôs
);

24 
Së_Bô
(*
bôSë
, 
uöt_t
 
bôPos
);

25 
CÀ¨_Bô
(*
bôSë
, 
uöt_t
 
bôPos
);

26 
boﬁ
 
Is_Bô_Së
(*
bôSë
, 
uöt_t
 
bôPos
);

27 
Föd_Fú°_Fªe_Bô
(*
bôSë
, 
ul⁄g_t
 
tŸÆBôs
);

28 
Föd_Fú°_N_Fªe
(*
bôSë
, 
uöt_t
 
runLígth
, 
ul⁄g_t
 
tŸÆBôs
);

29 
De°roy_Bô_Së
(*
bôSë
);

32 
	sBô_Së
 {

33 
	msize
;

34 
uch¨_t
 
	mbôs
[0];

37 
Bô_Së
 *
Cª©e_Bô_Së
(
uch¨_t
 * 
bôs
, 
tŸÆBôs
);

38 
Së_Bô
(
Bô_Së
 *
£t
, 
bôPos
);

39 
CÀ¨_Bô
(
Bô_Së
 *
£t
, 
bôPos
);

40 
Is_Bô_Së
(
Bô_Së
 *
£t
, 
bôPos
);

41 
Föd_Fú°_Fªe_Bô
(
Bô_Së
 *
£t
);

42 
Föd_Fú°_N_Fªe
(
Bô_Së
 *
£t
, 
runLígth
);

43 
uch¨_t
 *
Gë_Bôs
(
Bô_Së
 *
£t
);

	@include/geekos/blockdev.h

18 #i‚de‡
GEEKOS_BLOCKDEV_H


19 
	#GEEKOS_BLOCKDEV_H


	)

21 
	~<gìkos/kty≥s.h
>

22 
	~<gìkos/kthªad.h
>

23 
	~<gìkos/li°.h
>

24 
	~<gìkos/fûeio.h
>

26 #ifde‡
GEEKOS


31 
	eReque°_Ty≥
 {

32 
	mBLOCK_READ
, 
	mBLOCK_WRITE


38 
	eReque°_Sèã
 {

39 
	mPENDING
, 
	mCOMPLETED
, 
	mERROR


42 
	gBlock_Reque°
;

47 
DEFINE_LIST
(
Block_Reque°_Li°
, 
Block_Reque°
);

52 
	sBlock_Reque°
 {

53 
Block_Devi˚
 *
	mdev
;

54 
Reque°_Ty≥
 
	mty≥
;

55 
	mblockNum
;

56 *
	mbuf
;

57 vﬁ©ûê
Reque°_Sèã
 
	m°©e
;

58 vﬁ©ûê
	mîr‹Code
;

59 
Thªad_Queue
 
	mwaôQueue
;

61 
DEFINE_LINK
(
Block_Reque°_Li°
, 
Block_Reque°
);

64 
IMPLEMENT_LIST
(
Block_Reque°_Li°
, 
Block_Reque°
);

66 
	gBlock_Devi˚
;

67 
	gBlock_Devi˚_Ops
;

72 
	sBlock_Devi˚
 {

73 
	m«me
[
BLOCKDEV_MAX_NAME_LEN
];

74 
Block_Devi˚_Ops
 *
	m›s
;

75 
	munô
;

76 
boﬁ
 
	möU£
;

77 *
	mdrivîD©a
;

78 
Thªad_Queue
 *
	mwaôQueue
;

79 
Block_Reque°_Li°
 *
	mªque°Queue
;

81 
	mªads
, 
	mwrôes
;

83 
DEFINE_LINK
(
Block_Devi˚_Li°
, 
Block_Devi˚
);

89 
	sBlock_Devi˚_Ops
 {

90 (*
	mO≥n
Ë(
Block_Devi˚
 * 
	mdev
);

91 (*
	mClo£
Ë(
Block_Devi˚
 * 
	mdev
);

92 (*
	mGë_Num_Blocks
Ë(
Block_Devi˚
 * 
	mdev
);

99 
Regi°î_Block_Devi˚
(c⁄° *
«me
, 
Block_Devi˚_Ops
 *
›s
,

100 
unô
, *
drivîD©a
,

101 
Thªad_Queue
 *
waôQueue
,

102 
Block_Reque°_Li°
 *
ªque°Queue
);

103 
O≥n_Block_Devi˚
(c⁄° *
«me
, 
Block_Devi˚
 **
pDev
);

104 
Clo£_Block_Devi˚
(
Block_Devi˚
 *
dev
);

105 
Block_Reque°
 *
Cª©e_Reque°
(
Block_Devi˚
 *
dev
,

106 
Reque°_Ty≥
 
ty≥
, 
blockNum
,

107 *
buf
);

108 
Po°_Reque°_And_Waô
(
Block_Reque°
 *
ªque°
);

109 
Block_Reque°
 *
Dequeue_Reque°
(
Block_Reque°_Li°
 *
ªque°Queue
,

110 
Thªad_Queue
 *
waôQueue
);

111 
NŸify_Reque°_Com∂ëi⁄
(
Block_Reque°
 *
ªque°
,

112 
Reque°_Sèã
 
°©e
, 
îr‹Code
);

118 
Block_Ród
(
Block_Devi˚
 *
dev
, 
blockNum
, *
buf
);

119 
Block_Wrôe
(
Block_Devi˚
 *
dev
, 
blockNum
, *
buf
);

120 
Gë_Num_Blocks
(
Block_Devi˚
 *
dev
);

126 
Dump_Blockdev_Sèts
();

131 
__ölöe__
 
ul⁄g_t
 
	$Round_Up_To_Block
(
ul⁄g_t
 
off£t
) {

132  (
off£t
 % 
SECTOR_SIZE
) == 0

133 ? 
off£t
 : off£à+ (
SECTOR_SIZE
 - (offset % SECTOR_SIZE));

134 
	}
}

139 
__ölöe__
 
ul⁄g_t
 
	$Round_Down_To_Block
(
ul⁄g_t
 
off£t
) {

140  (
off£t
 % 
SECTOR_SIZE
) == 0

141 ? 
off£t
 : off£à- (off£à% 
SECTOR_SIZE
);

142 
	}
}

	@include/geekos/bootinfo.h

17 #i‚de‡
GEEKOS_BOOTINFO_H


18 
	#GEEKOS_BOOTINFO_H


	)

20 
	sMemRegi⁄
 {

21 
	mba£Addr_low
, 
	mba£Addr_high
;

22 
	mÀngth_low
, 
	mÀngth_high
;

23 
	mty≥
;

24 
	mexãndedAâribuãs
;

28 
	sBoŸ_Info
 {

29 
	mboŸInfoSize
;

30 
	mmemSizeKB
;

31 
	mboŸDrive
;

32 
	mnumMemRegi⁄s
;

33 
MemRegi⁄
 *
	mmemRegi⁄s
;

	@include/geekos/bufcache.h

10 #i‚de‡
GEEKOS_BUFCACHE_H


11 
	#GEEKOS_BUFCACHE_H


	)

13 
	~<gìkos/kty≥s.h
>

14 
	~<gìkos/li°.h
>

15 
	~<gìkos/synch.h
>

17 
	gBlock_Devi˚
;

22 
	#FS_BUFFER_DIRTY
 0x01

	)

23 
	#FS_BUFFER_INUSE
 0x02

	)

25 
	gFS_Buf„r
;

26 
DEFINE_LIST
(
FS_Buf„r_Li°
, 
FS_Buf„r
);

31 
	sFS_Buf„r
 {

32 
ul⁄g_t
 
	mfsBlockNum
;

33 *
	md©a
;

34 
uöt_t
 
	mÊags
;

35 
DEFINE_LINK
(
FS_Buf„r_Li°
, 
FS_Buf„r
);

38 
IMPLEMENT_LIST
(
FS_Buf„r_Li°
, 
FS_Buf„r
);

45 
	sFS_Buf„r_Cache
 {

46 
Block_Devi˚
 *
	mdev
;

47 
uöt_t
 
	mfsBlockSize
;

48 
uöt_t
 
	mnumCached
;

49 
FS_Buf„r_Li°
 
	mbuf„rLi°
;

50 
Muãx
 
	mlock
;

51 
C⁄dôi⁄
 
	mc⁄d
;

54 
FS_Buf„r_Cache
 *
Cª©e_FS_Buf„r_Cache
(
Block_Devi˚
 *
dev
,

55 
uöt_t
 
fsBlockSize
);

56 
Sync_FS_Buf„r_Cache
(
FS_Buf„r_Cache
 *
ˇche
);

57 
De°roy_FS_Buf„r_Cache
(
FS_Buf„r_Cache
 *
ˇche
);

59 
Gë_FS_Buf„r
(
FS_Buf„r_Cache
 *
ˇche
, 
ul⁄g_t
 
fsBlockNum
,

60 
FS_Buf„r
 **
pBuf
);

61 
Modify_FS_Buf„r
(
FS_Buf„r_Cache
 *
ˇche
, 
FS_Buf„r
 *
buf
);

62 
Sync_FS_Buf„r
(
FS_Buf„r_Cache
 *
ˇche
, 
FS_Buf„r
 *
buf
);

63 
Rñó£_FS_Buf„r
(
FS_Buf„r_Cache
 *
ˇche
, 
FS_Buf„r
 *
buf
);

	@include/geekos/cfs.h

13 #i‚de‡
CFS_H


14 
	#CFS_H


	)

17 
	~<gìkos/blockdev.h
>

18 
	~<gìkos/fûeio.h
>

19 
	~<gìkos/vfs.h
>

23 
	msize
;

24 
	mªfCou¡
;

25 
	misU£d
:1;

26 
	misDúe˘‹y
:1;

27 
	misSëUid
:1;

28 
	misSymbﬁicLök
:1;

29 
	mblocks
[10];

30 
VFS_ACL_E¡ry
 
	ma˛s
[
VFS_MAX_ACL_ENTRIES
];

31 
	m∑d
[36];

32 } 
	tCFSiNode
;

34 
	#INODES_PER_BLOCK
 (4096/((
CFSiNode
)))

	)

37 
	m«me
[64];

38 
	möode
;

39 
	misU£d
:1;

40 } 
	tCFSfûeNode
;

43 
	#MAX_CFILES_PER_DIR
 (4096/((
CFSfûeNode
)))

	)

46 
CFSfûeNode
 
	mfûes
[
MAX_CFILES_PER_DIR
];

47 } 
	tCFSdúe˘‹y
;

51 
CFSiNode
 *
	mnode
;

52 
	möodeNum
;

53 
	moff£t
;

54 } 
	tCFS±r
;

57 
	mmagic
;

58 
	msize
;

59 
	mnumInodes
;

60 
	mfú°InodeBlock
;

61 
	mfú°FªeInode
;

62 } 
	tcfsHódî
;

64 
CFS_F‹m©
(
Block_Devi˚
 *
blockDev
);

65 
CFS_Mou¡
(
Mou¡_Poöt
 *
mou¡Poöt
);

66 
CFS_O≥n
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
, 
mode
,

67 
Fûe
 **
pFûe
);

68 
CFS_Clo£
(
Fûe
 *
fûe
);

69 
CFS_Dñëe
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

70 
boﬁ
 
ªcursive
);

71 
CFS_Ríame
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
ﬁd∑th
,

72 c⁄° *
√w∑th
);

73 
CFS_Lök
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
ﬁd∑th
,

74 c⁄° *
√w∑th
);

75 
CFS_SymLök
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
ﬁd∑th
,

76 c⁄° *
√w∑th
);

77 
CFS_SëSëUid
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

78 
£tuid
);

79 
CFS_SëA˛
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
, 
uid
,

80 
≥rmissi⁄s
);

81 
CFS_Ród
(
Fûe
 *
fûe
, *
buf
, 
ul⁄g_t
 
numByãs
);

82 
CFS_Wrôe
(
Fûe
 *
fûe
, *
buf
, 
ul⁄g_t
 
numByãs
);

83 
CFS_FSèt
(
Fûe
 *
fûe
, 
VFS_Fûe_Sèt
 *
°©
);

84 
CFS_Sìk
(
Fûe
 *
fûe
, 
ul⁄g_t
 
pos
);

85 
CFS_Cª©e_Dúe˘‹y
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
);

86 
CFS_Ród_E¡ry
(
Fûe
 *
dú
, 
VFS_Dú_E¡ry
 *
íåy
);

87 
CFS_O≥n_Dúe˘‹y
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

88 
Fûe
 **
pDú
);

90 
CFS_Sèt
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

91 
VFS_Fûe_Sèt
 *
°©
);

92 
CFS_Sync
(
Mou¡_Poöt
 *
mou¡Poöt
);

94 
Inô_CFS
();

	@include/geekos/cfsmodes.h

3 
	mˇ£In£nsôiveFûeNames
:1;

4 
	mu£sBuf„rCache
:1;

5 
	mu£sLFS
:1;

6 
	mªcursiveDñëe
:1;

7 
	mu£sBU
:1;

8 
	mbigBlockSize
:1;

9 
	mu£sSymbﬁicLöks
:1;

10 
	mu£sGlobÆNamePoﬁ
:1;

11 } 
	tcfsModes
;

	@include/geekos/crc32.h

1 #i‚de‡
GEEKOS_CRC32_H


2 
	#GEEKOS_CRC32_H


	)

4 
	~<°ddef.h
>

5 
	~<gìkos/kty≥s.h
>

7 
Inô_CRC32
();

8 
ul⁄g_t
 
¸c32
(ul⁄g_à
¸c
, c⁄° *
buf
, 
size_t
 
Àn
);

	@include/geekos/defs.h

18 #i‚de‡
GEEKOS_DEFS_H


19 
	#GEEKOS_DEFS_H


	)

25 
	#KERNEL_CS
 (1<<3)

	)

26 
	#KERNEL_DS
 (2<<3)

	)

32 
	#KERN_THREAD_OBJ
 (1024 * 1024)

	)

33 
	#KERN_STACK
 (
KERN_THREAD_OBJ
 + 4096)

	)

38 
	#KERNEL_START_ADDR
 0x10000

	)

43 
	#KERNEL_PRIVILEGE
 0

	)

44 
	#USER_PRIVILEGE
 3

	)

50 
	#SYSCALL_INT
 0x90

	)

56 #i‡
deföed
(
GNU_WIN32
)

57 
	#BSS_START
 
_bss_°¨t__


	)

58 
	#BSS_END
 
_bss_íd__


	)

60 
	#BSS_START
 
__bss_°¨t


	)

61 
	#BSS_END
 
íd


	)

67 
	#PAGE_POWER
 12

	)

68 
	#PAGE_SIZE
 (1<<
PAGE_POWER
)

	)

69 
	#PAGE_MASK
 (~(0xfffffff‡<< 
PAGE_POWER
))

	)

	@include/geekos/dma.h

18 #i‚de‡
GEEKOS_DMA_H


19 
	#GEEKOS_DMA_H


	)

21 
	~<gìkos/kty≥s.h
>

23 
	eDMA_Dúe˘i⁄
 {

24 
	mDMA_READ
,

25 
	mDMA_WRITE


28 
Inô_DMA
();

29 
boﬁ
 
Re£rve_DMA
(
ch™
);

30 
Sëup_DMA
(
DMA_Dúe˘i⁄
 
dúe˘i⁄
, 
ch™
, *
addr
,

31 
ul⁄g_t
 
size
);

33 
Mask_DMA
(
ch™
);

34 
Unmask_DMA
(
ch™
);

	@include/geekos/elf.h

25 #i‚de‡
GEEKOS_ELF_H


26 
	#GEEKOS_ELF_H


	)

32 
	midít
[16];

33 
	mty≥
;

34 
	mmachöe
;

35 
	mvîsi⁄
;

36 
	míåy
;

37 
	mphoff
;

38 
	m•hoff
;

39 
	mÊags
;

40 
	mehsize
;

41 
	mphítsize
;

42 
	mphnum
;

43 
	mshítsize
;

44 
	mshnum
;

45 
	msh°∫dx
;

46 } 
	tñfHódî
;

53 
	mty≥
;

54 
	moff£t
;

55 
	mvaddr
;

56 
	m∑ddr
;

57 
	mfûeSize
;

58 
	mmemSize
;

59 
	mÊags
;

60 
	mÆignmít
;

61 } 
	t¥ogømHódî
;

67 
	#PF_R
 0x4

	)

68 
	#PF_W
 0x2

	)

69 
	#PF_X
 0x1

	)

76 
	sExe_Segmít
 {

77 
ul⁄g_t
 
	moff£tInFûe
;

78 
ul⁄g_t
 
	mÀngthInFûe
;

79 
ul⁄g_t
 
	m°¨tAddªss
;

80 
ul⁄g_t
 
	msizeInMem‹y
;

81 
	m¥ŸFœgs
;

89 
	#EXE_MAX_SEGMENTS
 5

	)

95 
	sExe_F‹m©
 {

96 
Exe_Segmít
 
	m£gmítLi°
[
EXE_MAX_SEGMENTS
];

97 
	mnumSegmíts
;

98 
ul⁄g_t
 
	míåyAddr
;

101 
P¨£_ELF_ExecuèbÀ
(*
exeFûeD©a
, 
ul⁄g_t
 
exeFûeLígth
,

102 
Exe_F‹m©
 *
exeF‹m©
);

	@include/geekos/errno.h

10 #i‚de‡
GEEKOS_ERRNO_H


11 
	#GEEKOS_ERRNO_H


	)

18 
	#EUNSPECIFIED
 -1

	)

19 
	#ENOTFOUND
 -2

	)

20 
	#EUNSUPPORTED
 -3

	)

21 
	#ENODEV
 -4

	)

22 
	#EIO
 -5

	)

23 
	#EBUSY
 -6

	)

24 
	#ENOMEM
 -7

	)

25 
	#ENOFILESYS
 -8

	)

26 
	#ENAMETOOLONG
 -9

	)

27 
	#EINVALIDFS
 -10

	)

28 
	#EACCESS
 -11

	)

29 
	#EINVALID
 -12

	)

30 
	#EMFILE
 -13

	)

31 
	#ENOTDIR
 -14

	)

32 
	#EEXIST
 -15

	)

33 
	#ENOSPACE
 -16

	)

34 
	#EPIPE
 -17

	)

35 
	#ENOEXEC
 -18

	)

36 
	#ENOZOMBIES
 -19

	)

37 
	#ETIMEOUT
 -20

	)

38 
	#EWOULDBLOCK
 -21

	)

	@include/geekos/fileio.h

18 #i‚de‡
GEEKOS_FILEIO_H


19 
	#GEEKOS_FILEIO_H


	)

21 
	~<°ddef.h
>

22 
	~<gìkos/kty≥s.h
>

25 
	#VFS_MAX_PATH_LEN
 1023

	)

28 
	#VFS_MAX_FS_NAME_LEN
 15

	)

31 
	#VFS_MAX_ACL_ENTRIES
 10

	)

34 
	#SECTOR_SIZE
 512

	)

37 
	#BLOCKDEV_MAX_NAME_LEN
 15

	)

45 
	#O_CREATE
 0x1

	)

46 
	#O_READ
 0x2

	)

47 
	#O_WRITE
 0x4

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0x8

	)

52 #i‚de‡
O_OWNER


53 
	#O_OWNER
 0x10

	)

55 
	#O_RECURSIVE
 0x20

	)

61 
	sVFS_ACL_E¡ry
 {

62 
uöt_t
 
	muid
:28;

63 
uöt_t
 
	m≥rmissi⁄
:4;

70 
	sVFS_Fûe_Sèt
 {

71 
	msize
;

72 
	misDúe˘‹y
:1;

73 
	misSëuid
:1;

74 
VFS_ACL_E¡ry
 
	ma˛s
[
VFS_MAX_ACL_ENTRIES
];

81 
	sVFS_Dú_E¡ry
 {

82 
	m«me
[1024];

83 
VFS_Fûe_Sèt
 
	m°©s
;

91 
	sVFS_Mou¡_Reque°
 {

92 
	mdev«me
[
BLOCKDEV_MAX_NAME_LEN
 + 1];

93 
	m¥efix
[
VFS_MAX_PATH_LEN
 + 1];

94 
	mf°y≥
[
VFS_MAX_FS_NAME_LEN
 + 1];

	@include/geekos/floppy.h

18 #i‚de‡
GEEKOS_FLOPPY_H


19 
	#GEEKOS_FLOPPY_H


	)

21 #ifde‡
GEEKOS


26 
Inô_Fl›py
();

	@include/geekos/fmtout.h

1 
	~"../libc/fmtout.h
"

	@include/geekos/gdt.h

18 #i‚de‡
GEEKOS_GDT_H


19 
	#GEEKOS_GDT_H


	)

21 
	gSegmít_Des¸ùt‹
;

23 
Inô_GDT
(
CPUid
);

24 
Segmít_Des¸ùt‹
 *
AŒoˇã_Segmít_Des¸ùt‹
();

25 
Fªe_Segmít_Des¸ùt‹
(
Segmít_Des¸ùt‹
 *
desc
);

26 
Gë_Des¸ùt‹_Index
(
Segmít_Des¸ùt‹
 *
desc
);

	@include/geekos/gfs2.h

13 #i‚de‡
GFS2_H


14 
	#GFS2_H


	)

16 
	~<gìkos/vfs.h
>

17 
	~<gìkos/fûeio.h
>

20 
	tgfs2_blocknum
;

21 
	tgfs2_öodíum
;

24 
	#GFS2_DIRECTORY
 1

	)

25 
	#GFS2_FILE
 2

	)

27 
	#GFS2_SUPERBLOCK_COPIES
 10

	)

28 
	#GFS2_DIRECT_BLOCKS
 4

	)

31 
	sgfs2_su≥rblock
 {

32 
	mgfs2_magic
;

33 
	mgfs2_vîsi⁄
;

34 
	mblock_size
;

35 
	mblocks_≥r_disk
;

36 
gfs2_blocknum
 
	mblock_wôh_öode_zîo
;

37 
	mnumbî_of_öodes
;

38 
gfs2_blocknum
 
	mª∂iˇ_su≥rblock_addªs£s
[
GFS2_SUPERBLOCK_COPIES
];

41 
	sgfs2_öode
 {

42 
gfs2_öodíum
 
	möum_£lf
;

44 
	msize
;

45 
	mty≥
;

46 
	mª„ªn˚_cou¡
;

47 
	mmode
;

49 
gfs2_blocknum
 
	mdúe˘_blocks
[
GFS2_DIRECT_BLOCKS
];

50 
gfs2_blocknum
 
	mödúe˘_block
;

53 
	sgfs2_dúít
 {

54 
gfs2_öodíum
 
	möum
;

55 
	míåy_Àngth
;

56 
	m«me_Àngth
;

57 
	m«me
[2];

60 
Inô_GFS2
();

	@include/geekos/gosfs.h

13 #i‚de‡
GOSFS_H


14 
	#GOSFS_H


	)

17 
	~<gìkos/blockdev.h
>

18 
	~<gìkos/fûeio.h
>

19 
	~<gìkos/vfs.h
>

23 
	m«me
[64];

24 
	msize
;

25 
	misU£d
:1;

26 
	misDúe˘‹y
:1;

27 
	misSëUid
:1;

28 
	mblocks
[10];

29 
VFS_ACL_E¡ry
 
	ma˛s
[
VFS_MAX_ACL_ENTRIES
];

30 } 
	tGOSFSfûeNode
;

33 
	#MAX_FILES_PER_DIR
 (4096/((
GOSFSfûeNode
)))

	)

36 
GOSFSfûeNode
 
	mfûes
[
MAX_FILES_PER_DIR
];

37 } 
	tGOSFSdúe˘‹y
;

41 
GOSFSfûeNode
 
	mnode
;

44 
	mblockNum
;

45 
	moff£t
;

46 } 
	tGOSFS±r
;

48 
GOSFS_F‹m©
(
Block_Devi˚
 *
blockDev
);

49 
GOSFS_Mou¡
(
Mou¡_Poöt
 *
mou¡Poöt
);

50 
GOSFS_O≥n
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
, 
mode
,

51 
Fûe
 **
pFûe
);

52 
GOSFS_Clo£
(
Fûe
 *
fûe
);

53 
GOSFS_Dñëe
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

54 
boﬁ
 
ªcursive
);

55 
GOSFS_SëSëUid
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

56 
£tuid
);

57 
GOSFS_SëA˛
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
, 
uid
,

58 
≥rmissi⁄s
);

59 
GOSFS_Ród
(
Fûe
 *
fûe
, *
buf
, 
ul⁄g_t
 
numByãs
);

60 
GOSFS_Wrôe
(
Fûe
 *
fûe
, *
buf
, 
ul⁄g_t
 
numByãs
);

61 
GOSFS_FSèt
(
Fûe
 *
fûe
, 
VFS_Fûe_Sèt
 *
°©
);

62 
GOSFS_Sìk
(
Fûe
 *
fûe
, 
ul⁄g_t
 
pos
);

63 
GOSFS_Cª©e_Dúe˘‹y
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
);

64 
GOSFS_Ród_E¡ry
(
Fûe
 *
dú
, 
VFS_Dú_E¡ry
 *
íåy
);

65 
GOSFS_O≥n_Dúe˘‹y
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

66 
Fûe
 **
pDú
);

68 
GOSFS_Sèt
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

69 
VFS_Fûe_Sèt
 *
°©
);

70 
GOSFS_Sync
(
Mou¡_Poöt
 *
mou¡Poöt
);

72 
Inô_GOSFS
();

	@include/geekos/ide.h

17 #i‚de‡
GEEKOS_IDE_H


18 
	#GEEKOS_IDE_H


	)

20 #ifde‡
GEEKOS


22 
Inô_IDE
();

	@include/geekos/idt.h

17 #i‚de‡
GEEKOS_IDT_H


18 
	#GEEKOS_IDT_H


	)

20 
	~<gìkos/öt.h
>

25 
	#NUM_IDT_ENTRIES
 256

	)

30 
	#FIRST_EXCEPTION
 0

	)

31 
	#NUM_EXCEPTIONS
 18

	)

36 
	#FIRST_EXTERNAL_INT
 32

	)

37 
	#NUM_EXTERNAL_INTS
 16

	)

39 
	sI¡îru±_G©e
 {

40 
ush‹t_t
 
	moff£tLow
;

41 
ush‹t_t
 
	m£gmítSñe˘‹
;

42 
	mª£rved
:5;

43 
	msig«tuª
:8;

44 
	md∂
:2;

45 
	m¥e£¡
:1;

46 
ush‹t_t
 
	moff£tHigh
;

49 
	uIDT_Des¸ùt‹
 {

50 
I¡îru±_G©e
 
	mig
;

57 
Inô_IDT
(
£c⁄d¨yCPU
);

58 
Inô_I¡îru±_G©e
(
IDT_Des¸ùt‹
 *
desc
, 
ul⁄g_t
 
addr
, 
d∂
);

59 
In°Æl_I¡îru±_H™dÀr
(
öãºu±
, 
I¡îru±_H™dÀr
 
h™dÀr
);

66 
Lﬂd_IDTR
(
ush‹t_t
 * 
limôAndBa£
);

	@include/geekos/int.h

23 #i‚de‡
GEEKOS_INT_H


24 
	#GEEKOS_INT_H


	)

26 
	~<gìkos/kas£π.h
>

27 
	~<gìkos/kty≥s.h
>

28 
	~<gìkos/defs.h
>

29 
	~<gìkos/lock.h
>

36 
	sI¡îru±_Sèã
 {

41 
uöt_t
 
	mgs
;

42 
uöt_t
 
	mfs
;

43 
uöt_t
 
	mes
;

44 
uöt_t
 
	mds
;

45 
uöt_t
 
	mebp
;

46 
uöt_t
 
	medi
;

47 
uöt_t
 
	mesi
;

48 
uöt_t
 
	medx
;

49 
uöt_t
 
	mecx
;

50 
uöt_t
 
	mebx
;

51 
uöt_t
 
	móx
;

58 
uöt_t
 
	mötNum
;

65 
uöt_t
 
	mîr‹Code
;

68 
uöt_t
 
	meù
;

69 
uöt_t
 
	mcs
;

70 
uöt_t
 
	meÊags
;

78 
	sU£r_I¡îru±_Sèã
 {

79 
I¡îru±_Sèã
 
	m°©e
;

80 
uöt_t
 
	me•U£r
;

81 
uöt_t
 
	mssU£r
;

84 
__ölöe__
 
boﬁ
 
	$Is_U£r_I¡îru±
(
I¡îru±_Sèã
 *
°©e
) {

85  (
°©e
->
cs
 & 3Ë=
USER_PRIVILEGE
;

86 
	}
}

92 
	#EFLAGS_IF
 (1 << 9)

	)

97 (*
	tI¡îru±_H™dÀr
Ë(
	tI¡îru±_Sèã
 * 
	t°©e
);

103 
	`Inô_I¡îru±s
(
£c⁄d¨yCPU
);

108 
boﬁ
 
	`I¡îru±s_E«bÀd
();

110 
Spö_Lock_t
 
ötLock
;

112 
	`lockKî√l
();

113 
	`u∆ockKî√l
();

118 
__ölöe__
 
	$__DißbÀ_I¡îru±s
() {

119 
__asm__
 
	`__vﬁ©ûe__
("cli");

120 
	`lockKî√l
();

121 
	}
}

123 
	#DißbÀ_I¡îru±s
() \

125 
	`KASSERT
(
	`I¡îru±s_E«bÀd
()); \

126 
	`__DißbÀ_I¡îru±s
(); \

127 } 0)

	)

132 
__ölöe__
 
	$__E«bÀ_I¡îru±s
() {

133 
	`u∆ockKî√l
();

134 
__asm__
 
	`__vﬁ©ûe__
("sti");

135 
	}
}

137 
	#E«bÀ_I¡îru±s
() \

139 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
()); \

140 
	`__E«bÀ_I¡îru±s
(); \

141 } 0)

	)

146 
Dump_I¡îru±_Sèã
(
I¡îru±_Sèã
 *
°©e
);

153 
__ölöe__
 
boﬁ
 
	$Begö_I¡_Atomic
() {

154 
boﬁ
 
íabÀd
 = 
	`I¡îru±s_E«bÀd
();

155 i‡(
íabÀd
)

156 
	`DißbÀ_I¡îru±s
();

157  
íabÀd
;

158 
	}
}

164 
__ölöe__
 
	$End_I¡_Atomic
(
boﬁ
 
iÊag
) {

165 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

166 i‡(
iÊag
) {

168 
	`E«bÀ_I¡îru±s
();

170 
	}
}

	@include/geekos/io.h

17 #i‚de‡
GEEKOS_IO_H


18 
	#GEEKOS_IO_H


	)

20 
	~<gìkos/kty≥s.h
>

22 
Out_Byã
(
ush‹t_t
 
p‹t
, 
uch¨_t
 
vÆue
);

23 
uch¨_t
 
In_Byã
(
ush‹t_t
 
p‹t
);

25 
Out_W‹d
(
ush‹t_t
 
p‹t
, ush‹t_à
vÆue
);

26 
ush‹t_t
 
In_W‹d
(ush‹t_à
p‹t
);

28 
IO_Dñay
();

	@include/geekos/irq.h

17 #i‚de‡
GEEKOS_IRQ_H


18 
	#GEEKOS_IRQ_H


	)

20 
	~<gìkos/öt.h
>

22 
In°Æl_IRQ
(
úq
, 
I¡îru±_H™dÀr
 
h™dÀr
);

23 
ush‹t_t
 
Gë_IRQ_Mask
();

24 
Së_IRQ_Mask
(
ush‹t_t
 
mask
);

25 
E«bÀ_IRQ
(
úq
);

26 
DißbÀ_IRQ
(
úq
);

32 
Begö_IRQ
(
I¡îru±_Sèã
 *
°©e
);

33 
End_IRQ
(
I¡îru±_Sèã
 *
°©e
);

	@include/geekos/kassert.h

17 #i‚de‡
GEEKOS_KASSERT_H


18 
	#GEEKOS_KASSERT_H


	)

20 
	~<gìkos/s¸ìn.h
>

23 #i‚de‡
NDEBUG


25 
	gKî√l_Thªad
;

26 
submôTe°ög
;

27 
Gë_CPU_ID
();

28 
H¨dw¨e_Shutdown
();

29 
Kî√l_Thªad
 *
g_cuºítThªads
[];

30 
	#CURRENT_THREAD
 (
g_cuºítThªads
[
	`Gë_CPU_ID
()])

	)

32 
	#KASSERT
(
c⁄d
) \

34 i‡(!(
c⁄d
)) { \

35 
	`Së_Cuºít_Aâr
(
	`ATTRIB
(
RED
, 
GRAY
|
BRIGHT
)); \

36 
	`Pröt
("Failedássertion in %s: %sát %s,Üine %d, RA=%lx,Åhread=%p\n",\

37 
__func__
, #c⁄d, 
__FILE__
, 
__LINE__
, \

38 (
ul⁄g_t
Ë
	`__buûtö_ªtu∫_addªss
(0), \

39 
CURRENT_THREAD
); \

40 i‡(
submôTe°ög
Ë
	`H¨dw¨e_Shutdown
(); \

44 } 0)

	)

46 
	#KASSERT0
(
c⁄d
, 
mesßge
) \

48 i‡(!(
c⁄d
)) { \

49 
	`Së_Cuºít_Aâr
(
	`ATTRIB
(
RED
, 
GRAY
|
BRIGHT
)); \

50 
	`Pröt
("Failedássertion in %s: %sát %s,Üine %d, RA=%lx,Åhread=%p\nNote: %s\n",\

51 
__func__
, #c⁄d, 
__FILE__
, 
__LINE__
, \

52 (
ul⁄g_t
Ë
	`__buûtö_ªtu∫_addªss
(0), \

53 
CURRENT_THREAD
, 
mesßge
); \

54 i‡(
submôTe°ög
Ë
	`H¨dw¨e_Shutdown
(); \

58 } 0)

	)

61 
	#TODO
(
mesßge
) \

63 
	`Së_Cuºít_Aâr
(
	`ATTRIB
(
BLUE
, 
GRAY
|
BRIGHT
)); \

64 
	`Pröt
("Unim∂emíãd fótuª: %s\n", (
mesßge
)); \

65 i‡(
submôTe°ög
Ë
	`H¨dw¨e_Shutdown
(); \

67 
	`Exô
(-1); \

68 } 0)

	)

75 
	#PAUSE
(
cou¡
) \

77 
ul⁄g_t
 
i
; \

78 
i
 = 0; i < (
cou¡
); ++i) \

80 } 0)

	)

87 
	#KASSERT
(
c⁄d
)

	)

88 
	#TODO
(
mesßge
)

	)

89 
	#PAUSE
(
cou¡
)

	)

98 
	#STOP
(Ë1)

	)

103 
	#P™ic
(
¨gs
...) \

105 
	`Së_Cuºít_Aâr
(
	`ATTRIB
(
RED
, 
GRAY
|
BRIGHT
)); \

106 
	`Pröt
(
¨gs
); \

107 i‡(
submôTe°ög
Ë
	`H¨dw¨e_Shutdown
(); \

109 } 0)

	)

	@include/geekos/keyboard.h

17 #i‚de‡
GEEKOS_KEYBOARD_H


18 
	#GEEKOS_KEYBOARD_H


	)

20 
	~<gìkos/kty≥s.h
>

26 #ifde‡
GEEKOS


28 
	#KB_IRQ
 1

	)

33 
	#KB_CMD
 0x64

	)

34 
	#KB_DATA
 0x60

	)

39 
	#KB_OUTPUT_FULL
 0x01

	)

44 
	#KB_KEY_RELEASE
 0x80

	)

61 
ush‹t_t
 
	tKeycode
;

66 
	#KEY_SPECIAL_FLAG
 0x0100

	)

67 
	#KEY_KEYPAD_FLAG
 0x0200

	)

68 
	#KEY_SHIFT_FLAG
 0x1000

	)

69 
	#KEY_ALT_FLAG
 0x2000

	)

70 
	#KEY_CTRL_FLAG
 0x4000

	)

71 
	#KEY_RELEASE_FLAG
 0x8000

	)

76 
	#_SPECIAL
(
num
Ë(
KEY_SPECIAL_FLAG
 | (num))

	)

77 
	#KEY_UNKNOWN
 
	`_SPECIAL
(0)

	)

78 
	#KEY_F1
 
	`_SPECIAL
(1)

	)

79 
	#KEY_F2
 
	`_SPECIAL
(2)

	)

80 
	#KEY_F3
 
	`_SPECIAL
(3)

	)

81 
	#KEY_F4
 
	`_SPECIAL
(4)

	)

82 
	#KEY_F5
 
	`_SPECIAL
(5)

	)

83 
	#KEY_F6
 
	`_SPECIAL
(6)

	)

84 
	#KEY_F7
 
	`_SPECIAL
(7)

	)

85 
	#KEY_F8
 
	`_SPECIAL
(8)

	)

86 
	#KEY_F9
 
	`_SPECIAL
(9)

	)

87 
	#KEY_F10
 
	`_SPECIAL
(10)

	)

88 
	#KEY_F11
 
	`_SPECIAL
(11)

	)

89 
	#KEY_F12
 
	`_SPECIAL
(12)

	)

90 
	#KEY_LCTRL
 
	`_SPECIAL
(13)

	)

91 
	#KEY_RCTRL
 
	`_SPECIAL
(14)

	)

92 
	#KEY_LSHIFT
 
	`_SPECIAL
(15)

	)

93 
	#KEY_RSHIFT
 
	`_SPECIAL
(16)

	)

94 
	#KEY_LALT
 
	`_SPECIAL
(17)

	)

95 
	#KEY_RALT
 
	`_SPECIAL
(18)

	)

96 
	#KEY_PRINTSCRN
 
	`_SPECIAL
(19)

	)

97 
	#KEY_CAPSLOCK
 
	`_SPECIAL
(20)

	)

98 
	#KEY_NUMLOCK
 
	`_SPECIAL
(21)

	)

99 
	#KEY_SCRLOCK
 
	`_SPECIAL
(22)

	)

100 
	#KEY_SYSREQ
 
	`_SPECIAL
(23)

	)

105 
	#KEYPAD_START
 128

	)

106 
	#_KEYPAD
(
num
Ë(
KEY_KEYPAD_FLAG
 | 
KEY_SPECIAL_FLAG
 | (num+
KEYPAD_START
))

	)

107 
	#KEY_KPHOME
 
	`_KEYPAD
(0)

	)

108 
	#KEY_KPUP
 
	`_KEYPAD
(1)

	)

109 
	#KEY_KPPGUP
 
	`_KEYPAD
(2)

	)

110 
	#KEY_KPMINUS
 
	`_KEYPAD
(3)

	)

111 
	#KEY_KPLEFT
 
	`_KEYPAD
(4)

	)

112 
	#KEY_KPCENTER
 
	`_KEYPAD
(5)

	)

113 
	#KEY_KPRIGHT
 
	`_KEYPAD
(6)

	)

114 
	#KEY_KPPLUS
 
	`_KEYPAD
(7)

	)

115 
	#KEY_KPEND
 
	`_KEYPAD
(8)

	)

116 
	#KEY_KPDOWN
 
	`_KEYPAD
(9)

	)

117 
	#KEY_KPPGDN
 
	`_KEYPAD
(10)

	)

118 
	#KEY_KPINSERT
 
	`_KEYPAD
(11)

	)

119 
	#KEY_KPDEL
 
	`_KEYPAD
(12)

	)

124 
	#ASCII_ESC
 0x1B

	)

125 
	#ASCII_BS
 0x08

	)

127 #ifde‡
GEEKOS


132 
Inô_Keybﬂrd
();

133 
boﬁ
 
Ród_Key
(
Keycode
 * 
keycode
);

134 
Keycode
 
Waô_F‹_Key
();

	@include/geekos/kthread.h

18 #i‚de‡
GEEKOS_KTHREAD_H


19 
	#GEEKOS_KTHREAD_H


	)

21 
	~<gìkos/kty≥s.h
>

22 
	~<gìkos/li°.h
>

25 
	gKî√l_Thªad
;

26 
	gU£r_C⁄ãxt
;

27 
	gI¡îru±_Sèã
;

34 
DEFINE_LIST
(
Thªad_Queue
, 
Kî√l_Thªad
);

39 
DEFINE_LIST
(
AŒ_Thªad_Li°
, 
Kî√l_Thªad
);

41 
	#AFFINITY_ANY_CORE
 -1

	)

49 
	sKî√l_Thªad
 {

50 
ul⁄g_t
 
	me•
;

51 vﬁ©ûê
ul⁄g_t
 
	mnumTicks
;

52 vﬁ©ûê
ul⁄g_t
 
	mtŸÆTime
;

53 
	m¥i‹ôy
;

54 
DEFINE_LINK
(
Thªad_Queue
, 
Kî√l_Thªad
);

55 *
	m°ackPage
;

56 
U£r_C⁄ãxt
 *
	mu£rC⁄ãxt
;

57 
Kî√l_Thªad
 *
	mow√r
;

58 
	mafföôy
;

59 
	mªfCou¡
;

60 
	mdëached
;

63 
	mpid
;

66 
boﬁ
 
	mÆive
;

67 
Thªad_Queue
 
	mjoöQueue
;

68 
	mexôCode
;

71 
DEFINE_LINK
(
AŒ_Thªad_Li°
, 
Kî√l_Thªad
);

74 
	#MAX_TLOCAL_KEYS
 128

	)

75 c⁄° *
	méoˇlD©a
[
MAX_TLOCAL_KEYS
];

78 
	mthªadName
[20];

82 #ifde‡
GEEKOS


86 
IMPLEMENT_LIST
(
Thªad_Queue
, 
Kî√l_Thªad
);

87 
IMPLEMENT_LIST
(
AŒ_Thªad_Li°
, 
Kî√l_Thªad
);

89 
__ölöe__
 
	$Enqueue_Thªad
(
Thªad_Queue
 *
queue
,

90 
Kî√l_Thªad
 *
kthªad
) {

91 
	`Add_To_Back_Of_Thªad_Queue
(
queue
, 
kthªad
);

92 
	}
}

94 
__ölöe__
 
	$Remove_Thªad
(
Thªad_Queue
 *
queue
,

95 
Kî√l_Thªad
 *
kthªad
) {

96 
	`Remove_From_Thªad_Queue
(
queue
, 
kthªad
);

97 
	}
}

103 (*
	tThªad_Sèπ_Func
Ë(
	tul⁄g_t
 
	t¨g
);

108 
	#PRIORITY_IDLE
 0

	)

109 
	#PRIORITY_USER
 1

	)

110 
	#PRIORITY_LOW
 2

	)

111 
	#PRIORITY_NORMAL
 5

	)

112 
	#PRIORITY_HIGH
 10

	)

117 
	#MAX_QUEUE_LEVEL
 4

	)

123 
	`Inô_ScheduÀr
(
CPUid
, *
°ack
);

124 
Kî√l_Thªad
 *
	`Sèπ_Kî√l_Thªad
(
Thªad_Sèπ_Func
 
°¨tFunc
,

125 
ul⁄g_t
 
¨g
,

126 
¥i‹ôy
,

127 
boﬁ
 
dëached
, c⁄° *
«me
);

128 
Kî√l_Thªad
 *
	`Sèπ_U£r_Thªad
(
U£r_C⁄ãxt
 *
u£rC⁄ãxt
,

129 
boﬁ
 
dëached
);

130 
	`Make_Ru¬abÀ
(
Kî√l_Thªad
 *
kthªad
);

131 
	`Make_Ru¬abÀ_Atomic
(
Kî√l_Thªad
 *
kthªad
);

132 
Kî√l_Thªad
 *
	`Gë_Cuºít
();

133 
Kî√l_Thªad
 *
	`Gë_Next_Ru¬abÀ
();

134 
	`ScheduÀ
();

135 
	`Yõld
();

136 
	$Exô
(
exôCode
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

137 
	`Joö
(
Kî√l_Thªad
 *
kthªad
);

138 
Kî√l_Thªad
 *
	`Lookup_Thªad
(
pid
, 
nŸOw√r
);

143 
	`Swôch_To_Thªad
(
Kî√l_Thªad
 *);

148 
	`Waô
(
Thªad_Queue
 *
waôQueue
);

149 
	`Wake_Up
(
Thªad_Queue
 *
waôQueue
);

150 
	`Wake_Up_O√
(
Thªad_Queue
 *
waôQueue
);

155 
Kî√l_Thªad
 *
g_cuºítThªads
[];

160 
g_√edRescheduÀ
[];

165 vﬁ©ûê
g_¥ìm±i⁄DißbÀd
[];

170 
	#MIN_DESTRUCTOR_ITERATIONS
 4

	)

172 (*
	téoˇl_de°ru˘‹_t
) (*);

173 
	téoˇl_key_t
;

175 
	`Tloˇl_Cª©e
(
éoˇl_key_t
 *, 
éoˇl_de°ru˘‹_t
);

176 
	`Tloˇl_Put
(
éoˇl_key_t
, const *);

177 *
	`Tloˇl_Gë
(
éoˇl_key_t
);

180 
	`Dump_AŒ_Thªad_Li°
();

182 
	`Wake_Up_Locked
(
Thªad_Queue
 *
waôQueue
);

	@include/geekos/ktypes.h

17 #i‚de‡
GEEKOS_KTYPES_H


18 
	#GEEKOS_KTYPES_H


	)

24 
	~<°dboﬁ.h
>

29 
	tul⁄g_t
;

30 
	tuöt_t
;

31 
	tush‹t_t
;

32 
	tuch¨_t
;

39 
	#MIN
(
a
,
b
Ë({
	`ty≥of
 (aË
_a
 = (a);Åy≥o‡(bË
_b
 = (b); (_®< _bË? _®: _b; })

	)

40 
	#MAX
(
a
,
b
Ë({
	`ty≥of
 (aË
_a
 = (a);Åy≥o‡(bË
_b
 = (b); (_®> _bË? _®: _b; })

	)

45 
	#ISDIGIT
(
c
Ë((cË>'0' && (cË<'9')

	)

46 
	#TOLOWER
(
c
Ë(((cË>'A' && (cË<'Z'Ë? ((cË+ ('a' - 'A')Ë: (c))

	)

47 
	#TOUPPER
(
c
Ë(((cË>'a' && (cË<'z'Ë? ((cË- ('a' - 'A')Ë: (c))

	)

	@include/geekos/list.h

16 #i‚de‡
GEEKOS_LIST_H


17 
	#GEEKOS_LIST_H


	)

19 
	~<gìkos/kty≥s.h
>

20 
	~<gìkos/kas£π.h
>

21 
	~<gìkos/lock.h
>

23 
	#U∆ock_Li°
(
lock
Ë
	`Spö_U∆ock
÷ock)

	)

24 
	#Lock_Li°
(
lock
Ë
	`Spö_Lock
÷ock)

	)

29 
	#DEFINE_LIST
(
li°Ty≥Name
, 
nodeTy≥Name
) \

30 
	sli°Ty≥Name
 { \

31 
nodeTy≥Name
 *
hód
, *
èû
; \

32 
Spö_Lock_t
 
lock
; \

33 }

	)

39 
	#DEFINE_LINK
(
li°Ty≥Name
, 
nodeTy≥Name
) \

40 
nodeTy≥Name
 * 
¥ev
##
li°Ty≥Name
, * 
√xt
##
	)
listTypeName

45 
	#IMPLEMENT_LIST
(
LTy≥
, 
NTy≥
) \

46 
__ölöe__
 
CÀ¨_
##
	`LTy≥
(
LTy≥
 *
li°På
) { \

47 
li°På
->
hód
 =Üi°På->
èû
 = 0; \

49 
__ölöe__
 
boﬁ
 
Is_Membî_Of_
##
	`LTy≥
(
LTy≥
 *
li°På
, 
NTy≥
 *
nodePå
) { \

50 
	`Lock_Li°
(&
li°På
->
lock
); \

51 
NTy≥
 *
cur
 = 
li°På
->
hód
; \

52 
cur
 != 0) { \

53 i‡(
cur
 =
nodePå
) { \

54 
	`U∆ock_Li°
(&
li°På
->
lock
); \

55  
åue
; \

57 
cur
 = cur->
√xt
##
LTy≥
; \

59 
	`U∆ock_Li°
(&
li°På
->
lock
); \

60  
Ál£
; \

62 
__ölöe__
 
NTy≥
 * 
Gë_Fr⁄t_Of_
##
	`LTy≥
(
LTy≥
 *
li°På
) { \

63  
li°På
->
hód
; \

65 
__ölöe__
 
NTy≥
 * 
Gë_Back_Of_
##
	`LTy≥
(
LTy≥
 *
li°På
) { \

66  
li°På
->
èû
; \

68 
__ölöe__
 
NTy≥
 * 
Gë_Next_In_
##
	`LTy≥
(NTy≥ *
nodePå
) { \

69  
nodePå
->
√xt
##
LTy≥
; \

71 
__ölöe__
 
Së_Next_In_
##
	`LTy≥
(
NTy≥
 *
nodePå
, NTy≥ *
vÆue
) { \

72 
nodePå
->
√xt
##
LTy≥
 = 
vÆue
; \

74 
__ölöe__
 
NTy≥
 * 
Gë_Pªv_In_
##
	`LTy≥
(NTy≥ *
nodePå
) { \

75  
nodePå
->
¥ev
##
LTy≥
; \

77 
__ölöe__
 
Së_Pªv_In_
##
	`LTy≥
(
NTy≥
 *
nodePå
, NTy≥ *
vÆue
) { \

78 
nodePå
->
¥ev
##
LTy≥
 = 
vÆue
; \

80 
__ölöe__
 
Add_To_Fr⁄t_Of_
##
	`LTy≥
(
LTy≥
 *
li°På
, 
NTy≥
 *
nodePå
) { \

81 
	`KASSERT
(!
Is_Membî_Of_
##
	`LTy≥
(
li°På
, 
nodePå
)); \

82 
	`Lock_Li°
(&
li°På
->
lock
); \

83 
nodePå
->
¥ev
##
LTy≥
 = 0; \

84 i‡(
li°På
->
hód
 == 0) { \

85 
li°På
->
hód
 =Üi°På->
èû
 = 
nodePå
; \

86 
nodePå
->
√xt
##
LTy≥
 = 0; \

88 
li°På
->
hód
->
¥ev
##
LTy≥
 = 
nodePå
; \

89 
nodePå
->
√xt
##
LTy≥
 = 
li°På
->
hód
; \

90 
li°På
->
hód
 = 
nodePå
; \

92 
	`U∆ock_Li°
(&
li°På
->
lock
); \

94 
__ölöe__
 
Unchecked_Add_To_Back_Of_
##
	`LTy≥
(
LTy≥
 *
li°På
, 
NTy≥
 *
nodePå
) { \

95 
nodePå
->
√xt
##
LTy≥
 = 0; \

96 
	`Lock_Li°
(&
li°På
->
lock
); \

97 i‡(
li°På
->
èû
 == 0) { \

98 
li°På
->
hód
 =Üi°På->
èû
 = 
nodePå
; \

99 
nodePå
->
¥ev
##
LTy≥
 = 0; \

101 
li°På
->
èû
->
√xt
##
LTy≥
 = 
nodePå
; \

102 
nodePå
->
¥ev
##
LTy≥
 = 
li°På
->
èû
; \

103 
li°På
->
èû
 = 
nodePå
; \

105 
	`U∆ock_Li°
(&
li°På
->
lock
); \

107 
__ölöe__
 
Add_To_Back_Of_
##
	`LTy≥
(
LTy≥
 *
li°På
, 
NTy≥
 *
nodePå
) { \

108 
	`KASSERT
(!
Is_Membî_Of_
##
	`LTy≥
(
li°På
, 
nodePå
)); \

109 
Unchecked_Add_To_Back_Of_
##
	`LTy≥
(
li°På
, 
nodePå
); \

111 
__ölöe__
 
Aµíd_
##
	`LTy≥
(
LTy≥
 *
li°ToModify
, LTy≥ *
li°ToAµíd
) { \

112 
	`Lock_Li°
(&
li°ToModify
->
lock
); \

113 
	`Lock_Li°
(&
li°ToAµíd
->
lock
); \

114 i‡(
li°ToAµíd
->
hód
 != 0) { \

115 i‡(
li°ToModify
->
hód
 == 0) { \

116 
li°ToModify
->
hód
 = 
li°ToAµíd
->head; \

117 
li°ToModify
->
èû
 = 
li°ToAµíd
->tail; \

119 
	`KASSERT
(
li°ToAµíd
->
hód
 != 0); \

120 
	`KASSERT
(
li°ToModify
->
èû
 != 0); \

121 
li°ToAµíd
->
hód
->
¥ev
##
LTy≥
 = 
li°ToModify
->
èû
; \

122 
li°ToModify
->
èû
->
√xt
##
LTy≥
 = 
li°ToAµíd
->
hód
; \

123 
li°ToModify
->
èû
 = 
li°ToAµíd
->tail; \

126 
li°ToAµíd
->
hód
 =Üi°ToAµíd->
èû
 = 0; \

127 
	`U∆ock_Li°
(&
li°ToAµíd
->
lock
); \

128 
	`U∆ock_Li°
(&
li°ToModify
->
lock
); \

130 
__ölöe__
 
NTy≥
 * 
Remove_From_Fr⁄t_Of_
##
	`LTy≥
(
LTy≥
 *
li°På
) { \

131 
	`Lock_Li°
(&
li°På
->
lock
); \

132 
NTy≥
 *
nodePå
; \

133 
nodePå
 = 
li°På
->
hód
; \

134 
	`KASSERT
(
nodePå
 != 0); \

135 
li°På
->
hód
 =Üi°På->hód->
√xt
##
LTy≥
; \

136 i‡(
li°På
->
hód
 == 0) \

137 
li°På
->
èû
 = 0; \

139 
li°På
->
hód
->
¥ev
##
LTy≥
 = 0; \

140 
	`U∆ock_Li°
(&
li°På
->
lock
); \

141  
nodePå
; \

143 
__ölöe__
 
Remove_From_
##
	`LTy≥
(
LTy≥
 *
li°På
, 
NTy≥
 *
nodePå
) { \

144 
	`KASSERT
(
Is_Membî_Of_
##
	`LTy≥
(
li°På
, 
nodePå
)); \

145 
	`Lock_Li°
(&
li°På
->
lock
); \

146 i‡(
nodePå
->
¥ev
##
LTy≥
 != 0) \

147 
nodePå
->
¥ev
##
LTy≥
->
√xt
##LType =ÇodePtr->next##LType; \

149 
li°På
->
hód
 = 
nodePå
->
√xt
##
LTy≥
; \

150 i‡(
nodePå
->
√xt
##
LTy≥
 != 0) \

151 
nodePå
->
√xt
##
LTy≥
->
¥ev
##LType =ÇodePtr->prev##LType; \

153 
li°På
->
èû
 = 
nodePå
->
¥ev
##
LTy≥
; \

154 
	`U∆ock_Li°
(&
li°På
->
lock
); \

156 
__ölöe__
 
boﬁ
 
Is_
##
LTy≥
##
	`_Em±y
(LTy≥ *
li°På
) { \

157  
li°På
->
hód
 == 0; \

159 
__ölöe__
 
In£π_I¡o_
##
	`LTy≥
(
LTy≥
 *
li°På
, 
NTy≥
 *
nodeToIn£πA·î
, NTy≥ *
nodePå
) { \

160 
	`KASSERT
(
Is_Membî_Of_
##
	`LTy≥
(
li°På
, 
nodeToIn£πA·î
)); \

161 
	`Lock_Li°
(&
li°På
->
lock
); \

162 if(
nodeToIn£πA·î
->
√xt
##
LTy≥
 == 0) { \

163 
nodeToIn£πA·î
->
√xt
##
LTy≥
 = 
nodePå
; \

164 
nodePå
->
¥ev
##
LTy≥
 = 
nodeToIn£πA·î
; \

165 
nodePå
->
√xt
##
LTy≥
 = 0; \

166 
li°På
->
èû
 = 
nodePå
; \

169 
nodePå
->
√xt
##
LTy≥
 = 
nodeToIn£πA·î
->next##LType; \

170 
nodeToIn£πA·î
->
√xt
##
LTy≥
 = 
nodePå
; \

171 
nodePå
->
¥ev
##
LTy≥
 = 
nodeToIn£πA·î
; \

172 
nodePå
->
√xt
##
LTy≥
->
¥ev
##LType =ÇodePtr; \

174 
	`U∆ock_Li°
(&
li°På
->
lock
); \

175 }

	)

	@include/geekos/lock.h

13 #i‚de‡
GEEKOS_LOCK_H


14 
	#GEEKOS_LOCK_H


	)

17 
	mlock
;

18 
Kî√l_Thªad
 *
	mlockî
;

19 
Kî√l_Thªad
 *
	mœ°Lockî
;

20 } 
	tSpö_Lock_t
;

22 
Spö_Lock
(
Spö_Lock_t
 *);

23 
Spö_U∆ock
(
Spö_Lock_t
 *);

24 
Is_Locked
(
Spö_Lock_t
 *);

	@include/geekos/malloc.h

18 #i‚de‡
GEEKOS_MALLOC_H


19 
	#GEEKOS_MALLOC_H


	)

21 
	~<gìkos/kty≥s.h
>

23 
Inô_Hóp
(
ul⁄g_t
 
°¨t
, ul⁄g_à
size
);

24 *
MÆloc
(
ul⁄g_t
 
size
);

25 
Fªe
(*
buf
);

	@include/geekos/mem.h

18 #i‚de‡
GEEKOS_MEM_H


19 
	#GEEKOS_MEM_H


	)

21 
	~<gìkos/kty≥s.h
>

22 
	~<gìkos/defs.h
>

23 
	~<gìkos/li°.h
>

24 
	~<gìkos/∑gög.h
>

26 
	gBoŸ_Info
;

31 
	#PAGE_AVAIL
 0x0000

	)

32 
	#PAGE_KERN
 0x0001

	)

33 
	#PAGE_HW
 0x0002

	)

34 
	#PAGE_ALLOCATED
 0x0004

	)

35 
	#PAGE_UNUSED
 0x0008

	)

36 
	#PAGE_HEAP
 0x0010

	)

37 
	#PAGE_PAGEABLE
 0x0020

	)

38 
	#PAGE_LOCKED
 0x0040

	)

43 
	#ISA_HOLE_START
 0x0A0000

	)

44 
	#ISA_HOLE_END
 0x100000

	)

50 
	#HIGHMEM_START
 (
ISA_HOLE_END
 + 8192)

	)

55 
	#KERNEL_HEAP_SIZE
 (1024*1024)

	)

57 
	gPage
;

62 
DEFINE_LIST
(
Page_Li°
, 
Page
);

68 
	sPage
 {

69 
	mÊags
;

70 
DEFINE_LINK
(
Page_Li°
, 
Page
);

71 
	m˛ock
;

72 
ul⁄g_t
 
	mvaddr
;

73 
±e_t
 *
	míåy
;

74 
U£r_C⁄ãxt
 *
	mc⁄ãxt
;

77 
IMPLEMENT_LIST
(
Page_Li°
, 
Page
);

79 
Inô_Mem
(
BoŸ_Info
 *
boŸInfo
);

80 
Inô_BSS
();

81 *
AŒoc_Page
();

82 *
AŒoc_PagóbÀ_Page
(
±e_t
 * 
íåy
, 
ul⁄g_t
 
vaddr
);

83 
Fªe_Page
(*
∑geAddr
);

88 
__ölöe__
 
boﬁ
 
	$Is_Page_Mu…ùÀ
(
ul⁄g_t
 
addr
) {

89  
addr
 =◊dd∏& ~(
PAGE_MASK
));

90 
	}
}

95 
__ölöe__
 
ul⁄g_t
 
	$Round_Up_To_Page
(
ul⁄g_t
 
addr
) {

96 i‡((
addr
 & 
PAGE_MASK
) != 0) {

97 
addr
 &~(
PAGE_MASK
);

98 
addr
 +
PAGE_SIZE
;

100  
addr
;

101 
	}
}

106 
__ölöe__
 
ul⁄g_t
 
	$Round_Down_To_Page
(
ul⁄g_t
 
addr
) {

107  
addr
 & (~
PAGE_MASK
);

108 
	}
}

113 
__ölöe__
 
	$Page_Index
(
ul⁄g_t
 
addr
) {

114  ()(
addr
 >> 
PAGE_POWER
);

115 
	}
}

120 
__ölöe__
 
Page
 *
	$Gë_Page
(
ul⁄g_t
 
addr
) {

121 
Page
 *
g_∑geLi°
;

123  &
g_∑geLi°
[
	`Page_Index
(
addr
)];

124 
	}
}

129 
__ölöe__
 
ul⁄g_t
 
	$Gë_Page_Addªss
(
Page
 *
∑ge
) {

130 
Page
 *
g_∑geLi°
;

131 
ul⁄g_t
 
ödex
 = 
∑ge
 - 
g_∑geLi°
;

132  
ödex
 << 
PAGE_POWER
;

133 
	}
}

	@include/geekos/net/arp.h

10 #i‚de‡
_ARP_H_


11 
	#_ARP_H_


	)

13 
	~<gìkos/defs.h
>

14 
	~<gìkos/kty≥s.h
>

15 
	~<gìkos/li°.h
>

16 
	~<gìkos/√t/√t.h
>

17 
	~<gìkos/√t/√tbuf.h
>

18 
	~<gìkos/°rög.h
>

22 
	#ARP_HTYPE_ETH
 1

	)

25 
	#ARP_PTYPE_IPV4
 0x0800

	)

28 
	#ARP_OPER_REQUEST
 1

	)

29 
	#ARP_OPER_REPLY
 2

	)

30 
	#ARP_OPER_RARP_REQUEST
 3

	)

31 
	#ARP_OPER_RARP_REPLY
 4

	)

33 
	#ARP_PROT_ADDR_SIZE
 4

	)

34 
	#ARP_HWARE_ADDR_SIZE
 6

	)

36 
uch¨_t
 
	tARP_PrŸocﬁ_Addªss
[
ARP_PROT_ADDR_SIZE
];

37 
uch¨_t
 
	tARP_H¨dw¨e_Addªss
[
ARP_HWARE_ADDR_SIZE
];

39 
	gARP_TabÀ_EÀmít
;

41 
DEFINE_LIST
(
ARP_TabÀ
, 
ARP_TabÀ_EÀmít
);

43 
	sARP_TabÀ_EÀmít
 {

44 
ush‹t_t
 
	mhty≥
;

45 
ush‹t_t
 
	m±y≥
;

46 
uch¨_t
 
	mh¨dw¨eAddªss
[
ARP_HWARE_ADDR_SIZE
];

47 
uch¨_t
 
	m¥ŸocﬁAddªss
[
ARP_PROT_ADDR_SIZE
];

48 
ul⁄g_t
 
	mö£πTime
;

50 
DEFINE_LINK
(
ARP_TabÀ
, 
ARP_TabÀ_EÀmít
);

54 
	sARP_Packë
 {

55 
ush‹t_t
 
	mhty≥
;

56 
ush‹t_t
 
	m±y≥
;

57 
uch¨_t
 
	mhÀn
;

58 
uch¨_t
 
	m∂í
;

59 
ush‹t_t
 
	m›î
;

60 
uöt_t
 
	msha0
;

61 
ush‹t_t
 
	msha1
;

62 
ush‹t_t
 
	m•a0
;

63 
ush‹t_t
 
	m•a1
;

64 
ush‹t_t
 
	mtha0
;

65 
uöt_t
 
	mtha1
;

66 
uöt_t
 
	mça
;

69 
IMPLEMENT_LIST
(
ARP_TabÀ
, 
ARP_TabÀ_EÀmít
);

88 
ARP_Resﬁve_Addªss
(
Në_Devi˚
 *,

89 
ush‹t_t
 
hty≥
,

90 
ush‹t_t
 
±y≥
,

91 
ARP_PrŸocﬁ_Addªss
 
¥ŸocﬁAddªss
,

92 
ARP_H¨dw¨e_Addªss
 
h¨dw¨eAddªss
);

94 
Inô_ARP_PrŸocﬁ
();

	@include/geekos/net/ethernet.h

10 #i‚de‡
_ETHERNET_H_


11 
	#_ETHERNET_H_


	)

13 
	~<gìkos/√t/√t.h
>

14 
	~<gìkos/√t/√tbuf.h
>

15 
	~<gìkos/kthªad.h
>

18 
	#ETH_IPV4
 0x0800

	)

19 
	#ETH_ARP
 0x0806

	)

20 
	#ETH_IPV6
 0x86DD

	)

22 
	#ETH_TYPE_COUNT
 3

	)

24 
	#ETH_MIN_DATA
 46U

	)

25 
	#ETH_MAX_DATA
 1500U

	)

27 
	gEthî√t_PrŸocﬁ_EÀmít
;

28 
DEFINE_LIST
(
Ethî√t_Waô_Queue
, 
Ethî√t_PrŸocﬁ_EÀmít
);

30 
	sEthî√t_PrŸocﬁ_EÀmít
 {

31 
Kî√l_Thªad
 *
	mkthªad
;

32 
Në_Buf
 **
	mnBuf
;

34 
DEFINE_LINK
(
Ethî√t_Waô_Queue
, 
Ethî√t_PrŸocﬁ_EÀmít
);

37 
	sEthî√t_Hódî
 {

38 
uch¨_t
 
	mde°Addr
[6];

39 
uch¨_t
 
	m§cAddr
[6];

40 
ush‹t_t
 
	mty≥
;

43 
Eth_Tønsmô
(
Në_Devi˚
 *
dev
,

44 
Në_Buf
 *
nBuf
,

45 
uch¨_t
 * 
de°Addr
, 
ush‹t_t
 
ty≥
);

47 
Eth_Di•©ch
(
Në_Devi˚
 *
dev
, 
Në_Buf
 *
nBuf
);

50 
Eth_Re˚ive
(
Në_Devi˚
 *
dev
, 
Në_Buf
 **
nBuf
);

52 
Eth_Di•©ch_TabÀ_Add
(
ush‹t_t
,

53 (*)(
Në_Devi˚
 *,

54 
Në_Buf
 *));

56 
	`IMPLEMENT_LIST
(
Ethî√t_Waô_Queue
, 
Ethî√t_PrŸocﬁ_EÀmít
);

	@include/geekos/net/ip.h

10 #i‚de‡
IP_H


11 
	#IP_H


	)

13 
	~<gìkos/defs.h
>

14 
	~<gìkos/kty≥s.h
>

15 
	~<gìkos/li°.h
>

16 
	~<gìkos/√t/√t.h
>

17 
	~<gìkos/√t/√tbuf.h
>

18 
	~<gìkos/√t/ùdefs.h
>

20 
	#IP_UDP_PROTOCOL
 17

	)

25 
	#INADDR_BROADCAST
 0xffffffff

	)

26 
	#INADDR_ANY
 0x0

	)

28 
	sIP_Hódî
 {

30 
uch¨_t
 
	mhLí
:4;

31 
uch¨_t
 
	mvîsi⁄
:4;

32 
uch¨_t
 
	mtos
;

33 
ush‹t_t
 
	mÀngth
;

34 
ush‹t_t
 
	midít
;

37 
ush‹t_t
 
	m‰ag_off
;

38 
uch¨_t
 
	mâl
;

39 
uch¨_t
 
	m¥Ÿocﬁ
;

40 
ush‹t_t
 
	mchecksum
;

41 
uöt_t
 
	msour˚Addr
;

42 
uöt_t
 
	mde°Addr
;

48 
	gIP_Devi˚
;

50 
DEFINE_LIST
(
IP_Devi˚_Li°
, 
IP_Devi˚
);

52 
	sIP_Devi˚
 {

53 
Në_Devi˚
 *
	m√tDevi˚
;

54 
IP_Addªss
 
	mùAddªss
;

55 
Nëmask
 
	msub√t
;

57 
DEFINE_LINK
(
IP_Devi˚_Li°
, 
IP_Devi˚
);

60 #ifde‡
GEEKOS


62 
IMPLEMENT_LIST
(
IP_Devi˚_Li°
, 
IP_Devi˚
);

64 
IP_Di•©ch
(
Në_Devi˚
 *, 
Në_Buf
 *);

65 
IP_Tønsmô
(
IP_Addªss
 * 
§c
, IP_Addªs†* 
de°ö©i⁄
,

66 
Në_Buf
 *, 
uch¨_t
 
tos
, 
ush‹t_t
 
¥Ÿocﬁ
);

69 
IP_Devi˚_Regi°î
(
Në_Devi˚
 *, 
IP_Addªss
 *, 
Nëmask
 *);

70 
IP_Devi˚_Uƒegi°î
(
IP_Devi˚
 *);

71 
IP_Devi˚_Gë_By_Name
(
IP_Devi˚
 **, *);

72 
IP_Devi˚_C⁄figuª
(*
«me
, 
IP_Addªss
 * 
ùAddªss
,

73 
Nëmask
 * 
√tmask
);

74 
IP_Devi˚_Sèt
(
IP_Devi˚_Info
 *
öfo
, 
ul⁄g_t
 
devi˚Cou¡
,

75 *
«me
);

76 
IP_Di•©ch_TabÀ_Add
(
ush‹t_t
 
ty≥
,

77 (*
di•©chî
Ë(
IP_Devi˚
 *,

78 
IP_Addªss
 *,

79 
IP_Addªss
 *,

80 
Në_Buf
 *));

81 
IP_Devi˚_Li°
 *
	`IP_Gë_Devi˚_Li°
();

84 
	`Inô_IP
();

	@include/geekos/net/ipdefs.h

10 #i‚de‡
IPDEFS_H


11 
	#IPDEFS_H


	)

13 
	~<gìkos/kty≥s.h
>

14 
	~<gìkos/defs.h
>

16 
	#NET_NAME_SIZE
 32

	)

18 
	uIP_Addªss
 {

19 
uch¨_t
 
	m±r
[4];

20 
uöt_t
 
	maddªss
;

21 } 
	tIP_Addªss
;

23 
	uNëmask
 {

24 
uch¨_t
 
	m±r
[4];

25 
uöt_t
 
	mmask
;

26 } 
	tNëmask
;

28 
	sIP_Rouã
 {

29 
IP_Addªss
 
	mde°ö©i⁄
;

30 
Nëmask
 
	m√tmask
;

31 
IP_Addªss
 
	mg©eway
;

32 
	mmëric
;

33 
uöt_t
 
	mticks
;

34 
	möãrÁ˚
[
NET_NAME_SIZE
];

37 
uch¨_t
 
	mfG©eway
:1;

38 
uch¨_t
 
	mfUp
:1;

41 
	sIP_Devi˚_Info
 {

42 
IP_Addªss
 
	mùAddªss
;

43 
Nëmask
 
	m√tmask
;

44 
IP_Addªss
 
	mg©eway
;

45 
	m«me
[
NET_NAME_SIZE
];

48 
ul⁄g_t
 
	mrxPackës
;

49 
ul⁄g_t
 
	mtxPackës
;

50 
ul⁄g_t
 
	mrxPackëEº‹s
;

51 
ul⁄g_t
 
	mtxPackëEº‹s
;

52 
ul⁄g_t
 
	mrxByãs
;

53 
ul⁄g_t
 
	mtxByãs
;

56 
ul⁄g_t
 
	mi›‹t
;

57 
uch¨_t
 
	möãºu±
;

59 
uch¨_t
 
	mmac
[6];

	@include/geekos/net/ne2000.h

11 #i‚de‡
_NE2000_H_


12 
	#_NE2000_H_


	)

14 
	~<gìkos/kty≥s.h
>

15 
	~<gìkos/li°.h
>

16 
	~<gìkos/√t/√t.h
>

19 
	#NE2K_OFFSET_ADDR
(
ªg
Ë‘eg)

	)

22 
	#NE2K_CR
 
	`NE2K_OFFSET_ADDR
(0x00)

	)

25 
	#NE2K0R_CLDA0
 
	`NE2K_OFFSET_ADDR
(0x01)

	)

26 
	#NE2K0W_PSTART
 
	`NE2K_OFFSET_ADDR
(0x01)

	)

27 
	#NE2K0R_CLDA1
 
	`NE2K_OFFSET_ADDR
(0x02)

	)

28 
	#NE2K0W_PSTOP
 
	`NE2K_OFFSET_ADDR
(0x02)

	)

29 
	#NE2K0R_BNRY
 
	`NE2K_OFFSET_ADDR
(0x03)

	)

30 
	#NE2K0W_BNRY
 
	`NE2K_OFFSET_ADDR
(0x03)

	)

31 
	#NE2K0R_TSR
 
	`NE2K_OFFSET_ADDR
(0x04)

	)

32 
	#NE2K0W_TPSR
 
	`NE2K_OFFSET_ADDR
(0x04)

	)

33 
	#NE2K0R_NCR
 
	`NE2K_OFFSET_ADDR
(0x05)

	)

34 
	#NE2K0W_TBCR0
 
	`NE2K_OFFSET_ADDR
(0x05)

	)

35 
	#NE2K0R_FIFO
 
	`NE2K_OFFSET_ADDR
(0x06)

	)

36 
	#NE2K0W_TBCR1
 
	`NE2K_OFFSET_ADDR
(0x06)

	)

37 
	#NE2K0R_ISR
 
	`NE2K_OFFSET_ADDR
(0x07)

	)

38 
	#NE2K0W_ISR
 
	`NE2K_OFFSET_ADDR
(0x07)

	)

39 
	#NE2K0R_CRDA0
 
	`NE2K_OFFSET_ADDR
(0x08)

	)

40 
	#NE2K0W_RSAR0
 
	`NE2K_OFFSET_ADDR
(0x08)

	)

41 
	#NE2K0R_CRDA1
 
	`NE2K_OFFSET_ADDR
(0x09)

	)

42 
	#NE2K0W_RSAR1
 
	`NE2K_OFFSET_ADDR
(0x09)

	)

43 
	#NE2K0W_RBCR0
 
	`NE2K_OFFSET_ADDR
(0x0A)

	)

44 
	#NE2K0W_RBCR1
 
	`NE2K_OFFSET_ADDR
(0x0B)

	)

45 
	#NE2K0R_RSR
 
	`NE2K_OFFSET_ADDR
(0x0C)

	)

46 
	#NE2K0W_RCR
 
	`NE2K_OFFSET_ADDR
(0x0C)

	)

47 
	#NE2K0R_CNTR0
 
	`NE2K_OFFSET_ADDR
(0x0D)

	)

48 
	#NE2K0W_TCR
 
	`NE2K_OFFSET_ADDR
(0x0D)

	)

49 
	#NE2K0R_CNTR1
 
	`NE2K_OFFSET_ADDR
(0x0E)

	)

50 
	#NE2K0W_DCR
 
	`NE2K_OFFSET_ADDR
(0x0E)

	)

51 
	#NE2K0R_CNTR2
 
	`NE2K_OFFSET_ADDR
(0x0F)

	)

52 
	#NE2K0W_IMR
 
	`NE2K_OFFSET_ADDR
(0x0F)

	)

55 
	#NE2K1R_PAR0
 
	`NE2K_OFFSET_ADDR
(0x01)

	)

56 
	#NE2K1W_PAR0
 
	`NE2K_OFFSET_ADDR
(0x01)

	)

57 
	#NE2K1R_PAR1
 
	`NE2K_OFFSET_ADDR
(0x02)

	)

58 
	#NE2K1W_PAR1
 
	`NE2K_OFFSET_ADDR
(0x02)

	)

59 
	#NE2K1R_PAR2
 
	`NE2K_OFFSET_ADDR
(0x03)

	)

60 
	#NE2K1W_PAR2
 
	`NE2K_OFFSET_ADDR
(0x03)

	)

61 
	#NE2K1R_PAR3
 
	`NE2K_OFFSET_ADDR
(0x04)

	)

62 
	#NE2K1W_PAR3
 
	`NE2K_OFFSET_ADDR
(0x04)

	)

63 
	#NE2K1R_PAR4
 
	`NE2K_OFFSET_ADDR
(0x05)

	)

64 
	#NE2K1W_PAR4
 
	`NE2K_OFFSET_ADDR
(0x05)

	)

65 
	#NE2K1R_PAR5
 
	`NE2K_OFFSET_ADDR
(0x06)

	)

66 
	#NE2K1W_PAR5
 
	`NE2K_OFFSET_ADDR
(0x06)

	)

67 
	#NE2K1R_CURR
 
	`NE2K_OFFSET_ADDR
(0x07)

	)

68 
	#NE2K1W_CURR
 
	`NE2K_OFFSET_ADDR
(0x07)

	)

69 
	#NE2K1R_MAR0
 
	`NE2K_OFFSET_ADDR
(0x08)

	)

70 
	#NE2K1W_MAR0
 
	`NE2K_OFFSET_ADDR
(0x08)

	)

71 
	#NE2K1R_MAR1
 
	`NE2K_OFFSET_ADDR
(0x09)

	)

72 
	#NE2K1W_MAR1
 
	`NE2K_OFFSET_ADDR
(0x09)

	)

73 
	#NE2K1R_MAR2
 
	`NE2K_OFFSET_ADDR
(0x0A)

	)

74 
	#NE2K1W_MAR2
 
	`NE2K_OFFSET_ADDR
(0x0A)

	)

75 
	#NE2K1R_MAR3
 
	`NE2K_OFFSET_ADDR
(0x0B)

	)

76 
	#NE2K1W_MAR3
 
	`NE2K_OFFSET_ADDR
(0x0B)

	)

77 
	#NE2K1R_MAR4
 
	`NE2K_OFFSET_ADDR
(0x0C)

	)

78 
	#NE2K1W_MAR4
 
	`NE2K_OFFSET_ADDR
(0x0C)

	)

79 
	#NE2K1R_MAR5
 
	`NE2K_OFFSET_ADDR
(0x0D)

	)

80 
	#NE2K1W_MAR5
 
	`NE2K_OFFSET_ADDR
(0x0D)

	)

81 
	#NE2K1R_MAR6
 
	`NE2K_OFFSET_ADDR
(0x0E)

	)

82 
	#NE2K1W_MAR6
 
	`NE2K_OFFSET_ADDR
(0x0E)

	)

83 
	#NE2K1R_MAR7
 
	`NE2K_OFFSET_ADDR
(0x0F)

	)

84 
	#NE2K1W_MAR7
 
	`NE2K_OFFSET_ADDR
(0x0F)

	)

87 
	#NE2K2R_PSTART
 
	`NE2K_OFFSET_ADDR
(0x01)

	)

88 
	#NE2K2W_CLDA0
 
	`NE2K_OFFSET_ADDR
(0x01)

	)

89 
	#NE2K2R_PSTOP
 
	`NE2K_OFFSET_ADDR
(0x02)

	)

90 
	#NE2K2W_CLDA1
 
	`NE2K_OFFSET_ADDR
(0x02)

	)

91 
	#NE2K2R_RNPP
 
	`NE2K_OFFSET_ADDR
(0x03)

	)

92 
	#NE2K2W_RNPP
 
	`NE2K_OFFSET_ADDR
(0x03)

	)

93 
	#NE2K2R_TPSR
 
	`NE2K_OFFSET_ADDR
(0x04)

	)

94 
	#NE2K2R_LNPP
 
	`NE2K_OFFSET_ADDR
(0x05)

	)

95 
	#NE2K2W_LNPP
 
	`NE2K_OFFSET_ADDR
(0x05)

	)

96 
	#NE2K2R_AC_HI
 
	`NE2K_OFFSET_ADDR
(0x06)

	)

97 
	#NE2K2W_AC_HI
 
	`NE2K_OFFSET_ADDR
(0x06)

	)

98 
	#NE2K2R_AC_LO
 
	`NE2K_OFFSET_ADDR
(0x07)

	)

99 
	#NE2K2W_AC_LO
 
	`NE2K_OFFSET_ADDR
(0x07)

	)

100 
	#NE2K2R_RCR
 
	`NE2K_OFFSET_ADDR
(0x0C)

	)

101 
	#NE2K2R_TCR
 
	`NE2K_OFFSET_ADDR
(0x0D)

	)

102 
	#NE2K2R_DCR
 
	`NE2K_OFFSET_ADDR
(0x0E)

	)

103 
	#NE2K2R_IMR
 
	`NE2K_OFFSET_ADDR
(0x0F)

	)

106 
	#NE2K_CR_STP
 0x01

	)

107 
	#NE2K_CR_STA
 0x02

	)

108 
	#NE2K_CR_TXP
 0x04

	)

109 
	#NE2K_CR_RD0
 0x08

	)

110 
	#NE2K_CR_RD1
 0x10

	)

111 
	#NE2K_CR_RD2
 0x20

	)

112 
	#NE2K_CR_PS0
 0x40

	)

113 
	#NE2K_CR_PS1
 0x80

	)

116 
	#NE2K_CR_PAGE0
 0x00

	)

117 
	#NE2K_CR_PAGE1
 
NE2K_CR_PS0


	)

118 
	#NE2K_CR_PAGE2
 
NE2K_CR_PS1


	)

121 
	#NE2K_CR_DMA_NOT_ALLOWED
 0x00

	)

122 
	#NE2K_CR_DMA_RREAD
 
NE2K_CR_RD0


	)

123 
	#NE2K_CR_DMA_RWRITE
 
NE2K_CR_RD1


	)

124 
	#NE2K_CR_DMA_SEND_PACKET
 (
NE2K_CR_RD0
 | 
NE2K_CR_RD1
)

	)

125 
	#NE2K_CR_NODMA
 
NE2K_CR_RD2


	)

128 
	#NE2K_ISR_PRX
 0x01

	)

129 
	#NE2K_ISR_PTX
 0x02

	)

130 
	#NE2K_ISR_RXE
 0x04

	)

131 
	#NE2K_ISR_TXE
 0x08

	)

132 
	#NE2K_ISR_OVW
 0x10

	)

133 
	#NE2K_ISR_CNT
 0x20

	)

134 
	#NE2K_ISR_RDC
 0x40

	)

135 
	#NE2K_ISR_RST
 0x80

	)

138 
	#NE2K_IMR_PRXE
 0x01

	)

139 
	#NE2K_IMR_PTXE
 0x02

	)

140 
	#NE2K_IMR_RXEE
 0x04

	)

141 
	#NE2K_IMR_TXEE
 0x08

	)

142 
	#NE2K_IMR_OVWE
 0x10

	)

143 
	#NE2K_IMR_CNTE
 0x20

	)

144 
	#NE2K_IMR_RDCE
 0x40

	)

147 
	#NE2K_DCR_WTS
 0x01

	)

148 
	#NE2K_DCR_BOS
 0x02

	)

149 
	#NE2K_DCR_LAS
 0x04

	)

150 
	#NE2K_DCR_LS
 0x08

	)

151 
	#NE2K_DCR_ARM
 0x10

	)

152 
	#NE2K_DCR_FT0
 0x20

	)

153 
	#NE2K_DCR_FT1
 0x40

	)

156 
	#NE2K_DCR_FIFO1
 0x00

	)

157 
	#NE2K_DCR_FIFO2
 
NE2K_DCR_FT0


	)

158 
	#NE2K_DCR_FIFO4
 
NE2K_DCR_FT1


	)

159 
	#NE2K_DCR_FIFO6
 (
NE2K_DCR_FT0
 | 
NE2K_DCR_FT1
)

	)

162 
	#NE2K_TCR_CRC
 0x01

	)

163 
	#NE2K_TCR_LB0
 0x02

	)

164 
	#NE2K_TCR_LB1
 0x04

	)

165 
	#NE2K_TCR_ATD
 0x08

	)

166 
	#NE2K_TCR_OFST
 0x10

	)

169 
	#NE2K_TCR_LB_M0
 0x00

	)

170 
	#NE2K_TCR_LB_M1
 
NE2K_TCR_LB0


	)

171 
	#NE2K_TCR_LB_M2
 
NE2K_TCR_LB1


	)

172 
	#NE2K_TCR_LB_M3
 (
NE2K_TCR_LB0
 | 
NE2K_TCR_LB1
)

	)

175 
	#NE2K_TSR_PTX
 0x01

	)

176 
	#NE2K_TSR_COL
 0x04

	)

177 
	#NE2K_TSR_ABT
 0x08

	)

178 
	#NE2K_TSR_CRS
 0x10

	)

179 
	#NE2K_TSR_FU
 0x20

	)

180 
	#NE2K_TSR_CDH
 0x40

	)

181 
	#NE2K_TSR_OWC
 0x80

	)

184 
	#NE2K_RCR_SEP
 0x01

	)

185 
	#NE2K_RCR_AR
 0x02

	)

186 
	#NE2K_RCR_AB
 0x04

	)

187 
	#NE2K_RCR_AM
 0x08

	)

188 
	#NE2K_RCR_PRO
 0x10

	)

189 
	#NE2K_RCR_MON
 0x20

	)

192 
	#NE2K_RSR_PRX
 0x01

	)

193 
	#NE2K_RSR_CRC
 0x02

	)

194 
	#NE2K_RSR_FAE
 0x04

	)

195 
	#NE2K_RSR_FO
 0x08

	)

196 
	#NE2K_RSR_MPA
 0x10

	)

197 
	#NE2K_RSR_PHY
 0x20

	)

198 
	#NE2K_RSR_DIS
 0x40

	)

199 
	#NE2K_RSR_DFR
 0x80

	)

202 
	#NE2K_TRANSMIT_PAGE
 0x40

	)

203 
	#NE2K_TB_START
 0x40

	)

204 
	#NE2K_TB_STOP
 0x52

	)

205 
	#NE2K_RB_START
 0x52

	)

206 
	#NE2K_RB_STOP
 0x92

	)

208 
	#NE2K_IO_PORT
 
	`NE2K_OFFSET_ADDR
(0x10)

	)

209 
	#NE2K_RESET_PORT
 
	`NE2K_OFFSET_ADDR
(0x1F)

	)

211 
Në_Devi˚_C≠abûôõs
 
g_√2000C≠abûôõs
;

214 
Inô_NE2000
(
Në_Devi˚
 *
devi˚
);

215 
NE2000_Tønsmô
(
Në_Devi˚
 *
devi˚
, *
buf„r
,

216 
ul⁄g_t
 
Àngth
);

217 
NE2000_Re˚ive
(
Në_Devi˚
 *
devi˚
, *
buf„r
,

218 
ul⁄g_t
 
Àngth
, ul⁄g_à
∑geOff£t
);

219 
NE2000_Re£t
(
Në_Devi˚
 *
devi˚
);

220 
NE2000_Gë_Dev_Hdr
(
Në_Devi˚
 *
devi˚
,

221 
Në_Devi˚_Hódî
 *
hdr
,

222 
ul⁄g_t
 
∑geOff£t
);

224 
NE2000_Re˚ive_Thªad
(
Në_Devi˚
 *
devi˚
);

225 
NE2000_Tønsmô_Thªad
(
Në_Devi˚
 *
devi˚
);

226 
NE2000_Com∂ëe_Re˚ive
(
Në_Devi˚
 *
devi˚
,

227 
Në_Devi˚_Hódî
 *
hdr
);

228 
NE2000_H™dÀ_Rög_Buf„r_OvîÊow
(
Në_Devi˚
 *
devi˚
);

	@include/geekos/net/net.h

10 #i‚de‡
_NET_H_


11 
	#_NET_H_


	)

13 
	#NET_NAME_SIZE
 32

	)

14 
	#MAX_DEV_ADDR
 32

	)

16 
	~<gìkos/synch.h
>

17 
	~<gìkos/li°.h
>

18 
	~<gìkos/defs.h
>

19 
	~<gìkos/√t/√tbuf.h
>

20 
	~<gìkos/kthªad.h
>

22 
uch¨_t
 
	tMAC_Addªss
[6];

24 
	gNë_Devi˚
;

25 
	gNë_Devi˚_Re˚ive_Sèã
;

27 
	#¡ohs
(
x
Ë((((xË>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

28 
	#ht⁄s
(
x
Ë((((xË>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

30 #ifde‡
GEEKOS


35 
DEFINE_LIST
(
Në_Devi˚_Li°
, 
Në_Devi˚
);

40 
DEFINE_LIST
(
Në_Devi˚_Re˚ive_Packë_Queue
, 
Në_Devi˚_Packë
);

42 
DEFINE_LIST
(
Në_Devi˚_Packë_Queue
, 
Në_Devi˚_Packë
);

44 
	sNë_Devi˚_Packë
 {

45 *
	mbuf„r
;

46 
	mbuf„rLí
;

47 
Në_Devi˚
 *
	mdevi˚
;

49 
DEFINE_LINK
(
Në_Devi˚_Re˚ive_Packë_Queue
, 
Në_Devi˚_Packë
);

50 
DEFINE_LINK
(
Në_Devi˚_Packë_Queue
, 
Në_Devi˚_Packë
);

53 
	sNë_Devi˚_Hódî
 {

54 
uch¨_t
 
	m°©us
;

55 
uch¨_t
 
	m√xt
;

56 
ush‹t_t
 
	mcou¡
;

65 
	sNë_Devi˚
 {

66 
	m«me
[
NET_NAME_SIZE
];

67 
	mdevName
[
NET_NAME_SIZE
];

70 
ul⁄g_t
 
	mba£Addr
;

71 
ul⁄g_t
 
	múq
;

74 
ul⁄g_t
 
	maddrLígth
;

75 
uch¨_t
 
	mdevAddr
[
MAX_DEV_ADDR
];

78 
ul⁄g_t
 
	m°©us
;

79 
ul⁄g_t
 
	mÊags
;

82 
ul⁄g_t
 
	mrxPackëEº‹s
;

83 
ul⁄g_t
 
	mtxPackëEº‹s
;

84 
ul⁄g_t
 
	mrxPackës
;

85 
ul⁄g_t
 
	mtxPackës
;

86 
ul⁄g_t
 
	mrxByãs
;

87 
ul⁄g_t
 
	mtxByãs
;

90 (*
	möô
Ë(
	mNë_Devi˚
 *);

91 (*
	må™smô
Ë(
	mNë_Devi˚
 *, *, 
	mul⁄g_t
);

92 (*
	mª˚ive
Ë(
	mNë_Devi˚
 *, *, 
	mul⁄g_t
, ulong_t);

93 (*
	mª£t
Ë(
	mNë_Devi˚
 *);

94 (*
	mgëHódî
Ë(
	mNë_Devi˚
 *, 
	mNë_Devi˚_Hódî
 *,

95 
	mul⁄g_t
);

96 (*
	mcom∂ëeRe˚ive
Ë(
	mNë_Devi˚
 *, 
	mNë_Devi˚_Hódî
 *);

99 
DEFINE_LINK
(
Në_Devi˚_Li°
, 
Në_Devi˚
);

103 
	sNë_Devi˚_C≠abûôõs
 {

104 c⁄° *
	m«me
;

105 (*
	möô
Ë(
	mNë_Devi˚
 *);

106 (*
	må™smô
Ë(
	mNë_Devi˚
 *, *, 
	mul⁄g_t
);

107 (*
	mª˚ive
Ë(
	mNë_Devi˚
 *, *, 
	mul⁄g_t
, ulong_t);

108 (*
	mª£t
Ë(
	mNë_Devi˚
 *);

109 (*
	mgëHódî
Ë(
	mNë_Devi˚
 *, 
	mNë_Devi˚_Hódî
 *,

110 
	mul⁄g_t
);

111 (*
	mcom∂ëeRe˚ive
Ë(
	mNë_Devi˚
 *, 
	mNë_Devi˚_Hódî
 *);

117 
IMPLEMENT_LIST
(
Në_Devi˚_Li°
, 
Në_Devi˚
);

122 
IMPLEMENT_LIST
(
Në_Devi˚_Re˚ive_Packë_Queue
, 
Në_Devi˚_Packë
);

124 
IMPLEMENT_LIST
(
Në_Devi˚_Packë_Queue
, 
Në_Devi˚_Packë
);

127 
Regi°î_Në_Devi˚
(
Në_Devi˚_C≠abûôõs
 *, 
ul⁄g_t
, ulong_t,

128 c⁄° *
«meBa£
);

129 
Uƒegi°î_Në_Devi˚
(
Në_Devi˚
 *);

130 
Gë_Në_Devi˚_By_Name
(c⁄° *
«me
,

131 
Në_Devi˚
 **
devi˚
);

132 
Në_Devi˚_Li°
 *
Gë_Në_Devi˚_Li°
();

133 
Gë_Në_Devi˚_By_IRQ
(
úq
,

134 
Në_Devi˚
 **
devi˚
);

135 
Në_Devi˚_Re˚ive
(
Në_Devi˚
 *, 
ush‹t_t
 
rögBuf„rPage
);

136 
Gë_Fªe_Në_Devi˚
(
Në_Devi˚
 **
devi˚
);

137 
Inô_Nëw‹k_Devi˚s
();

	@include/geekos/net/netbuf.h

10 #i‚de‡
_NET_BUF_H_


11 
	#_NET_BUF_H_


	)

13 
	~<gìkos/°rög.h
>

14 
	~<gìkos/li°.h
>

15 
	~<gìkos/defs.h
>

17 
	#NET_BUF_ALLOC_OWN
 0x0

	)

18 
	#NET_BUF_ALLOC_LEND
 0x1

	)

19 
	#NET_BUF_ALLOC_COPY
 0x2

	)

21 
	gMesßge_Buf„r
;

23 
DEFINE_LIST
(
Mesßge_Buf„r_Li°
, 
Mesßge_Buf„r
);

25 
	sMesßge_Buf„r
 {

26 
	mÀngth
;

27 *
	mbuf„r
;

28 
DEFINE_LINK
(
Mesßge_Buf„r_Li°
, 
Mesßge_Buf„r
);

29 
uch¨_t
 
	mmu°Fªe
:1;

30 
uch¨_t
 
	mvÆid
:1;

33 
	gNë_Buf
;

35 
DEFINE_LIST
(
Packë_Queue
, 
Në_Buf
);

37 
	sNë_Buf
 {

38 
ul⁄g_t
 
	mÀngth
;

39 
Mesßge_Buf„r_Li°
 
	mbuf„rs
;

40 
DEFINE_LINK
(
Packë_Queue
, 
Në_Buf
);

42 #i‚de‡
NDEBUG


43 
ul⁄g_t
 
	mmÆlocCou¡
;

47 #ifde‡
GEEKOS


48 
IMPLEMENT_LIST
(
Mesßge_Buf„r_Li°
, 
Mesßge_Buf„r
);

49 
IMPLEMENT_LIST
(
Packë_Queue
, 
Në_Buf
);

54 
	#NET_BUF_SIZE
(
√t_buf
Ë“ë_buf->
Àngth
)

	)

57 
Në_Buf_Cª©e
(
Në_Buf
 **);

60 
Në_Buf_De°roy
(
Në_Buf
 *);

63 
Në_Buf_Pª≥nd
(
Në_Buf
 *, *, 
ul⁄g_t
, 
uch¨_t
);

64 
Në_Buf_Aµíd
(
Në_Buf
 *, *, 
ul⁄g_t
, 
uch¨_t
);

67 
Në_Buf_Exåa˘
(
Në_Buf
 *, 
ul⁄g_t
 
°¨t
, *
de°
, ulong_t);

68 
Në_Buf_Exåa˘_AŒ
(
Në_Buf
 *, *
de°
);

71 
Në_Buf_Remove
(
Në_Buf
 *, 
ul⁄g_t
 
°¨t
, ul⁄g_à
Àngth
);

72 
Në_Buf_Remove_AŒ
(
Në_Buf
 *);

	@include/geekos/net/port.h

10 
	#MAX_PORT
 65535

	)

12 
ush‹t_t
 
	tp‹t
;

	@include/geekos/net/rip.h

10 #i‚de‡
RIP_H


11 
	#RIP_H


	)

13 
	~<gìkos/defs.h
>

14 
	~<gìkos/kty≥s.h
>

15 
	~<gìkos/√t/sockë.h
>

17 
	#RIP_REQUEST
 1

	)

18 
	#RIP_RESPONSE
 2

	)

20 
	#RIP_VERSION
 2

	)

22 
	#RIP_INFINITY
 16

	)

23 
	#RIP_SOCKET_PORT
 520

	)

25 
	#RIP_PACKET_MAX_SIZE
 130

	)

27 
	sRIP_E¡ry
 {

28 
ush‹t_t
 
	mafi
;

29 
ush‹t_t
 
	mrouãTag
;

30 
ul⁄g_t
 
	mùAddªss
;

31 
ul⁄g_t
 
	msub√t
;

32 
ul⁄g_t
 
	m√xtH›
;

33 
ul⁄g_t
 
	mmëric
;

36 
	sRIP_Hódî
 {

37 
uch¨_t
 
	mcomm™d
;

38 
uch¨_t
 
	mvîsi⁄
;

39 
ush‹t_t
 
	munu£d
;

40 
ush‹t_t
 
	mmask
;

41 
ush‹t_t
 
	mauthTy≥
;

42 
uch¨_t
 
	mauth
[16];

45 
Inô_RIP
();

	@include/geekos/net/routing.h

1 #i‚de‡
ROUTING_H


2 
	#ROUTING_H


	)

4 
	~<gìkos/defs.h
>

5 
	~<gìkos/kty≥s.h
>

6 
	~<gìkos/√t/√t.h
>

7 
	~<gìkos/√t/√tbuf.h
>

8 
	~<gìkos/√t/ù.h
>

9 
	~<gìkos/li°.h
>

11 
	#NET_ROUTE_UP
 1

	)

12 
	#NET_ROUTE_GATEWAY
 2

	)

14 
	gRouã
;

16 
DEFINE_LIST
(
Routög_TabÀ
, 
Rouã
);

18 
	sRouã
 {

19 
IP_Addªss
 
	mde°ö©i⁄
;

20 
Nëmask
 
	m√tmask
;

21 
IP_Addªss
 
	mg©eway
;

22 
IP_Devi˚
 *
	möãrÁ˚
;

23 
uöt_t
 
	m¥efixLígth
;

24 
uöt_t
 
	mmëric
;

25 
uöt_t
 
	mticks
;

27 
DEFINE_LINK
(
Routög_TabÀ
, 
Rouã
);

29 
ush‹t_t
 
	mÊags
;

33 
IMPLEMENT_LIST
(
Routög_TabÀ
, 
Rouã
);

35 
Inô_Routög
();

36 
Në_Add_Rouã
(
IP_Addªss
 * 
de°ö©i⁄
, 
Nëmask
 * 
mask
,

37 
IP_Addªss
 * 
g©eway
, 
mëric
, *
öãrÁ˚
);

38 
Në_Dñëe_Rouã
(
IP_Addªss
 * 
de°ö©i⁄
, 
Nëmask
 * 
√tmask
);

39 
Në_CÀ™_Rouãs
(
ul⁄g_t
 
m£cs
);

40 
Në_Gë_Rouã_Info
(
IP_Devi˚
 **
devi˚
,

41 
IP_Addªss
 * 
ùAddªss
, IP_Addªs†* 
√tw‹k
,

42 
Nëmask
 * 
sub√t
, 
boﬁ
 * 
fG©eway
,

43 
IP_Addªss
 * 
g©eway
);

44 
Në_Gë_Rouã
(
IP_Devi˚
 **
devi˚
, 
IP_Addªss
 * 
ùAddªss
,

45 
boﬁ
 * 
fG©eway
, 
IP_Addªss
 * 
g©eway
);

46 
Në_Gë_Rouã_TabÀ
(
IP_Rouã
 *
èbÀ
, 
ul⁄g_t
 
maxE¡rõs
);

47 
Në_Rouã_Gë_Mëric
(
IP_Addªss
 * 
ùAddªss
, 
Nëmask
 * 
sub√t
,

48 *
mëric
);

49 
Në_Gë_Rouã_TabÀ_E¡ry
(c⁄° 
IP_Addªss
 * 
ùAddªss
,

50 c⁄° 
Nëmask
 * 
√tmask
,

51 
IP_Rouã
 *
rouã
);

	@include/geekos/net/socket.h

11 #i‚de‡
GEEKOS_SOCKET_H_


12 
	#GEEKOS_SOCKET_H_


	)

14 
	~<gìkos/defs.h
>

15 
	~<gìkos/kty≥s.h
>

16 
	~<gìkos/√t/ù.h
>

17 
	~<gìkos/kthªad.h
>

18 
	~<gìkos/synch.h
>

19 
	~<gìkos/li°.h
>

21 
	#SOCK_DGRAM
 0

	)

22 
	#SOCK_STREAM
 1

	)

24 
	#AF_INET
 2

	)

27 
	#SOCK_BUFFER_SIZE
 4096U

	)

29 
	#MSS
 1024U

	)

33 
	mSOCK_STATE_CONNECTING_CLIENT
,

34 
	mSOCK_STATE_CONNECTING_SERVER
,

35 
	mSOCK_STATE_ESTABLISHED
,

36 
	mSOCK_STATE_BOUND
,

37 
	mSOCK_STATE_LISTENING
,

38 
	mSOCK_STATE_ERROR
,

41 
	mSOCK_FIN_WAIT_1
,

42 
	mSOCK_FIN_WAIT_2
,

43 
	mSOCK_CLOSE_WAIT
,

44 
	mSOCK_CLOSING
,

45 
	mSOCK_LAST_ACK
,

46 
	mSOCK_TIME_WAIT
,

47 
	mSOCK_CLOSED


50 
	sSockë
 {

51 
ul⁄g_t
 
	mid
;

52 
ul⁄g_t
 
	mÊags
;

53 
	m°©e
;

54 
IP_Addªss
 
	mloˇlAddªss
;

55 
IP_Addªss
 
	mªmŸeAddªss
;

56 
ush‹t_t
 
	mloˇlP‹t
;

57 
ush‹t_t
 
	mªmŸeP‹t
;

58 
ush‹t_t
 
	mty≥
;

59 
boﬁ
 
	mmu…ihomed
;

60 
boﬁ
 
	mbound
;

61 
boﬁ
 
	möôülzed
;

64 
	sTCP_C⁄√˘i⁄
 {

65 
IP_Addªss
 
	maddªss
;

66 
ush‹t_t
 
	mp‹t
;

67 
ul⁄g_t
 
	m£quí˚Numbî
;

68 
ush‹t_t
 
	mèrgëP‹t
;

69 
IP_Addªss
 
	mèrgëAddªss
;

72 
	sTCP_Sockë
 {

73 
ul⁄g_t
 
	mid
;

74 
ul⁄g_t
 
	mÊags
;

75 
	m°©e
;

76 
IP_Addªss
 
	mloˇlAddªss
;

77 
IP_Addªss
 
	mªmŸeAddªss
;

78 
ush‹t_t
 
	mloˇlP‹t
;

79 
ush‹t_t
 
	mªmŸeP‹t
;

80 
ush‹t_t
 
	mty≥
;

81 
boﬁ
 
	mmu…ihomed
;

82 
boﬁ
 
	mbound
;

83 
boﬁ
 
	möôülzed
;

85 
ul⁄g_t
 
	madvîti£dWödow
;

88 
ul⁄g_t
 
	mœ°ByãAckedPå
;

89 
ul⁄g_t
 
	mœ°ByãSítPå
;

90 
ul⁄g_t
 
	mœ°ByãWrôãnPå
;

92 
ul⁄g_t
 
	mœ°ByãAcked
;

93 
ul⁄g_t
 
	mœ°ByãSít
;

94 
ul⁄g_t
 
	mœ°ByãWrôãn
;

96 
	m£ndTimî
;

97 
ul⁄g_t
 
	mmaxSídBuf„r
;

98 
uch¨_t
 
	m£ndBuf„r
[
SOCK_BUFFER_SIZE
];

99 
Muãx
 
	m£ndMuãx
;

100 
C⁄dôi⁄
 
	m£ndC⁄d
;

103 
Muãx
 
	m˛o£Muãx
;

104 
C⁄dôi⁄
 
	m˛o£C⁄d
;

107 
ul⁄g_t
 
	mœ°ByãRódPå
;

108 
ul⁄g_t
 
	m√xtByãEx≥˘edPå
;

109 
ul⁄g_t
 
	mœ°ByãRcvdPå
;

111 
ul⁄g_t
 
	mœ°ByãRód
;

112 
ul⁄g_t
 
	m√xtByãEx≥˘ed
;

113 
ul⁄g_t
 
	mœ°ByãRcvd
;

114 
ul⁄g_t
 
	mmaxRe˚iveBuf„r
;

115 
uch¨_t
 
	mª˚iveBuf„r
[
SOCK_BUFFER_SIZE
];

116 
Muãx
 
	mª˚iveMuãx
;

117 
C⁄dôi⁄
 
	mª˚iveC⁄d
;

120 
Muãx
 
	mli°íMuãx
;

121 
C⁄dôi⁄
 
	mli°íC⁄d
;

122 
ul⁄g_t
 
	mbacklogMaxSize
;

123 
ul⁄g_t
 
	mbacklogIndex
;

124 
ul⁄g_t
 
	mbacklogSize
;

125 
TCP_C⁄√˘i⁄
 *
	mbacklog
;

126 
boﬁ
 
	mli°íög
;

127 
boﬁ
 
	mbacklogOvîÊow
;

132 
	gUDP_Packë_D©a
;

134 
DEFINE_LIST
(
UDP_Packë_Queue
, 
UDP_Packë_D©a
);

136 
	sUDP_Sockë
 {

137 
ul⁄g_t
 
	mid
;

138 
ul⁄g_t
 
	mÊags
;

139 
	m°©e
;

140 
IP_Addªss
 
	mloˇlAddªss
;

141 
IP_Addªss
 
	mªmŸeAddªss
;

142 
ush‹t_t
 
	mloˇlP‹t
;

143 
ush‹t_t
 
	mªmŸeP‹t
;

144 
ush‹t_t
 
	mty≥
;

145 
boﬁ
 
	mmu…ihomed
;

146 
boﬁ
 
	mbound
;

147 
boﬁ
 
	möôülzed
;

149 
ul⁄g_t
 
	mbuf„rSize
;

150 
uch¨_t
 
	mª˚iveBuf„r
[
SOCK_BUFFER_SIZE
];

151 
UDP_Packë_Queue
 
	mqueue
;

153 
Muãx
 
	mmuãx
;

154 
C⁄dôi⁄
 
	mc⁄dôi⁄
;

167 
Sockë_Cª©e
(
uch¨_t
 
ty≥
, 
Êags
);

168 
Sockë_C⁄√˘
(
ul⁄g_t
 
id
, 
ush‹t_t
 
p‹t
, 
IP_Addªss
 * 
ùAddªss
);

169 
Sockë_Ac˚±
(
ul⁄g_t
 
id
, 
IP_Addªss
 * 
˛õ¡IpAddªss
,

170 
ush‹t_t
 * 
˛õ¡P‹t
);

171 
Sockë_Li°í
(
ul⁄g_t
 
id
, ul⁄g_à
backlog
);

172 
Sockë_Böd
(
ul⁄g_t
 
id
, 
ush‹t_t
 
p‹t
, 
IP_Addªss
 * 
ùAddªss
);

173 
Sockë_Re˚ive
(
ul⁄g_t
 
id
, 
uch¨_t
 * 
buf„r
, ul⁄g_à
buf„rSize
);

174 
Sockë_Síd
(
ul⁄g_t
 
id
, 
uch¨_t
 * 
buf„r
, ul⁄g_à
buf„rSize
);

175 
Sockë_Síd_To
(
ul⁄g_t
 
id
, 
uch¨_t
 * 
buf„r
, ul⁄g_à
buf„rSize
,

176 
ush‹t_t
 
p‹t
, 
IP_Addªss
 * 
ùAddªss
);

177 
Sockë_Re˚ive_From
(
ul⁄g_t
 
id
, 
uch¨_t
 * 
buf„r
, ul⁄g_à
buf„rSize
,

178 
ush‹t_t
 * 
p‹t
, 
IP_Addªss
 * 
ùAddªss
);

179 
Sockë_Clo£
(
ul⁄g_t
 
id
);

180 
Sockë_De°roy
(
ul⁄g_t
 
id
);

182 
Sockë_Di•©ch
(
IP_Devi˚
 *
devi˚
, 
uch¨_t
 
ty≥
, 
ush‹t_t
 
de°P‹t
,

183 
ush‹t_t
 
§cP‹t
, 
IP_Addªss
 * 
de°Addªss
,

184 
IP_Addªss
 * 
§cAddªss
, 
Në_Buf
 *
nBuf
,

185 *
d©a
);

187 
Inô_Sockës
();

	@include/geekos/net/tcp.h

10 #i‚de‡
TCP_H_


11 
	#TCP_H_


	)

13 
	~<gìkos/kty≥s.h
>

14 
	~<gìkos/defs.h
>

15 
	~<gìkos/√t/ù.h
>

16 
	~<gìkos/√t/√tbuf.h
>

18 
	#IP_TCP_PROTOCOL
 6

	)

20 
	#TCP_CWR
 1

	)

21 
	#TCP_ECE
 2

	)

22 
	#TCP_URG
 4

	)

23 
	#TCP_ACK
 8

	)

24 
	#TCP_PSH
 16

	)

25 
	#TCP_RST
 32

	)

26 
	#TCP_SYN
 64

	)

27 
	#TCP_FIN
 128

	)

29 
	sTCP_Hódî
 {

30 
ul⁄g_t
 
	m§cP‹t
:16;

31 
ul⁄g_t
 
	mde°P‹t
:16;

32 
ul⁄g_t
 
	m£qNum
;

33 
ul⁄g_t
 
	mackNum
;

34 
ul⁄g_t
 
	md©aOff£t
:4;

35 
ul⁄g_t
 
	mª£rved
:4;

36 
ul⁄g_t
 
	mcwr
:1;

37 
ul⁄g_t
 
	me˚
:1;

38 
ul⁄g_t
 
	murg
:1;

39 
ul⁄g_t
 
	mack
:1;

40 
ul⁄g_t
 
	mpsh
:1;

41 
ul⁄g_t
 
	mr°
:1;

42 
ul⁄g_t
 
	msyn
:1;

43 
ul⁄g_t
 
	mfö
:1;

44 
ul⁄g_t
 
	mwödowSize
:16;

45 
ul⁄g_t
 
	mchecksum
:16;

46 
ul⁄g_t
 
	murgítPoöãr
:16;

50 
TCP_Tønsmô
(
IP_Addªss
 * 
§cAddªss
, IP_Addªs†* 
de°Addªss
,

51 
ush‹t_t
 
§cP‹t
, ush‹t_à
de°P‹t
, 
uch¨_t
 
Êags
,

52 
ul⁄g_t
 
£qNum
, ul⁄g_à
ackNum
,

53 
ul⁄g_t
 
advîti£dWödow
, 
Në_Buf
 *
nBuf
);

55 
TCP_Di•©ch
(
IP_Devi˚
 *
devi˚
, 
IP_Addªss
 * 
de°Addªss
,

56 
IP_Addªss
 * 
§cAddªss
, 
Në_Buf
 *
nBuf
);

	@include/geekos/net/udp.h

10 #i‚de‡
UDP_H


11 
	#UDP_H


	)

13 
	~<gìkos/defs.h
>

14 
	~<gìkos/kty≥s.h
>

15 
	~<gìkos/√t/ù.h
>

16 
	~<gìkos/√t/√tbuf.h
>

17 
	~<gìkos/√t/sockë.h
>

19 
	sUDP_Hódî
 {

20 
ush‹t_t
 
	m§cP‹t
;

21 
ush‹t_t
 
	mde°P‹t
;

22 
ush‹t_t
 
	mÀngth
;

23 
ush‹t_t
 
	mchecksum
;

26 
UDP_Tønsmô
(
IP_Addªss
 * 
§c
,

27 
IP_Addªss
 * 
de°ö©i⁄
,

28 
ush‹t_t
 
§cP‹t
,

29 
ush‹t_t
 
de°P‹t
, 
Në_Buf
 *
nBuf
);

30 
UDP_Di•©ch
(
IP_Devi˚
 *
devi˚
,

31 
IP_Addªss
 * 
de°Addªss
,

32 
IP_Addªss
 * 
§cAddªss
, 
Në_Buf
 *
nBuf
);

	@include/geekos/paging.h

18 #i‚de‡
GEEKOS_PAGING_H


19 
	#GEEKOS_PAGING_H


	)

21 
	~<gìkos/kty≥s.h
>

22 
	~<gìkos/defs.h
>

23 
	~<gìkos/boŸöfo.h
>

24 
	~<gìkos/li°.h
>

26 
	gPage
;

27 
	gU£r_C⁄ãxt
;

29 
	#NUM_PAGE_TABLE_ENTRIES
 1024

	)

30 
	#NUM_PAGE_DIR_ENTRIES
 1024

	)

32 
	#PAGE_DIRECTORY_INDEX
(
x
Ë(((xË>> 22Ë& 0x3ff)

	)

33 
	#PAGE_TABLE_INDEX
(
x
Ë(((xË>> 12Ë& 0x3ff)

	)

35 
	#PAGE_ALIGNED_ADDR
(
x
Ë(((Ë(x)Ë>> 12)

	)

36 
	#PAGE_ADDR
(
x
Ë(
	`PAGE_ALIGNED_ADDR
(xË<< 12)

	)

41 
	#VM_WRITE
 1

	)

42 
	#VM_USER
 2

	)

43 
	#VM_NOCACHE
 8

	)

44 
	#VM_READ
 0

	)

45 
	#VM_EXEC
 0

	)

54 
uöt_t
 
	m¥e£¡
:1;

55 
uöt_t
 
	mÊags
:4;

56 
uöt_t
 
	mac˚s£d
:1;

57 
uöt_t
 
	mª£rved
:1;

58 
uöt_t
 
	mœrgePages
:1;

59 
uöt_t
 
	mglobÆPage
:1;

60 
uöt_t
 
	mkî√lInfo
:3;

61 
uöt_t
 
	m∑geTabÀBa£Addr
:20;

62 } 
	tpde_t
;

70 
uöt_t
 
	m¥e£¡
:1;

71 
uöt_t
 
	mÊags
:4;

72 
uöt_t
 
	mac˚s£d
:1;

73 
uöt_t
 
	mdúty
:1;

74 
uöt_t
 
	m±eAâribuã
:1;

75 
uöt_t
 
	mglobÆPage
:1;

76 
uöt_t
 
	mkî√lInfo
:3;

77 
uöt_t
 
	m∑geBa£Addr
:20;

78 } 
	t±e_t
;

87 
uöt_t
 
	m¥Ÿe˘i⁄Viﬁ©i⁄
:1;

88 
uöt_t
 
	mwrôeFau…
:1;

89 
uöt_t
 
	mu£rModeFau…
:1;

90 
uöt_t
 
	mª£rvedBôFau…
:1;

91 
uöt_t
 
	mª£rved
:28;

92 } 
	tÁu…code_t
;

94 
_m≠≥dRegi⁄
 *
	tm≠≥dRegi⁄_±r
;

96 
	s_m≠≥dRegi⁄
 {

97 
Fûe
 *
	mfûe
;

98 
uöt_t
 
	m°¨tAddr
;

99 
uöt_t
 
	mÀngth
;

100 
	m¥Ÿ
;

101 
	mÊags
;

102 
m≠≥dRegi⁄_±r
 
	m√xt
;

103 } 
	tm≠≥dRegi⁄_t
;

108 
	#KINFO_PAGE_ON_DISK
 0x4

	)

110 
Inô_VM
(
BoŸ_Info
 *
boŸInfo
);

111 
Inô_Pagög
();

113 
Flush_TLB
();

114 
Së_PDBR
(
pde_t
 * 
∑geDú
);

115 
pde_t
 *
Gë_PDBR
();

116 
E«bÀ_Pagög
(
pde_t
 * 
∑geDú
);

121 
__ölöe__
 
ul⁄g_t
 
	$Gë_Page_Fau…_Addªss
() {

122 
ul⁄g_t
 
Áu…Addªss
;

123 
__asm__
 
	`__vﬁ©ûe__
("mov %%¸2, %0":"Ù"(
Áu…Addªss
)

125  
Áu…Addªss
;

126 
	}
}

128 
Föd_S∑˚_On_Pagög_Fûe
();

129 
Fªe_S∑˚_On_Pagög_Fûe
(
∑gefûeIndex
);

130 
Wrôe_To_Pagög_Fûe
(*
∑ddr
, 
ul⁄g_t
 
vaddr
, 
∑gefûeIndex
);

131 
Ród_From_Pagög_Fûe
(*
∑ddr
, 
ul⁄g_t
 
vaddr
, 
∑gefûeIndex
);

133 
boﬁ
 
Is_Mm≠ed_Page
(
U£r_C⁄ãxt
 *
c⁄ãxt
, 
ul⁄g_t
 
vaddr
);

134 
Wrôe_Out_Mm≠ed_Page
(
U£r_C⁄ãxt
 *
c⁄ãxt
, 
ul⁄g_t
 
vaddr
);

136 c⁄° 
pde_t
 *
Kî√l_Page_Dú
();

	@include/geekos/pfat.h

18 #i‚de‡
GEEKOS_PFAT_H


19 
	#GEEKOS_PFAT_H


	)

21 
	~"fûeio.h
"

22 
	~"vfs.h
"

29 
	mmagic
;

30 
	mfûeAŒoˇti⁄Off£t
;

31 
	mfûeAŒoˇti⁄Lígth
;

32 
	mroŸDúe˘‹yOff£t
;

33 
	mroŸDúe˘‹yCou¡
;

34 
	m£tupSèπ
;

35 
	m£tupSize
;

36 
	mkî√lSèπ
;

37 
	mkî√lSize
;

38 } 
	tboŸSe˘‹
;

41 
	mfûeName
[8 + 4];

44 
	mªadO∆y
:1;

45 
	mhiddí
:1;

46 
	msy°emFûe
:1;

47 
	mvﬁumeLabñ
:1;

48 
	mdúe˘‹y
:1;

49 
	misSëUid
:1;

51 
	mtime
;

52 
	md©e
;

53 
	mfú°Block
;

54 
	mfûeSize
;

55 
VFS_ACL_E¡ry
 
	ma˛s
[
VFS_MAX_ACL_ENTRIES
];

56 } 
	tdúe˘‹yE¡ry
;

58 
	#FAT_ENTRY_FREE
 0

	)

59 
	#FAT_ENTRY_EOF
 1

	)

62 
	#PFAT_MAGIC
 0x78320000

	)

65 
	#PFAT_BOOT_RECORD_OFFSET
 482

	)

67 
Inô_PFAT
();

	@include/geekos/pipe.h

13 
	~<gìkos/vfs.h
>

15 
Fûe_Ops
 
Pùe_Ród_Ops
;

16 
Fûe_Ops
 
Pùe_Wrôe_Ops
;

18 
Pùe_Cª©e
(
Fûe
 **
ªad_fûe
, Fûê**
wrôe_fûe
);

19 
Pùe_Ród
(
Fûe
 *
f
, *
buf
, 
ul⁄g_t
 
numByãs
);

20 
Pùe_Wrôe
(
Fûe
 *
f
, *
buf
, 
ul⁄g_t
 
numByãs
);

21 
Pùe_Clo£
(
Fûe
 *
f
);

	@include/geekos/projects.h

16 
	#PROJECT_VERBOSITY
 
Ál£


	)

18 
	#PROJECT_LIMIT_SYSCALLS
 
åue


	)

19 
	#PROJECT_LIMIT_ACTIVE_PROCESSES
 
åue


	)

21 
	#PROJECT_BACKGROUND_JOBS
 
Ál£


	)

23 
	#PROJECT_SIGNALS
 
åue


	)

25 
	#PROJECT_SEMAPHORES
 
Ál£


	)

26 
	#PROJECT_SCHEDULING
 
Ál£


	)

28 
	#PROJECT_VIRTUAL_MEMORY_A
 
Ál£


	)

29 
	#PROJECT_VIRTUAL_MEMORY_B
 
Ál£


	)

33 
	#PROJECT_FS
 
åue


	)

35 
	#PROJECT_GFS2
 
åue


	)

37 
	#PROJECT_SOUND
 
Ál£


	)

39 
	#PROJECT_GOSFS
 
åue


	)

41 
	#PROJECT_CFS
 
åue


	)

43 
	#PROJECT_USER
 
Ál£


	)

46 
	#PROJECT_LIMIT
 
åue


	)

49 
	#PROJECT_CLONE
 
åue


	)

52 
	#PROJECT_MMAP
 
åue


	)

55 
	#PROJECT_ETHERNET
 
Ál£


	)

56 
	#PROJECT_TCP
 
Ál£


	)

57 
	#PROJECT_RIP
 
Ál£


	)

58 
	#PROJECT_SOCKETS
 
Ál£


	)

59 
	#PROJECT_RAW_ETHERNET
 
Ál£


	)

60 
	#PROJECT_IP
 
Ál£


	)

61 
	#PROJECT_UDP
 
Ál£


	)

62 
	#PROJECT_TCP
 
Ál£


	)

63 
	#PROJECT_ROUTING
 
Ál£


	)

64 
	#PROJECT_ARP
 
Ál£


	)

67 
	#PROJECT_PIPE
 
åue


	)

68 
	#PROJECT_FORK
 
Ál£


	)

70 #i‚de‡
TODO


71 #ifde‡
GEEKOS


74 
	~<c⁄io.h
>

75 
	#TODO
(
x
Ë
	`Pröt
(x)

	)

79 
	#TODO_P
(
¥oj
, 
mesßge
) do { \

80 if(
¥oj
Ë{ 
	`TODO
(
__FILE__
 ": " 
mesßge
); } \

81 if(
PROJECT_VERBOSITY
Ë{ 
	`Pröt
("Invoked fun˘i⁄ o‡¥oje˘: " #¥oj ": " 
mesßge
 "\n"); } \

82 } 0)

	)

	@include/geekos/range.h

17 #i‚de‡
GEEKOS_RANGE_H


18 
	#GEEKOS_RANGE_H


	)

20 
	~<gìkos/kty≥s.h
>

33 
__ölöe__
 
boﬁ
 
	$Check_R™ge_Pr›î
(
ul⁄g_t
 
°¨t
, ul⁄g_à
size
) {

38 
ul⁄g_t
 
sum
 = 
°¨t
 + 
size
;

39  
°¨t
 <
sum
 || (sum == 0);

40 
	}
}

51 
__ölöe__
 
boﬁ


52 
	$Check_R™ge_Undî
(
ul⁄g_t
 
°¨t
, ul⁄g_à
size
, ul⁄g_à
max
) {

53 i‡(!
	`Check_R™ge_Pr›î
(
°¨t
, 
size
))

54  
Ál£
;

56  
°¨t
 < 
max
 && (°¨à+ 
size
) <= max;

57 
	}
}

	@include/geekos/screen.h

17 #i‚de‡
GEEKOS_SCREEN_H


18 
	#GEEKOS_SCREEN_H


	)

20 
	~<gìkos/kty≥s.h
>

22 
	#BLACK
 0

	)

23 
	#BLUE
 1

	)

24 
	#GREEN
 2

	)

25 
	#CYAN
 3

	)

26 
	#RED
 4

	)

27 
	#MAGENTA
 5

	)

28 
	#AMBER
 6

	)

29 
	#GRAY
 7

	)

30 
	#BRIGHT
 8

	)

31 
	#ATTRIB
(
bg
,
fg
Ë((fg)|((bg)<<4))

	)

33 
	#NUMCOLS
 80

	)

34 
	#NUMROWS
 25

	)

36 
	#TABWIDTH
 8

	)

38 #ifde‡
GEEKOS


44 
	#VIDMEM_ADDR
 0xb8000

	)

45 
	#VIDMEM
 ((
uch¨_t
*Ë
VIDMEM_ADDR
)

	)

46 
	#CRT_ADDR_REG
 0x3D4

	)

47 
	#CRT_DATA_REG
 0x3D5

	)

48 
	#CRT_CURSOR_LOC_HIGH_REG
 0x0E

	)

49 
	#CRT_CURSOR_LOC_LOW_REG
 0x0F

	)

51 
Inô_S¸ìn
();

52 
CÀ¨_S¸ìn
();

53 
Gë_Curs‹
(*
row
, *
cﬁ
);

54 
boﬁ
 
Put_Curs‹
(
row
, 
cﬁ
);

55 
uch¨_t
 
Gë_Cuºít_Aâr
();

56 
Së_Cuºít_Aâr
(
uch¨_t
 
©åib
);

57 
Put_Ch¨
(
c
);

58 
Put_Såög
(c⁄° *
s
);

59 
Put_Buf
(c⁄° *
buf
, 
ul⁄g_t
 
Àngth
);

60 
	$Pröt
(c⁄° *
fmt
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 1, 2)));

	@include/geekos/segment.h

30 #i‚de‡
GEEKOS_SEGMENT_H


31 
	#GEEKOS_SEGMENT_H


	)

33 
	~<gìkos/kty≥s.h
>

35 
	gTSS
;

37 #i‡
__TINYC__


38 
	#PACKED


	)

40 
	#PACKED
 
	`__©åibuã__
((
∑cked
))

	)

46 
	sSegmít_Des¸ùt‹
 {

47 
ush‹t_t
 
sizeLow
 
	mPACKED
;

48 
uöt_t
 
	mba£Low
:24 
PACKED
;

49 
uöt_t
 
	mty≥
:4 
PACKED
;

50 
uöt_t
 
	msy°em
:1 
PACKED
;

51 
uöt_t
 
	md∂
:2 
PACKED
;

52 
uöt_t
 
	m¥e£¡
:1 
PACKED
;

53 
uöt_t
 
	msizeHigh
:4 
PACKED
;

54 
uöt_t
 
	mavaû
:1 
PACKED
;

55 
uöt_t
 
	mª£rved
:1 
PACKED
;

56 
uöt_t
 
	mdbBô
:1 
PACKED
;

57 
uöt_t
 
	mgønuœrôy
:1 
PACKED
;

58 
uch¨_t
 
	mba£High
;

70 
__ölöe__
 
ush‹t_t
 
	$Sñe˘‹
(
Ωl
, 
boﬁ
 
£gmítIsInGDT
, 
ödex
) {

71 
ush‹t_t
 
£À˘‹
 = 0;

72 
£À˘‹
 =

73 (
Ωl
 & 0x3Ë| ((
£gmítIsInGDT
 ? 0 : 1Ë<< 2Ë| ((
ödex
 & 0x1FFF) <<

75  
£À˘‹
;

76 
	}
}

84 
Inô_NuŒ_Segmít_Des¸ùt‹
(
Segmít_Des¸ùt‹
 *
desc
);

86 
Inô_Code_Segmít_Des¸ùt‹
(
Segmít_Des¸ùt‹
 *
desc
,

87 
ul⁄g_t
 
ba£Addr
,

88 
ul⁄g_t
 
numPages
, 
¥ivûegeLevñ
);

89 
Inô_D©a_Segmít_Des¸ùt‹
(
Segmít_Des¸ùt‹
 *
desc
,

90 
ul⁄g_t
 
ba£Addr
,

91 
ul⁄g_t
 
numPages
, 
¥ivûegeLevñ
);

92 
Inô_TSS_Des¸ùt‹
(
Segmít_Des¸ùt‹
 *
desc
, 
TSS
 *
theTSS
);

94 
Inô_LDT_Des¸ùt‹
(
Segmít_Des¸ùt‹
 *
desc
,

95 
Segmít_Des¸ùt‹
 
theLDT
[], 
numE¡rõs
);

	@include/geekos/sem.h

13 #i‚de‡
_INCLUDED_SEM_H


14 
	#_INCLUDED_SEM_H


	)

15 #ifde‡
GEEKOS


16 
Sys_O≥n_Sem≠h‹e
(
I¡îru±_Sèã
 *
°©e
);

17 
Sys_P
(
I¡îru±_Sèã
 *
°©e
);

18 
Sys_V
(
I¡îru±_Sèã
 *
°©e
);

19 
Sys_Clo£_Sem≠h‹e
(
I¡îru±_Sèã
 *
°©e
);

	@include/geekos/signal.h

17 #i‚de‡
GEEKOS_SIGNAL_H


18 
	#GEEKOS_SIGNAL_H


	)

21 
	#SIGKILL
 1

	)

22 
	#SIGUSR1
 2

	)

23 
	#SIGUSR2
 3

	)

24 
	#SIGCHLD
 4

	)

25 
	#SIGALARM
 5

	)

28 
	#MAXSIG
 5

	)

31 
	#IS_SIGNUM
(
n
Ë((“Ë> 0Ë&& (“Ë<
MAXSIG
))

	)

34 (*
	tsig«l_h™dÀr
) ();

37 
	#SIG_DFL
 (
sig«l_h™dÀr
)1

	)

38 
	#SIG_IGN
 (
sig«l_h™dÀr
)2

	)

40 #ifde‡
GEEKOS


42 
I¡îru±_Sèã
;

44 
	`Check_Pídög_Sig«l
(
Kî√l_Thªad
 *
kthªad
,

45 
I¡îru±_Sèã
 *
e•
);

46 
	`Com∂ëe_H™dÀr
(
Kî√l_Thªad
 *
kthªad
,

47 
I¡îru±_Sèã
 *
e•
);

	@include/geekos/smp.h

15 
	#MAX_CPUS
 256

	)

18 
	sCPU_Info
 {

19 
	möôD⁄e
;

20 
	m•uriousCou¡
;

21 *
	m°ack
;

22 
	mru¬ög
;

23 
	mticks
;

24 
Kî√l_Thªad
 *
	midÀThªad
;

25 
U£r_C⁄ãxt
 *
	ms_cuºítU£rC⁄ãxt
;

26 } 
	tCPU_Info
;

28 
CPU_Info
 
CPUs
[];

30 
Gë_CPU_ID
();

32 
M≠_IO_APIC_IRQ
(
úq
, *
h™dÀr
);

33 
Inô_SMP
();

34 
Inô_Loˇl_APIC
(
˝u
);

35 
Rñó£_SMP
();

	@include/geekos/sound.h

13 
Inô_Sound_Devi˚s
();

14 
SB16_Pœy_Fûe
(c⁄° *
fûíame
);

	@include/geekos/string.h

1 
	~"../libc/°rög.h
"

	@include/geekos/symbol.h

18 #i‚de‡
GEEKOS_SYMBOL_H


19 
	#GEEKOS_SYMBOL_H


	)

21 #ifde‡
NEED_UNDERSCORE


22 
	#_S
(
sym
Ë"_" #sym

	)

24 
	#_S
(
sym
Ë#sym

	)

	@include/geekos/synch.h

17 #i‚de‡
GEEKOS_SYNCH_H


18 
	#GEEKOS_SYNCH_H


	)

20 
	~<gìkos/kthªad.h
>

25 íum { 
	mMUTEX_UNLOCKED
, 
	mMUTEX_LOCKED
 };

27 
	sMuãx
 {

28 
	m°©e
;

29 
Kî√l_Thªad
 *
	mow√r
;

30 
Thªad_Queue
 
	mwaôQueue
;

33 
	#MUTEX_INITIALIZER
 { 
MUTEX_UNLOCKED
, 0, 
THREAD_QUEUE_INITIALIZER
 }

	)

35 
	sC⁄dôi⁄
 {

36 
Thªad_Queue
 
	mwaôQueue
;

39 
Muãx_Inô
(
Muãx
 *
muãx
);

40 
Muãx_Lock
(
Muãx
 *
muãx
);

41 
Muãx_U∆ock
(
Muãx
 *
muãx
);

43 
C⁄d_Inô
(
C⁄dôi⁄
 *
c⁄d
);

44 
C⁄d_Waô
(
C⁄dôi⁄
 *
c⁄d
, 
Muãx
 *
muãx
);

45 
C⁄d_Sig«l
(
C⁄dôi⁄
 *
c⁄d
);

46 
C⁄d_Brﬂdˇ°
(
C⁄dôi⁄
 *
c⁄d
);

48 
	#IS_HELD
(
muãx
) \

49 ((
muãx
)->
°©e
 =
MUTEX_LOCKED
 && (muãx)->
ow√r
 =
CURRENT_THREAD
)

	)

	@include/geekos/sys_net.h

1 
Sys_EthPackëSíd
(
I¡îru±_Sèã
 *
°©e
);

2 
Sys_EthPackëRe˚ive
(
I¡îru±_Sèã
 *
°©e
);

3 
Sys_AΩ
(
I¡îru±_Sèã
 *
°©e
);

4 
Sys_RouãAdd
(
I¡îru±_Sèã
 *
°©e
);

5 
Sys_RouãDñ
(
I¡îru±_Sèã
 *
°©e
);

6 
Sys_RouãGë
(
I¡îru±_Sèã
 *
°©e
);

7 
Sys_IPC⁄figuª
(
I¡îru±_Sèã
 *
°©e
);

8 
Sys_IPGë
(
I¡îru±_Sèã
 *
°©e
);

9 
Sys_IPSíd
(
I¡îru±_Sèã
 *
°©e
);

10 
Sys_Sockë
(
I¡îru±_Sèã
 *
°©e
);

11 
Sys_Böd
(
I¡îru±_Sèã
 *
°©e
);

12 
Sys_Li°í
(
I¡îru±_Sèã
 *
°©e
);

13 
Sys_Ac˚±
(
I¡îru±_Sèã
 *
°©e
);

14 
Sys_C⁄√˘
(
I¡îru±_Sèã
 *
°©e
);

15 
Sys_Síd
(
I¡îru±_Sèã
 *
°©e
);

16 
Sys_Re˚ive
(
I¡îru±_Sèã
 *
°©e
);

17 
Sys_SídTo
(
I¡îru±_Sèã
 *
°©e
);

18 
Sys_Re˚iveFrom
(
I¡îru±_Sèã
 *
°©e
);

19 
Sys_Clo£Sockë
(
I¡îru±_Sèã
 *
°©e
);

	@include/geekos/syscall.h

17 #i‚de‡
GEEKOS_SYSCALL_H


18 
	#GEEKOS_SYSCALL_H


	)

20 #i‡
deföed
(
GEEKOS
)

22 
	gI¡îru±_Sèã
;

27 (*
	tSysˇŒ
Ë(
	tI¡îru±_Sèã
 * 
	t°©e
);

32 c⁄° 
g_numSysˇŒs
;

37 c⁄° 
SysˇŒ
 
g_sysˇŒTabÀ
[];

41 
	#SYSCALL
 "öà$0x90"

	)

47 
SYS_NULL
,

48 
SYS_EXIT
,

49 
SYS_PRINTSTRING
,

50 
SYS_GETKEY
,

51 
SYS_SETATTR
,

52 
SYS_GETCURSOR
,

53 
SYS_PUTCURSOR
,

54 
SYS_SPAWN
,

55 
SYS_WAIT
,

56 
SYS_GETPID
,

57 
SYS_KILL
,

58 
SYS_PS
,

59 
SYS_SIGNAL
,

60 
SYS_REGDELIVER
,

61 
SYS_RETURNSIG
,

62 
SYS_WAITNOPID
,

63 
SYS_SETSCHEDULINGPOLICY
,

64 
SYS_GETTIMEOFDAY
,

65 
SYS_OPEN_SEMAPHORE
,

66 
SYS_P
,

67 
SYS_V
,

68 
SYS_CLOSE_SEMAPHORE
,

69 
SYS_MOUNT
,

70 
SYS_OPEN
,

71 
SYS_OPENDIRECTORY
,

72 
SYS_CLOSE
,

73 
SYS_DELETE
,

74 
SYS_READ
,

75 
SYS_READENTRY
,

76 
SYS_WRITE
,

77 
SYS_STAT
,

78 
SYS_FSTAT
,

79 
SYS_SEEK
,

80 
SYS_CREATEDIR
,

81 
SYS_SYNC
,

82 
SYS_FORMAT
,

83 
SYS_SHUTDOWN
,

84 
SYS_READBLOCK
,

85 
SYS_WRITEBLOCK
,

86 
SYS_ETHPACKETSEND
,

87 
SYS_ETHPACKETRECEIVE
,

88 
SYS_ARP
,

89 
SYS_ROUTEADD
,

90 
SYS_ROUTEDEL
,

91 
SYS_ROUTEGET
,

92 
SYS_IPCONFIGURE
,

93 
SYS_IPGET
,

94 
SYS_IPSEND
,

95 
SYS_SOCKET
,

96 
SYS_BIND
,

97 
SYS_LISTEN
,

98 
SYS_ACCEPT
,

99 
SYS_CONNECT
,

100 
SYS_SEND
,

101 
SYS_RECEIVE
,

102 
SYS_SENDTO
,

103 
SYS_RECEIVEFROM
,

104 
SYS_CLOSESOCKET
,

105 
SYS_LIMIT
,

106 
SYS_GET_UID
,

107 
SYS_SET_SET_UID
,

108 
SYS_SET_EFFECTIVE_UID
,

109 
SYS_SET_ACL
,

110 
SYS_PLAY_SOUND_FILE
,

111 
SYS_PIPE
,

112 
SYS_FORK
,

113 
SYS_EXECL
,

114 
SYS_DIAGNOSTIC
,

115 
SYS_DISKPROPERTIES
,

116 
SYS_SET_AFFINITY
,

117 
SYS_GET_AFFINITY
,

118 
SYS_CLONE
,

119 
SYS_MMAP
,

120 
SYS_MUNMAP
,

121 
SYS_ALARM
,

122 
SYS_RENAME
,

123 
SYS_LINK
,

124 
SYS_SYMLINK
,

143 
	#SYSCALL_REGS_0


	)

144 
	#SYSCALL_REGS_1
 , "b" (
¨g0
)

	)

145 
	#SYSCALL_REGS_2
 , "b" (
¨g0
), "c" (
¨g1
)

	)

146 
	#SYSCALL_REGS_3
 , "b" (
¨g0
), "c" (
¨g1
), "d" (
¨g2
)

	)

147 
	#SYSCALL_REGS_4
 , "b" (
¨g0
), "c" (
¨g1
), "d" (
¨g2
), "S" (
¨g3
)

	)

148 
	#SYSCALL_REGS_5
 , "b" (
¨g0
), "c" (
¨g1
), "d" (
¨g2
), "S" (
¨g3
), "D" (
¨g4
)

	)

150 
	#DEF_SYSCALL
(
«me
,
num
,
ªtTy≥
,
∑øms
,
¨gDefs
,
ªgs
) \

151 
ªtTy≥
 
«me
 
∑øms
 { \

152 
sysNum
 = (
num
), 
rc
; \

153 
¨gDefs
 \

154 
__asm__
 
	`__vﬁ©ûe__
 (
SYSCALL
 : "˜" (
rc
Ë:"a" (
sysNum
Ë
ªgs
); \

155  (
ªtTy≥
Ë
rc
; \

156 
	}

	)
}

	@include/geekos/timer.h

17 #i‚de‡
GEEKOS_TIMER_H


18 
	#GEEKOS_TIMER_H


	)

20 
	~<gìkos/defs.h
>

21 
	~<gìkos/kty≥s.h
>

23 
	#TIMER_IRQ
 0

	)

24 
	#MAX_TIMER_EVENTS
 100

	)

25 
	#TICKS_PER_SEC
 1000

	)

26 
	#MS_PER_TICK
 (1000.0‡/ ()
TICKS_PER_SEC
)

	)

27 
	#TICKS_PER_MS
 (()
TICKS_PER_SEC
 / 1000.0f)

	)

29 vﬁ©ûê
ul⁄g_t
 
g_numTicks
;

31 (*
	ttimîCÆlback
) ();

33 
	`Inô_Timî
();

34 
	`Inô_Timî_I¡îru±
();

36 
	`Mi¸o_Dñay
(
us
);

39 
ticks
;

40 
id
;

41 
timîCÆlback
 
ˇŒBack
;

42 
‹igTicks
;

43 } 
	ttimîEvít
;

45 
	`Sèπ_Timî
(
ticks
, 
timîCÆlback
);

46 
	`Gë_Remaög_Timî_Ticks
(
id
);

47 
	`C™˚l_Timî
(
id
);

49 
	`Mi¸o_Dñay
(
us
);

	@include/geekos/trap.h

17 #i‚de‡
GEEKOS_TRAP_H


18 
	#GEEKOS_TRAP_H


	)

20 
Inô_Tøps
();

	@include/geekos/tss.h

17 #i‚de‡
GEEKOS_TSS_H


18 
	#GEEKOS_TSS_H


	)

29 
	sTSS
 {

35 
ush‹t_t
 
	mlök
;

36 
ush‹t_t
 
	mª£rved1
;

39 
ul⁄g_t
 
	me•0
;

40 
ush‹t_t
 
	mss0
;

41 
ush‹t_t
 
	mª£rved2
;

42 
ul⁄g_t
 
	me•1
;

43 
ush‹t_t
 
	mss1
;

44 
ush‹t_t
 
	mª£rved3
;

45 
ul⁄g_t
 
	me•2
;

46 
ush‹t_t
 
	mss2
;

47 
ush‹t_t
 
	mª£rved4
;

50 
ul⁄g_t
 
	m¸3
;

53 
ul⁄g_t
 
	meù
;

54 
ul⁄g_t
 
	meÊags
;

55 
ul⁄g_t
 
	móx
;

56 
ul⁄g_t
 
	mecx
;

57 
ul⁄g_t
 
	medx
;

58 
ul⁄g_t
 
	mebx
;

59 
ul⁄g_t
 
	me•
;

60 
ul⁄g_t
 
	mebp
;

61 
ul⁄g_t
 
	mesi
;

62 
ul⁄g_t
 
	medi
;

65 
ush‹t_t
 
	mes
;

66 
ush‹t_t
 
	mª£rved5
;

67 
ush‹t_t
 
	mcs
;

68 
ush‹t_t
 
	mª£rved6
;

69 
ush‹t_t
 
	mss
;

70 
ush‹t_t
 
	mª£rved7
;

71 
ush‹t_t
 
	mds
;

72 
ush‹t_t
 
	mª£rved8
;

73 
ush‹t_t
 
	mfs
;

74 
ush‹t_t
 
	mª£rved9
;

75 
ush‹t_t
 
	mgs
;

76 
ush‹t_t
 
	mª£rved10
;

79 
ush‹t_t
 
	mldt
;

80 
ush‹t_t
 
	mª£rved11
;

86 
uöt_t
 
	mdebugTøp
:1;

87 
uöt_t
 
	mª£rved12
:15;

90 
ush‹t_t
 
	mioM≠Ba£
;

93 
Inô_TSS
();

94 
Së_Kî√l_Sèck_Poöãr
(
ul⁄g_t
 
e•0
);

	@include/geekos/user.h

16 #i‚de‡
GEEKOS_USER_H


17 
	#GEEKOS_USER_H


	)

21 
	#MAX_PROC_NAME_SZB
 128

	)

23 
	sPro˚ss_Info
 {

24 
	m«me
[
MAX_PROC_NAME_SZB
];

25 
	mpid
;

26 
	m∑ª¡_pid
;

27 
	m¥i‹ôy
;

28 
	#STATUS_RUNNABLE
 0

	)

29 
	#STATUS_BLOCKED
 1

	)

30 
	#STATUS_ZOMBIE
 2

	)

31 
	m°©us
;

32 
	mafföôy
;

33 
	mcuºC‹e
;

34 
	mtŸÆTime
;

37 #ifde‡
GEEKOS


39 
	~<gìkos/kty≥s.h
>

40 
	~<gìkos/£gmít.h
>

41 
	~<gìkos/ñf.h
>

42 
	~<gìkos/sig«l.h
>

43 
	~<gìkos/∑gög.h
>

45 
	gFûe
;

48 
	#USER_MAX_FILES
 10

	)

57 
	sU£r_C⁄ãxt
 {

59 
	#NUM_USER_LDT_ENTRIES
 2

	)

66 
Segmít_Des¸ùt‹
 
	mldt
[
NUM_USER_LDT_ENTRIES
];

67 
Segmít_Des¸ùt‹
 *
	mldtDes¸ùt‹
;

70 *
	mmem‹y
;

71 
ul⁄g_t
 
	msize
;

74 
ush‹t_t
 
	mldtSñe˘‹
;

80 
ush‹t_t
 
	mcsSñe˘‹
;

81 
ush‹t_t
 
	mdsSñe˘‹
;

84 
pde_t
 *
	m∑geDú
;

87 
Fûe
 *
	mfûe_des¸ùt‹_èbÀ
[
USER_MAX_FILES
];

90 
ul⁄g_t
 
	míåyAddr
;

93 
ul⁄g_t
 
	m¨gBlockAddr
;

96 
ul⁄g_t
 
	m°ackPoöãrAddr
;

102 
	mªfCou¡
;

104 
	m«me
[
MAX_PROC_NAME_SZB
];

109 
m≠≥dRegi⁄_t
 *
	mm≠≥dRegi⁄s
;

113 
	gKî√l_Thªad
;

114 
	gI¡îru±_Sèã
;

120 
Aâach_U£r_C⁄ãxt
(
Kî√l_Thªad
 *
kthªad
,

121 
U£r_C⁄ãxt
 *
c⁄ãxt
);

122 
Dëach_U£r_C⁄ãxt
(
Kî√l_Thªad
 *
kthªad
);

123 
S∑wn
(c⁄° *
¥ogøm
, c⁄° *
comm™d
,

124 
Kî√l_Thªad
 **
pThªad
, 
boﬁ
 
background
);

125 
S∑wn_F‹eground
(c⁄° *
¥ogøm
, c⁄° *
comm™d
,

126 
Kî√l_Thªad
 **
pThªad
);

127 
Swôch_To_U£r_C⁄ãxt
(
Kî√l_Thªad
 *
kthªad
,

128 
I¡îru±_Sèã
 *
°©e
);

134 
De°roy_U£r_C⁄ãxt
(
U£r_C⁄ãxt
 *
c⁄ãxt
);

135 
Lﬂd_U£r_Progøm
(*
exeFûeD©a
, 
ul⁄g_t
 
exeFûeLígth
,

136 
Exe_F‹m©
 *
exeF‹m©
, c⁄° *
comm™d
,

137 
U£r_C⁄ãxt
 **
pU£rC⁄ãxt
);

138 
boﬁ
 
C›y_From_U£r
(*
de°InKî√l
, 
ul⁄g_t
 
§cInU£r
, ul⁄g_à
bufSize
);

139 
boﬁ
 
C›y_To_U£r
(
ul⁄g_t
 
de°InU£r
, *
§cInKî√l
, ul⁄g_à
bufSize
);

140 
boﬁ
 
VÆid©e_U£r_Mem‹y
(
U£r_C⁄ãxt
 *
u£rC⁄ãxt
,

141 
ul⁄g_t
 
u£rAddr
, ul⁄g_à
bufSize
);

142 *
U£r_To_Kî√l
(
U£r_C⁄ãxt
 *
u£rC⁄ãxt
, 
ul⁄g_t
 
u£rPå
);

144 
Swôch_To_Addªss_S∑˚
(
U£r_C⁄ãxt
 *
u£rC⁄ãxt
);

	@include/geekos/vfs.h

18 #i‚de‡
GEEKOS_VFS_H


19 
	#GEEKOS_VFS_H


	)

21 #ifde‡
GEEKOS


23 
	~<gìkos/kty≥s.h
>

24 
	~<gìkos/li°.h
>

25 
	~<gìkos/fûeio.h
>

26 
	~<gìkos/blockdev.h
>

32 
	#VFS_NO_MORE_DIR_ENTRIES
 1

	)

34 
	gMou¡_Poöt
;

35 
	gFûe
;

36 
	gMou¡_Poöt_Ops
;

37 
	gFûe_Ops
;

43 
	sFûesy°em_Ops
 {

44 (*
	mF‹m©
Ë(
Block_Devi˚
 * 
	mblockDev
);

45 (*
	mMou¡
Ë(
Mou¡_Poöt
 * 
	mmou¡Poöt
);

49 
	sMou¡_Poöt
 {

50 
Mou¡_Poöt_Ops
 *
	m›s
;

51 *
	m∑thPªfix
;

52 
Block_Devi˚
 *
	mdev
;

53 *
	mfsD©a
;

54 
DEFINE_LINK
(
Mou¡_Poöt_Li°
, 
Mou¡_Poöt
);

58 
	sMou¡_Poöt_Ops
 {

59 (*
	mO≥n
Ë(
Mou¡_Poöt
 * 
	mmou¡Poöt
, c⁄° *
	m∑th
, 
	mmode
,

60 
Fûe
 ** 
	mpFûe
);

61 (*
	mCª©e_Dúe˘‹y
Ë(
Mou¡_Poöt
 * 
	mmou¡Poöt
,

62 c⁄° *
	m∑th
);

63 (*
	mO≥n_Dúe˘‹y
Ë(
Mou¡_Poöt
 * 
	mmou¡Poöt
, c⁄° *
	m∑th
,

64 
Fûe
 ** 
	mpDú
);

65 (*
	mSèt
Ë(
Mou¡_Poöt
 * 
	mmou¡Poöt
, c⁄° *
	m∑th
,

66 
VFS_Fûe_Sèt
 * 
	m°©
);

67 (*
	mSync
Ë(
Mou¡_Poöt
 * 
	mmou¡Poöt
);

68 (*
	mDñëe
Ë(
Mou¡_Poöt
 * 
	mmou¡Poöt
, c⁄° *
	m∑th
,

69 
boﬁ
 
	mªcursive
);

70 (*
	mRíame
Ë(
Mou¡_Poöt
 * 
	mmou¡Poöt
, c⁄° *
	mﬁd∑th
,

71 c⁄° *
	m√w∑th
);

72 (*
	mLök
Ë(
Mou¡_Poöt
 * 
	mmou¡Poöt
, c⁄° *
	mﬁd∑th
,

73 c⁄° *
	m√w∑th
);

74 (*
	mSymLök
Ë(
Mou¡_Poöt
 * 
	mmou¡Poöt
, c⁄° *
	mﬁd∑th
,

75 c⁄° *
	m√w∑th
);

76 (*
	mSëSëUid
Ë(
Mou¡_Poöt
 * 
	mmou¡Poöt
, c⁄° *
	m∑th
,

77 
	m£tUid
);

78 (*
	mSëA˛
Ë(
Mou¡_Poöt
 * 
	mmou¡Poöt
, c⁄° *
	m«me
, 
	muid
,

79 
	m≥rmissi⁄s
);

80 (*
	mDisk_Pr›îtõs
Ë(
Mou¡_Poöt
 * 
	mmou¡Poöt
,

81 *
	mblock_size
,

82 *
	mblocks_⁄_disk
);

86 
	sFûe
 {

91 
Fûe_Ops
 *
	m›s
;

92 
ul⁄g_t
 
	mfûePos
;

93 
ul⁄g_t
 
	mídPos
;

94 *
	mfsD©a
;

100 
	mmode
;

101 
Mou¡_Poöt
 *
	mmou¡Poöt
;

105 
	sFûe_Ops
 {

106 (*
	mFSèt
Ë(
Fûe
 * 
	mfûe
, 
VFS_Fûe_Sèt
 * 
	m°©
);

107 (*
	mRód
Ë(
Fûe
 * 
	mfûe
, *
	mbuf
, 
ul⁄g_t
 
	mnumByãs
);

108 (*
	mWrôe
Ë(
Fûe
 * 
	mfûe
, *
	mbuf
, 
ul⁄g_t
 
	mnumByãs
);

109 (*
	mSìk
Ë(
Fûe
 * 
	mfûe
, 
ul⁄g_t
 
	mpos
);

110 (*
	mClo£
Ë(
Fûe
 * 
	mfûe
);

111 (*
	mRód_E¡ry
Ë(
Fûe
 * 
	mdú
, 
VFS_Dú_E¡ry
 * 
	míåy
);

120 
	sPagög_Devi˚
 {

121 *
	mfûeName
;

122 
Block_Devi˚
 *
	mdev
;

123 
ul⁄g_t
 
	m°¨tSe˘‹
;

124 
ul⁄g_t
 
	mnumSe˘‹s
;

132 
boﬁ
 
Regi°î_Fûesy°em
(c⁄° *
fsName
, 
Fûesy°em_Ops
 *
fsOps
);

133 
F‹m©
(c⁄° *
dev«me
, c⁄° *
f°y≥
);

134 
Mou¡
(c⁄° *
dev«me
, c⁄° *
∑thPªfix
, c⁄° *
f°y≥
);

137 
O≥n
(c⁄° *
∑th
, 
mode
, 
Fûe
 **
pFûe
);

138 
Clo£
(
Fûe
 *
fûe
);

139 
Sèt
(c⁄° *
∑th
, 
VFS_Fûe_Sèt
 *
°©
);

140 
Sync
();

143 
Fûe
 *
AŒoˇã_Fûe
(
Fûe_Ops
 *
›s
, 
fûePos
, 
ídPos
,

144 *
fsD©a
, 
mode
,

145 
Mou¡_Poöt
 *
mou¡Poöt
);

146 
FSèt
(
Fûe
 *
fûe
, 
VFS_Fûe_Sèt
 *
°©
);

147 
Ród
(
Fûe
 *
fûe
, *
buf
, 
ul⁄g_t
 
Àn
);

148 
Wrôe
(
Fûe
 *
fûe
, *
buf
, 
ul⁄g_t
 
Àn
);

149 
Sìk
(
Fûe
 *
fûe
, 
ul⁄g_t
 
Àn
);

150 
Ród_FuŒy
(c⁄° *
∑th
, **
pBuf„r
, 
ul⁄g_t
 * 
pLí
);

151 
Dñëe
(c⁄° *
∑th
, 
boﬁ
 
ªcursive
);

152 
Ríame
(c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
);

153 
Lök
(c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
);

154 
SymLök
(c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
);

157 
Cª©e_Dúe˘‹y
(c⁄° *
∑th
);

158 
O≥n_Dúe˘‹y
(c⁄° *
∑th
, 
Fûe
 **
pDú
);

159 
Ród_E¡ry
(
Fûe
 *
fûe
, 
VFS_Dú_E¡ry
 *
íåy
);

164 
Regi°î_Pagög_Devi˚
(
Pagög_Devi˚
 *
∑gögDevi˚
);

165 
Pagög_Devi˚
 *
Gë_Pagög_Devi˚
();

168 
SëSëUid
(c⁄° *
∑th
, 
£tUid
);

169 
SëA˛
(c⁄° *
∑th
, 
u£r
, 
≥rmissi⁄s
);

172 
Disk_Pr›îtõs
(c⁄° *
∑th
, *
block_size
,

173 *
blocks_⁄_disk
);

	@include/libc/bget.h

15 #i‡
deföed
 (
GEEKOS
)

25 
	#PROTOTYPES


	)

29 #i‚de‡
_


30 #ifde‡
PROTOTYPES


31 
	#_
(
x
Ëx

	)

33 
	#_
(
x
Ë(Ë

	)

37 
	tbufsize
;

38 
bpoﬁ
 
_
((*
buf„r
, 
bufsize
 
Àn
));

39 *
bgë
 
_
((
bufsize
 
size
));

40 *
bgëz
 
_
((
bufsize
 
size
));

41 *
bgër
 
_
((*
buf„r
, 
bufsize
 
√wsize
));

42 
bªl
 
_
((*
buf
));

43 
be˘l
 
_
(((*
com∑˘
Ë(
bufsize
 
sizîeq
, 
£quí˚
),

44 *(*
acquúe
Ë(
bufsize
 
size
),

45 (*
ªÀa£
Ë(*
buf
), 
bufsize
 
poﬁ_ö¸
));

46 
b°©s
 
	`_
((
bufsize
 * 
cuøŒoc
, bufsizê* 
tŸ‰ì
, bufsizê* 
max‰ì
,

47 *
ngë
, *
ƒñ
));

48 
b°©£
 
	`_
((
bufsize
 * 
poﬁ_ö¸
, *
≈oﬁ
, *
≈gë
,

49 *
≈ªl
, *
ndgë
, *
ndªl
));

50 
bufdump
 
	`_
((*
buf
));

51 
bpoﬁd
 
	`_
((*
poﬁ
, 
dum∑Œoc
, 
dump‰ì
));

52 
bpoﬁv
 
	`_
((*
poﬁ
));

	@include/libc/conio.h

17 #i‚de‡
CONIO_H


18 
	#CONIO_H


	)

20 
	~<°ddef.h
>

21 
	~<gìkos/kty≥s.h
>

22 
	~<gìkos/keybﬂrd.h
>

23 
	~<gìkos/s¸ìn.h
>

25 
	$Pröt
(c⁄° *
fmt
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 1, 2)));

26 
	`Pröt_Såög
(c⁄° *
msg
);

28 #i‚de‡
GEEKOS


29 
	`Put_Ch¨
(
ch
);

30 
	`Gë_Key
();

31 
	`Së_Aâr
(
©å
);

32 
	`Gë_Curs‹
(*
row
, *
cﬁ
);

33 
	`Put_Curs‹
(
row
, 
cﬁ
);

36 
	`Echo
(
boﬁ
 
íabÀ
);

37 
	`Ród_Löe
(*
buf
, 
size_t
 
bufSize
);

38 c⁄° *
	`Gë_Eº‹_Såög
(
î∫o
);

40 
	#as£π
(
exp
) \

42 i‡(!(
exp
)) { \

43 
	`Exô
(); \

44 
	`Pröt
("\x1b[1;37;41m" \

46 #exp, 
__FILE__
, 
__LINE__
); \

47 
	`Exô
(1); \

49 
	}
} 0)

	)

	@include/libc/fileio.h

18 #i‚de‡
FILEIO_H


19 
	#FILEIO_H


	)

21 
	~<gìkos/fûeio.h
>

23 
Sèt
(c⁄° *
∑th
, 
VFS_Fûe_Sèt
 *
°©
);

24 
FSèt
(
fd
, 
VFS_Fûe_Sèt
 *
°©
);

25 
O≥n
(c⁄° *
∑th
, 
mode
);

26 
Cª©e_Dúe˘‹y
(c⁄° *
∑th
);

27 
O≥n_Dúe˘‹y
(c⁄° *
∑th
);

28 
Clo£
(
fd
);

29 
Ród_E¡ry
(
fd
, 
VFS_Dú_E¡ry
 *
dúE¡ry
);

30 
Ród
(
fd
, *
buf
, 
Àn
);

31 
Wrôe
(
fd
, c⁄° *
buf
, 
Àn
);

32 
Sync
();

33 
Mou¡
(c⁄° *
dev
, c⁄° *
¥efix
, c⁄° *
f°y≥
);

34 
Sìk
(
fd
, 
pos
);

35 
Dñëe
(c⁄° *
∑th
, 
boﬁ
 
ªcursive
);

36 
Ríame
(c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
);

37 
Lök
(c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
);

38 
SymLök
(c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
);

39 
RódBlock
(c⁄° *
∑th
, *
buf
, 
Àn
,

40 
blocknum
);

41 
WrôeBlock
(c⁄° *
∑th
, *
buf
, 
Àn
,

42 
blocknum
);

44 
F‹m©
(c⁄° *
devi˚
, c⁄° *
fûesy°em_ty≥
);

46 
PœySoundFûe
(c⁄° *
fûíame
);

48 
Pùe
(*
ªad_fd
, *
wrôe_fd
);

50 
Dügno°ic
();

51 
Disk_Pr›îtõs
(c⁄° *
∑th
, *
block_size
,

52 *
blocks_⁄_disk
);

54 
SëSëUid
(c⁄° *
∑th
, 
£tUid
);

55 
SëA˛
(c⁄° *
∑th
, 
u£r
, 
≥rmissi⁄s
);

57 
SëEf„˘iveUid
(
uid
);

	@include/libc/fmtout.h

18 #i‚de‡
OUTPUT_H


19 
	#OUTPUT_H


	)

21 
	~<°d¨g.h
>

28 
	sOuçut_Sök
 {

34 (*
	mEmô
Ë(
Ouçut_Sök
 * 
	mo
, 
	mch
);

40 (*
	mFöish
Ë(
Ouçut_Sök
 * 
	mo
);

43 
F‹m©_Ouçut
(
Ouçut_Sök
 *
q
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

	@include/libc/ip.h

17 #i‚de‡
USER_IP_H


18 
	#USER_IP_H


	)

20 
	~<gìkos/√t/ùdefs.h
>

22 
Rouã_Add
(
uch¨_t
 *, uch¨_à*, uch¨_à*, *, 
ul⁄g_t
);

23 
Rouã_Dñëe
(
uch¨_t
 *, uchar_t *);

24 
IP_C⁄figuª
(*, 
ul⁄g_t
, 
uch¨_t
 *, uchar_t *);

25 
Gë_Rouãs
(
IP_Rouã
 *
buf„r
, 
ul⁄g_t
 
numRouãs
);

26 
Gë_IP_Info
(
IP_Devi˚_Info
 *
buf„r
, 
ul⁄g_t
 
cou¡
, *
öãrÁ˚
,

27 
ul⁄g_t
 
iÁ˚NameLígth
);

28 
boﬁ
 
P¨£_IP
(c⁄° *
ù
, 
uch¨_t
 * 
ùBuf„r
);

29 
IP_Síd
(
uch¨_t
 * 
ùAddªss
, *
mesßge
, 
ul⁄g_t
 
mesßgeLígth
);

	@include/libc/libuser.h

15 
	~<c⁄io.h
>

16 
	~<£ma.h
>

17 
	~<sched.h
>

18 
	~<fûeio.h
>

	@include/libc/mmap.h

3 
	#PROT_EXEC
 0x01

4 
	#PROT_READ
 0x02

5 
	#PROT_WRITE
 0x04

6 
	#PROT_NONE
 0x00

7 

	)

9 
	#MAP_SHARED
 0x01

10 
	#MAP_PRIVATE
 0x2

11 

	)

12 *
Mm≠
(*
addr
, 
Àngth
, 
¥Ÿ
, 
Êags
,

13 
fd
);

14 
Munm≠
(*
addr
);

	@include/libc/net.h

17 #i‚de‡
_LIBC_NET_H_


18 
	#_LIBC_NET_H_


	)

20 
	~<gìkos/defs.h
>

21 
	~<gìkos/kty≥s.h
>

23 
	#ETH_MAX_DATA
 1500

	)

24 
	#ETH_MIN_DATA
 46

	)

27 
EthPackëSíd
(c⁄° *
buf„r
, 
ul⁄g_t
 
Àngth
, c⁄° 
uch¨_t
 
de°
[],

28 c⁄° *
devi˚
);

29 
EthPackëRe˚ive
(*
buf„r
, 
ul⁄g_t
 
Àngth
);

30 
AΩ
(
uch¨_t
 *, uchar_t *);

	@include/libc/process.h

18 #i‚de‡
PROCESS_H


19 
	#PROCESS_H


	)

21 
	~<gìkos/u£r.h
>

23 
NuŒ
();

24 
Exô
(
exôCode
);

25 
S∑wn_Progøm
(c⁄° *
¥ogøm
, c⁄° *
comm™d
, 
background
);

26 
S∑wn_Wôh_P©h
(c⁄° *
¥ogøm
, c⁄° *
comm™d
,

27 c⁄° *
∑th
, 
background
);

28 
Waô
(
pid
);

29 
Gë_PID
();

30 
PS
(
Pro˚ss_Info
 *
±abÀ
, 
Àn
);

31 
WaôNoPID
(*
°©us
);

33 
F‹k
();

34 
Cl⁄e
((*
func
Ë(), *
°ack
);

35 
	`Exe˛
(c⁄° *
¥ogøm
, c⁄° *
comm™d
);

36 
	`GëUid
();

38 
	`ShutDown
();

	@include/libc/sched.h

18 #i‚de‡
SCHED_H


19 
	#SCHED_H


	)

21 
Së_Schedulög_Pﬁicy
(
pﬁicy
, 
qu™tum
);

22 
Gë_Time_Of_Day
();

24 
Së_Afföôy
(
pid
, 
c‹e
);

25 
Gë_Afföôy
(
pid
);

27 
Aœrm
(
mi¸oSec⁄ds
);

	@include/libc/sema.h

18 #i‚de‡
SEMA_H


19 
	#SEMA_H


	)

21 
O≥n_Sem≠h‹e
(c⁄° *
«me
, 
ivÆ
);

22 
P
(
£m
);

23 
V
(
£m
);

24 
Clo£_Sem≠h‹e
(
£m
);

	@include/libc/signal.h

24 #i‚de‡
SIGNAL_H


25 
	#SIGNAL_H


	)

27 
	~<°ddef.h
>

28 
	~<gìkos/sig«l.h
>

30 
Kûl
(
pid
, 
sig
);

31 
Sig«l
(
sig«l_h™dÀr
 
h
, 
sig
);

34 
Def_Chûd_H™dÀr
();

35 
Sig_Inô
();

	@include/libc/socket.h

17 #i‚de‡
SOCKET_H_


18 
	#SOCKET_H_


	)

20 
	~<gìkos/defs.h
>

21 
	~<gìkos/kty≥s.h
>

23 
	#SOCK_DGRAM
 0

	)

24 
	#SOCK_STREAM
 1

	)

26 
	#AF_INET
 2

	)

28 
uch¨_t
 
INADDR_ANY
[4];

29 
uch¨_t
 
INADDR_BROADCAST
[4];

31 
Sockë
(
uch¨_t
 
ty≥
, 
Êags
);

32 
C⁄√˘
(
ul⁄g_t
 
id
, 
ush‹t_t
 
p‹t
, 
uch¨_t
 
ùAddªss
[4]);

33 
Ac˚±
(
ul⁄g_t
 
id
, 
ush‹t_t
 * 
˛õ¡P‹t
, 
uch¨_t
 
˛õ¡IpAddªss
[4]);

34 
Li°í
(
ul⁄g_t
 
id
, ul⁄g_à
backlog
);

35 
Böd
(
ul⁄g_t
 
id
, 
ush‹t_t
 
p‹t
, 
uch¨_t
 
ùAddªss
[4]);

36 
Re˚ive
(
ul⁄g_t
 
id
, *
buf„r
, ul⁄g_à
buf„rSize
);

37 
Síd
(
ul⁄g_t
 
id
, *
buf„r
, ul⁄g_à
buf„rSize
);

38 
Síd_To
(
ul⁄g_t
 
id
, 
uch¨_t
 * 
buf„r
, ul⁄g_à
buf„rSize
, 
ush‹t_t
 
p‹t
,

39 
uch¨_t
 
ùAddªss
[4]);

40 
Re˚ive_From
(
ul⁄g_t
 
id
, 
uch¨_t
 * 
buf„r
, ul⁄g_à
buf„rSize
,

41 
ush‹t_t
 * 
p‹t
, 
uch¨_t
 
ùAddªss
[4]);

42 
Clo£_Sockë
(
ul⁄g_t
 
id
);

	@include/libc/spin.h

8 vﬁ©ûê
	mlock
;

9 } 
	tU£r_Spö_Lock_t
;

11 
Is_Locked
(
U£r_Spö_Lock_t
 * 
lock
);

12 
Spö_Lock_Inô
(
U£r_Spö_Lock_t
 * 
lock
);

13 
Spö_Lock
(
U£r_Spö_Lock_t
 * 
lock
);

14 
Spö_U∆ock
(
U£r_Spö_Lock_t
 * 
lock
);

	@include/libc/string.h

18 #i‚de‡
STRING_H


19 
	#STRING_H


	)

21 
	~<°ddef.h
>

23 *
mem£t
(*
s
, 
c
, 
size_t
 
n
);

24 *
mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

25 *
memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

26 
memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

27 
size_t
 
°æí
(c⁄° *
s
);

28 
size_t
 
°∫Àn
(c⁄° *
s
, size_à
maxÀn
);

29 
°rcmp
(c⁄° *
s1
, c⁄° *
s2
);

30 
°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
limô
);

31 *
°rˇt
(*
s1
, c⁄° *
s2
);

32 *
°r˝y
(*
de°
, c⁄° *
§c
);

33 *
°∫˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
limô
);

34 *
°rdup
(c⁄° *
s1
);

35 
©oi
(c⁄° *
buf
);

36 *
°rchr
(c⁄° *
s
, 
c
);

37 *
°ºchr
(c⁄° *
s
, 
c
);

38 *
°Ωbrk
(c⁄° *
s
, c⁄° *
ac˚±
);

42 
	$¢¥ötf
(*
s
, 
size_t
 
size
, c⁄° *
fmt
, ...)

43 
	`__©åibuã__
 ((
	`__f‹m©__
(
__¥ötf__
, 3, 4)));

	@src/common/bget.c

413 
	#SizeQu™t
 4U

	)

443 
	#Be°Fô
 1

	)

453 #i‡
deföed
 (
GEEKOS
)

455 
	~<gìkos/°rög.h
>

458 
	~<gìkos/kas£π.h
>

459 
	#as£π
(
exp
Ë
	`KASSERT
”xp)

	)

460 
	#£¡öñ_check
(
exp
Ë
	`KASSERT0
(”xp).
£¡öñ
 =
SENTINEL
, "Sítöñ check faûed: mem‹y c‹ru±i⁄, doubÀ fªe, o∏‰ì o‡u«Œoˇãd mem‹y dëe˘ed")

	)

462 #ñi‡
deföed
(
GEEKOS_LIBC
)

464 
	~<°rög.h
>

465 
	~<c⁄io.h
>

466 
	#£¡öñ_check
(
exp
Ë
	`as£π
(”xp).
£¡öñ
 =
SENTINEL
)

	)

470 
	~<°dio.h
>

471 
	#£¡öñ_check
(
exp
Ë
	`as£π
(”xp).
£¡öñ
 =
SENTINEL
)

	)

473 #ifde‡
löt


474 
	#NDEBUG


	)

476 *
•rötf
();

479 
	~<as£π.h
>

480 
	~<mem‹y.h
>

484 #ifde‡
BufDump


485 #i‚de‡
DumpD©a


486 
	#DumpD©a
 1

	)

490 #ifde‡
DumpD©a


491 
	~<˘y≥.h
>

497 
	~<gìkos/bgë.h
>

499 
	#MemSize
 

	)

504 
	sqlöks
 {

505 
bfhód
 *
	mÊök
;

506 
bfhód
 *
	mblök
;

512 
	#SENTINEL
 0x6d656d47

	)

514 
	sbhód
 {

515 
	m£¡öñ
;

516 
bufsize
 
	m¥ev‰ì
;

519 
bufsize
 
	mbsize
;

522 
	#BH
(
p
Ë((
bhód
 *Ë’))

	)

526 
	sbdhód
 {

527 
bufsize
 
	mtsize
;

528 
bhód
 
	mbh
;

530 
	#BDH
(
p
Ë((
bdhód
 *Ë’))

	)

534 
	sbfhód
 {

535 
bhód
 
	mbh
;

536 
qlöks
 
	mql
;

538 
	#BFH
(
p
Ë((
bfhód
 *Ë’))

	)

540 
bfhód
 
	g‰ìli°
 = {

541 {
SENTINEL
, 0, 0},

542 {&
‰ìli°
, &freelist}

546 #ifde‡
BufSèts


547 
bufsize
 
	gtŸÆloc
 = 0;

548 
	gnumgë
 = 0, 
	gnumªl
 = 0;

549 #ifde‡
BECé


550 
	gnumpblk
 = 0;

551 
	gnumpgë
 = 0, 
	gnum¥ñ
 = 0;

552 
	gnumdgë
 = 0, 
	gnumdªl
 = 0;

556 #ifde‡
BECé


560 (*
compf˙
Ë
	`_
((
bufsize
 
sizîeq
, 
£quí˚
)Ë
NULL
;

561 *(*
acqf˙
Ë
	`_
((
bufsize
 
size
)Ë
NULL
;

562 (*
ªlf˙
Ë
	`_
((*
buf
)Ë
NULL
;

564 
bufsize
 
exp_ö¸
 = 0;

565 
bufsize
 
poﬁ_Àn
 = 0;

575 
	#QLSize
 ((
qlöks
))

	)

576 
	#SizeQ
 (()((
SizeQu™t
 > 
QLSize
Ë? SizeQu™à: QLSize))

	)

578 
	#V
 (Ë

	)

584 
	#ESít
 ((
bufsize
Ë(-(((1L << ((bufsizeË* 8 - 2)Ë- 1Ë* 2Ë- 2))

	)

588 *
	$bgë
(
ªque°ed_size
)

589 
bufsize
 
ªque°ed_size
;

591 
bufsize
 
size
 = 
ªque°ed_size
;

592 
bfhód
 *
b
;

593 #ifde‡
Be°Fô


594 
bfhód
 *
be°
;

596 *
buf
;

597 #ifde‡
BECé


598 
com∑˘£q
 = 0;

601 
	`as£π
(
size
 > 0);

603 i‡(()
size
 < 
SizeQ
) {

604 
size
 = 
SizeQ
;

606 #ifde‡
SizeQu™t


607 #i‡
SizeQu™t
 > 1

608 
size
 = (sizê+ (
SizeQu™t
 - 1)) & (~(SizeQuant - 1));

612 
size
 +(
bhód
);

615 #ifde‡
BECé


622 
b
 = 
‰ìli°
.
ql
.
Êök
;

623 #ifde‡
Be°Fô


624 
be°
 = &
‰ìli°
;

631 #ifde‡
Be°Fô


632 
b
 !&
‰ìli°
) {

633 
	`£¡öñ_check
(
b
->
bh
);

634 i‡(
b
->
bh
.
bsize
 >
size
) {

635 i‡((
be°
 =&
‰ìli°
Ë|| (
b
->
bh
.
bsize
 < best->bh.bsize)) {

636 
be°
 = 
b
;

639 
b
 = b->
ql
.
Êök
;

641 
b
 = 
be°
;

644 
b
 !&
‰ìli°
) {

645 
	`£¡öñ_check
(
b
->
bh
);

646 i‡((
bufsize
Ë
b
->
bh
.
bsize
 >
size
) {

658 i‡(()(
b
->
bh
.
bsize
 - 
size
) >

659 (
SizeQ
 + ((
bhód
)))) {

660 
bhód
 *
ba
, *
bn
;

662 
ba
 = 
	`BH
(((*)
b
Ë+ (b->
bh
.
bsize
 - 
size
));

663 
bn
 = 
	`BH
(((*)
ba
Ë+ 
size
);

664 
	`as£π
(
bn
->
¥ev‰ì
 =
b
->
bh
.
bsize
);

666 
b
->
bh
.
bsize
 -
size
;

668 
ba
->
¥ev‰ì
 = 
b
->
bh
.
bsize
;

670 
ba
->
bsize
 = -(
bufsize
Ë
size
;

672 
bn
->
¥ev‰ì
 = 0;

675 
ba
->
£¡öñ
 = 
SENTINEL
;

677 #ifde‡
BufSèts


678 
tŸÆloc
 +
size
;

679 
numgë
++;

681 
buf
 = (*)((((*)
ba
Ë+ (
bhód
)));

682  
buf
;

684 
bhód
 *
ba
;

686 
ba
 = 
	`BH
(((*)
b
Ë+ b->
bh
.
bsize
);

687 
	`as£π
(
ba
->
¥ev‰ì
 =
b
->
bh
.
bsize
);

692 
	`as£π
(
b
->
ql
.
blök
->ql.
Êök
 == b);

693 
	`as£π
(
b
->
ql
.
Êök
->ql.
blök
 == b);

694 
b
->
ql
.
blök
->ql.
Êök
 = b->ql.flink;

695 
b
->
ql
.
Êök
->ql.
blök
 = b->ql.blink;

697 #ifde‡
BufSèts


698 
tŸÆloc
 +
b
->
bh
.
bsize
;

699 
numgë
++;

702 
b
->
bh
.
bsize
 = -(b->bh.bsize);

706 
ba
->
¥ev‰ì
 = 0;

709 
buf
 = (*)&(
b
->
ql
);

710  
buf
;

713 
b
 = b->
ql
.
Êök
;

715 #ifde‡
BECé


721 i‡((
compf˙
 =
NULL
Ë|| (!(*compf˙Ë(
size
, ++
com∑˘£q
))) {

730 i‡(
acqf˙
 !
NULL
) {

731 i‡(
size
 > 
exp_ö¸
 - (
bhód
)) {

736 
bdhód
 *
bdh
;

738 
size
 +(
bdhód
Ë- (
bhód
);

739 i‡((
bdh
 = 
	`BDH
((*
acqf˙
Ë((
bufsize
Ë
size
))Ë!
NULL
) {

744 
ba
->
bh
.
£¡öñ
 = 
SENTINEL
;

745 
bdh
->
bh
.
bsize
 = 0;

746 
bdh
->
bh
.
¥ev‰ì
 = 0;

747 
bdh
->
tsize
 = 
size
;

748 #ifde‡
BufSèts


749 
tŸÆloc
 +
size
;

750 
numgë
++;

751 
numdgë
++;

753 
buf
 = (*)(
bdh
 + 1);

754  
buf
;

761 *
√wpoﬁ
;

763 i‡((
√wpoﬁ
 = (*
acqf˙
Ë((
bufsize
Ë
exp_ö¸
)Ë!
NULL
) {

764 
	`bpoﬁ
(
√wpoﬁ
, 
exp_ö¸
);

765 
buf
 = 
	`bgë
(
ªque°ed_size
);

767  
buf
;

776  
NULL
;

777 
	}
}

783 *
	$bgëz
(
size
)

784 
bufsize
 
size
;

786 *
buf
 = (*)
	`bgë
(
size
);

788 i‡(
buf
 !
NULL
) {

789 
bhód
 *
b
;

790 
bufsize
 
rsize
;

792 
b
 = 
	`BH
(
buf
 - (
bhód
));

793 
rsize
 = -(
b
->
bsize
);

794 i‡(
rsize
 == 0) {

795 
bdhód
 *
bd
;

797 
bd
 = 
	`BDH
(
buf
 - (
bdhód
));

798 
rsize
 = 
bd
->
tsize
 - (
bdhód
);

800 
rsize
 -(
bhód
);

802 
	`as£π
(
rsize
 >
size
);

803 
V
 
	`mem£t
(
buf
, 0, (
MemSize
Ë
rsize
);

805  ((*)
buf
);

806 
	}
}

813 *
	$bgër
(
buf
, 
size
)

814 *
buf
;

815 
bufsize
 
size
;

817 *
nbuf
;

818 
bufsize
 
osize
;

819 
bhód
 *
b
;

821 i‡((
nbuf
 = 
	`bgë
(
size
)Ë=
NULL
) {

822  
NULL
;

824 i‡(
buf
 =
NULL
) {

825  
nbuf
;

827 
b
 = 
	`BH
(((*)
buf
Ë- (
bhód
));

828 
osize
 = -
b
->
bsize
;

829 #ifde‡
BECé


830 i‡(
osize
 == 0) {

832 
bdhód
 *
bd
;

834 
bd
 = 
	`BDH
(((*)
buf
Ë- (
bdhód
));

835 
osize
 = 
bd
->
tsize
 - (
bdhód
);

838 
osize
 -(
bhód
);

839 
	`as£π
(
osize
 > 0);

840 
V
 
	`mem˝y
((*)
nbuf
, (*)
buf
,

841 (
MemSize
Ë((
size
 < 
osize
) ? size : osize));

842 
	`bªl
(
buf
);

843  
nbuf
;

844 
	}
}

848 
	$bªl
(
buf
)

849 *
buf
;

851 
bfhód
 *
b
, *
bn
;

853 
b
 = 
	`BFH
(((*)
buf
Ë- (
bhód
));

854 #ifde‡
BufSèts


855 
numªl
++;

857 
	`as£π
(
buf
 !
NULL
);

859 
	`£¡öñ_check
(
b
->
bh
);

861 #ifde‡
BECé


862 i‡(
b
->
bh
.
bsize
 == 0) {

863 
bdhód
 *
bdh
;

865 
bdh
 = 
	`BDH
(((*)
buf
Ë- (
bdhód
));

866 
	`as£π
(
b
->
bh
.
¥ev‰ì
 == 0);

867 #ifde‡
BufSèts


868 
tŸÆloc
 -
bdh
->
tsize
;

869 
	`as£π
(
tŸÆloc
 >= 0);

870 
numdªl
++;

872 #ifde‡
FªeWùe


873 
V
 
	`mem£t
((*)
buf
, 0x55,

874 (
MemSize
Ë(
bdh
->
tsize
 - (
bdhód
)));

876 
	`as£π
(
ªlf˙
 !
NULL
);

877 (*
ªlf˙
Ë((*)
bdh
);

885 i‡(
b
->
bh
.
bsize
 >= 0) {

886 
bn
 = 
NULL
;

888 
	`as£π
(
b
->
bh
.
bsize
 < 0);

893 
	`as£π
(
	`BH
((*)
b
 - b->
bh
.
bsize
)->
¥ev‰ì
 == 0);

895 #ifde‡
BufSèts


896 
tŸÆloc
 +
b
->
bh
.
bsize
;

897 
	`as£π
(
tŸÆloc
 >= 0);

902 i‡(
b
->
bh
.
¥ev‰ì
 != 0) {

910 
bufsize
 
size
 = 
b
->
bh
.
bsize
;

913 
	`as£π
(
	`BH
((*)
b
 - b->
bh
.
¥ev‰ì
)->
bsize
 == b->bh.prevfree);

914 
b
->
bh
.
£¡öñ
 = 0;

915 
b
 = 
	`BFH
(((*)bË- b->
bh
.
¥ev‰ì
);

916 
b
->
bh
.
bsize
 -
size
;

923 
	`as£π
(
‰ìli°
.
ql
.
blök
->ql.
Êök
 == &freelist);

924 
	`as£π
(
‰ìli°
.
ql
.
Êök
->ql.
blök
 == &freelist);

925 
b
->
ql
.
Êök
 = &
‰ìli°
;

926 
b
->
ql
.
blök
 = 
‰ìli°
.ql.blink;

927 
‰ìli°
.
ql
.
blök
 = 
b
;

928 
b
->
ql
.
blök
->ql.
Êök
 = b;

929 
b
->
bh
.
bsize
 = -b->bh.bsize;

937 
bn
 = 
	`BFH
(((*)
b
Ë+ b->
bh
.
bsize
);

938 i‡(
bn
->
bh
.
bsize
 > 0) {

943 
	`as£π
(
	`BH
((*)
bn
 + bn->
bh
.
bsize
)->
¥ev‰ì
 == bn->bh.bsize);

944 
	`as£π
(
bn
->
ql
.
blök
->ql.
Êök
 == bn);

945 
	`as£π
(
bn
->
ql
.
Êök
->ql.
blök
 == bn);

946 
bn
->
ql
.
blök
->ql.
Êök
 = bn->ql.flink;

947 
bn
->
ql
.
Êök
->ql.
blök
 = bn->ql.blink;

948 
b
->
bh
.
bsize
 +
bn
->bh.bsize;

957 
bn
 = 
	`BFH
(((*)
b
Ë+ b->
bh
.
bsize
);

959 #ifde‡
FªeWùe


960 
V
 
	`mem£t
(((*)
b
Ë+ (
bfhód
), 0x55,

961 (
MemSize
Ë(
b
->
bh
.
bsize
 - (
bfhód
)));

963 
	`as£π
(
bn
->
bh
.
bsize
 < 0);

968 
bn
->
bh
.
¥ev‰ì
 = 
b
->bh.
bsize
;

970 #ifde‡
BECé


977 i‡(
ªlf˙
 !
NULL
 &&

978 ((
bufsize
Ë
b
->
bh
.
bsize
Ë=(
poﬁ_Àn
 - (
bhód
))) {

980 
	`as£π
(
b
->
bh
.
¥ev‰ì
 == 0);

981 
	`as£π
(
	`BH
((*)
b
 + b->
bh
.
bsize
)->bsizê=
ESít
);

982 
	`as£π
(
	`BH
((*)
b
 + b->
bh
.
bsize
)->
¥ev‰ì
 == b->bh.bsize);

984 
b
->
ql
.
blök
->ql.
Êök
 = b->ql.flink;

985 
b
->
ql
.
Êök
->ql.
blök
 = b->ql.blink;

987 (*
ªlf˙
Ë(
b
);

988 #ifde‡
BufSèts


989 
num¥ñ
++;

990 
numpblk
--;

991 
	`as£π
(
numpblk
 =
numpgë
 - 
num¥ñ
);

995 
	}
}

997 #ifde‡
BECé


1001 
	$be˘l
(
com∑˘
, 
acquúe
, 
ªÀa£
, 
poﬁ_ö¸
)

1002 (*
com∑˘
Ë
	`_
((
bufsize
 
sizîeq
, 
£quí˚
));

1003 *(*
acquúe
Ë
	`_
((
bufsize
 
size
));

1004 (*
ªÀa£
Ë
	`_
((*
buf
));

1005 
bufsize
 
poﬁ_ö¸
;

1007 
compf˙
 = 
com∑˘
;

1008 
acqf˙
 = 
acquúe
;

1009 
ªlf˙
 = 
ªÀa£
;

1010 
exp_ö¸
 = 
poﬁ_ö¸
;

1011 
	}
}

1016 
	$bpoﬁ
(
buf
, 
Àn
)

1017 *
buf
;

1018 
bufsize
 
Àn
;

1020 
bfhód
 *
b
 = 
	`BFH
(
buf
);

1021 
bhód
 *
bn
;

1023 #ifde‡
SizeQu™t


1024 
Àn
 &~(
SizeQu™t
 - 1);

1026 #ifde‡
BECé


1027 i‡(
poﬁ_Àn
 == 0) {

1028 
poﬁ_Àn
 = 
Àn
;

1029 } i‡(
Àn
 !
poﬁ_Àn
) {

1030 
poﬁ_Àn
 = -1;

1032 #ifde‡
BufSèts


1033 
numpgë
++;

1034 
numpblk
++;

1035 
	`as£π
(
numpblk
 =
numpgë
 - 
num¥ñ
);

1043 
	`as£π
(
Àn
 - (
bhód
Ë<-((
bufsize
Ë
ESít
 + 1));

1049 
b
->
bh
.
¥ev‰ì
 = 0;

1051 
b
->
bh
.
£¡öñ
 = 
SENTINEL
;

1055 
	`as£π
(
‰ìli°
.
ql
.
blök
->ql.
Êök
 == &freelist);

1056 
	`as£π
(
‰ìli°
.
ql
.
Êök
->ql.
blök
 == &freelist);

1058 
	`£¡öñ_check
(
‰ìli°
.
ql
.
blök
->
bh
);

1059 
	`£¡öñ_check
(
‰ìli°
.
ql
.
Êök
->
bh
);

1061 
b
->
ql
.
Êök
 = &
‰ìli°
;

1062 
b
->
ql
.
blök
 = 
‰ìli°
.ql.blink;

1063 
‰ìli°
.
ql
.
blök
 = 
b
;

1064 
b
->
ql
.
blök
->ql.
Êök
 = b;

1074 
Àn
 -(
bhód
);

1075 
b
->
bh
.
bsize
 = (
bufsize
Ë
Àn
;

1076 #ifde‡
FªeWùe


1077 
V
 
	`mem£t
(((*)
b
Ë+ (
bfhód
), 0x55,

1078 (
MemSize
Ë(
Àn
 - (
bfhód
)));

1080 
bn
 = 
	`BH
(((*)
b
Ë+ 
Àn
);

1081 
bn
->
£¡öñ
 = 
SENTINEL
;

1082 
bn
->
¥ev‰ì
 = (
bufsize
Ë
Àn
;

1084 
	`as£π
((~0) == -1);

1085 
bn
->
bsize
 = 
ESít
;

1086 
	}
}

1088 #ifde‡
BufSèts


1092 
	$b°©s
(
cuøŒoc
, 
tŸ‰ì
, 
max‰ì
, 
ngë
, 
ƒñ
)

1093 
bufsize
 *
cuøŒoc
, *
tŸ‰ì
, *
max‰ì
;

1094 *
ngë
, *
ƒñ
;

1096 
bfhód
 *
b
 = 
‰ìli°
.
ql
.
Êök
;

1098 *
ngë
 = 
numgë
;

1099 *
ƒñ
 = 
numªl
;

1100 *
cuøŒoc
 = 
tŸÆloc
;

1101 *
tŸ‰ì
 = 0;

1102 *
max‰ì
 = -1;

1103 
b
 !&
‰ìli°
) {

1104 
	`as£π
(
b
->
bh
.
bsize
 > 0);

1105 *
tŸ‰ì
 +
b
->
bh
.
bsize
;

1106 i‡(
b
->
bh
.
bsize
 > *
max‰ì
) {

1107 *
max‰ì
 = 
b
->
bh
.
bsize
;

1109 
b
 = b->
ql
.
Êök
;

1111 
	}
}

1113 #ifde‡
BECé


1117 
	$b°©£
(
poﬁ_ö¸
, 
≈oﬁ
, 
≈gë
, 
≈ªl
, 
ndgë
, 
ndªl
)

1118 
bufsize
 *
poﬁ_ö¸
;

1119 *
≈oﬁ
, *
≈gë
, *
≈ªl
, *
ndgë
, *
ndªl
;

1121 *
poﬁ_ö¸
 = (
poﬁ_Àn
 < 0Ë? -
exp_ö¸
 :Éxp_incr;

1122 *
≈oﬁ
 = 
numpblk
;

1123 *
≈gë
 = 
numpgë
;

1124 *
≈ªl
 = 
num¥ñ
;

1125 *
ndgë
 = 
numdgë
;

1126 *
ndªl
 = 
numdªl
;

1127 
	}
}

1131 #ifde‡
DumpD©a


1137 
	$bufdump
(
buf
)

1138 *
buf
;

1140 
bfhód
 *
b
;

1141 *
bdump
;

1142 
bufsize
 
bdÀn
;

1144 
b
 = 
	`BFH
(((*)
buf
Ë- (
bhód
));

1145 
	`as£π
(
b
->
bh
.
bsize
 != 0);

1146 i‡(
b
->
bh
.
bsize
 < 0) {

1147 
bdump
 = (*)
buf
;

1148 
bdÀn
 = (-
b
->
bh
.
bsize
Ë- (
bhód
);

1150 
bdump
 = (*)(((*)
b
Ë+ (
bfhód
));

1151 
bdÀn
 = 
b
->
bh
.
bsize
 - (
bfhód
);

1154 
bdÀn
 > 0) {

1155 
i
, 
du≥s
 = 0;

1156 
bufsize
 
l
 = 
bdÀn
;

1157 
bhex
[50], 
bascii
[20];

1159 i‡(
l
 > 16) {

1160 
l
 = 16;

1163 
i
 = 0; i < 
l
; i++) {

1164 
V
 
	`•rötf
(
bhex
 + 
i
 * 3, "%02X ", 
bdump
[i]);

1165 
bascii
[
i
] = 
	`i•röt
(
bdump
[i]) ? bdump[i] : ' ';

1167 
bascii
[
i
] = 0;

1168 
V
 
	`¥ötf
("%-48† %s\n", 
bhex
, 
bascii
);

1169 
bdump
 +
l
;

1170 
bdÀn
 -
l
;

1171 (
bdÀn
 > 16Ë&& (
	`memcmp
((*)(
bdump
 - 16),

1172 (*)
bdump
, 16) == 0)) {

1173 
du≥s
++;

1174 
bdump
 += 16;

1175 
bdÀn
 -= 16;

1177 i‡(
du≥s
 > 1) {

1178 
V
 
¥ötf


1180 
du≥s
, dupes * 16);

1181 } i‡(
du≥s
 == 1) {

1182 
bdump
 -= 16;

1183 
bdÀn
 += 16;

1186 
	}
}

1189 #ifde‡
BufDump


1197 
	$bpoﬁd
(
buf
, 
dum∑Œoc
, 
dump‰ì
)

1198 *
buf
;

1199 
dum∑Œoc
, 
dump‰ì
;

1201 
bfhód
 *
b
 = 
	`BFH
(
buf
);

1203 
b
->
bh
.
bsize
 !
ESít
) {

1204 
bufsize
 
bs
 = 
b
->
bh
.
bsize
;

1206 i‡(
bs
 < 0) {

1207 
bs
 = -bs;

1208 
V
 
	`¥ötf
("AŒoˇãd buf„r: sizê%6ld byãs.\n", ()
bs
);

1209 i‡(
dum∑Œoc
) {

1210 
	`bufdump
((*)(((*)
b
Ë+ (
bhód
)));

1213 *
Àº
 = "";

1215 
	`as£π
(
bs
 > 0);

1216 i‡((
b
->
ql
.
blök
->ql.
Êök
 != b) || (b->ql.flink->ql.blink != b)) {

1217 
Àº
 = " (Bad freeÜistÜinks)";

1219 
V
 
	`¥ötf
("Free block: size %6ld bytes.%s\n",

1220 ()
bs
, 
Àº
);

1221 #ifde‡
FªeWùe


1222 
Àº
 = ((*)
b
Ë+ (
bfhód
);

1223 i‡((
bs
 > (
bfhód
)Ë&& ((*
Àº
 != 0x55) ||

1224 (
	`memcmp
(
Àº
,Üerr + 1,

1225 (
MemSize
Ë(
bs
 -

1228 
bfhód
)

1231 
V
 
¥ötf


1233 
	`bufdump
((*)(((*)
b
Ë+ (
bhód
)));

1236 i‡(
dump‰ì
) {

1237 
	`bufdump
((*)(((*)
b
Ë+ (
bhód
)));

1240 
b
 = 
	`BFH
(((*)bË+ 
bs
);

1242 
	}
}

1245 #ifde‡
BufVÆid


1250 
	$bpoﬁv
(
buf
)

1251 *
buf
;

1253 
bfhód
 *
b
 = 
	`BFH
(
buf
);

1255 
b
->
bh
.
bsize
 !
ESít
) {

1256 
bufsize
 
bs
 = 
b
->
bh
.
bsize
;

1258 i‡(
bs
 < 0) {

1259 
bs
 = -bs;

1261 *
Àº
 = "";

1263 
	`as£π
(
bs
 > 0);

1264 i‡(
bs
 <= 0) {

1267 i‡((
b
->
ql
.
blök
->ql.
Êök
 != b) || (b->ql.flink->ql.blink != b)) {

1268 
V
 
¥ötf


1270 ()
bs
);

1271 
	`as£π
(0);

1274 #ifde‡
FªeWùe


1275 
Àº
 = ((*)
b
Ë+ (
bfhód
);

1276 i‡((
bs
 > (
bfhód
)Ë&& ((*
Àº
 != 0x55) ||

1277 (
	`memcmp
(
Àº
,Üerr + 1,

1278 (
MemSize
Ë(
bs
 -

1281 
bfhód
)

1284 
V
 
¥ötf


1286 
	`bufdump
((*)(((*)
b
Ë+ (
bhód
)));

1287 
	`as£π
(0);

1292 
b
 = 
	`BFH
(((*)bË+ 
bs
);

1295 
	}
}

1304 #ifde‡
Te°Prog


1306 
	#RïóèbÀ
 1

	)

1312 
	#OUR_RAND


	)

1316 #ifde‡
BECé


1317 
	#PoﬁSize
 300000

	)

1319 
	#PoﬁSize
 50000

	)

1321 
	#ExpIn¸
 32768

	)

1322 
	#Com∑˘Trõs
 10

	)

1324 
	#dumpAŒoc
 0

	)

1325 
	#dumpFªe
 0

	)

1327 #i‚de‡
RïóèbÀ


1328 
time
();

1331 *
mÆloc
();

1332 
‰ì
 
_
((*));

1334 *
	gbchaö
 = 
NULL
;

1335 *
	gbp
 = 
NULL
;

1337 
	~<m©h.h
>

1339 #ifde‡
OUR_RAND


1341 
	g√xt
 = 1;

1345 
	$ønd
() {

1346 
√xt
 =Çext * 1103515245L + 12345;

1347  ()(
√xt
 / 65536L) % 32768L;

1348 
	}
}

1352 
	$§™d
(
£ed
)

1353 
£ed
;

1355 
√xt
 = 
£ed
;

1356 
	}
}

1361 
	$°©s
(
whí
)

1362 *
whí
;

1364 
bufsize
 
cuøl
, 
tŸ‰ì
, 
max‰ì
;

1365 
ngë
, 
n‰ì
;

1366 #ifde‡
BECé


1367 
bufsize
 
pö¸
;

1368 
tŸblocks
, 
≈gë
, 
≈ªl
, 
ndgë
, 
ndªl
;

1371 
	`b°©s
(&
cuøl
, &
tŸ‰ì
, &
max‰ì
, &
ngë
, &
n‰ì
);

1372 
V
 
¥ötf


1374 
whí
, 
ngë
, 
n‰ì
, ()
cuøl
, ()
tŸ‰ì
, ()
max‰ì
);

1375 #ifde‡
BECé


1376 
	`b°©£
(&
pö¸
, &
tŸblocks
, &
≈gë
, &
≈ªl
, &
ndgë
, &
ndªl
);

1377 
V
 
¥ötf


1379 ()
pö¸
, 
tŸblocks
,Öö¸ *ÅŸblocks, 
≈gë
, 
≈ªl
);

1380 
V
 
	`¥ötf
(" %ld dúe˘ gës, %ld dúe˘ fªes\n", 
ndgë
, 
ndªl
);

1382 
	}
}

1384 #ifde‡
BECé


1385 
	g¥Ÿe˘
 = 0;

1389 
	$bcom∑˘
(
bsize
, 
£q
)

1390 
bufsize
 
bsize
;

1391 
£q
;

1393 #ifde‡
Com∑˘Trõs


1394 *
bc
 = 
bchaö
;

1395 
i
 = 
	`ønd
() & 0x3;

1397 #ifde‡
COMPACTRACE


1398 
V
 
	`¥ötf
("CompactionÑequested. %ld bytesÇeeded, sequence %d.\n",

1399 ()
bsize
, 
£q
);

1402 i‡(
¥Ÿe˘
 || (
£q
 > 
Com∑˘Trõs
)) {

1403 #ifde‡
COMPACTRACE


1404 
V
 
	`¥ötf
("Compaction gave up.\n");

1412 
i
 > 0 && 
bc
 !
NULL
) {

1413 
bc
 = *((**)bc);

1414 
i
--;

1416 i‡(
bc
 !
NULL
) {

1417 *
fb
;

1419 
fb
 = *((**)
bc
);

1420 i‡(
fb
 !
NULL
) {

1421 *((**)
bc
Ë*((**)
fb
);

1422 
	`bªl
((*)
fb
);

1426 #ifde‡
COMPACTRACE


1427 
V
 
	`¥ötf
("Compaction bailed out.\n");

1431 
	}
}

1435 *
	$bex∑nd
(
size
)

1436 
bufsize
 
size
;

1438 *
≈
 = 
NULL
;

1439 
bufsize
 
cuøl
, 
tŸ‰ì
, 
max‰ì
;

1440 
ngë
, 
n‰ì
;

1444 
	`b°©s
(&
cuøl
, &
tŸ‰ì
, &
max‰ì
, &
ngë
, &
n‰ì
);

1446 i‡(
cuøl
 < 
PoﬁSize
) {

1447 
≈
 = (*)
	`mÆloc
(()
size
);

1449 #ifde‡
EXPTRACE


1450 
V
 
	`¥ötf
("Ex∑ndÖoﬁ by %ld -- %s.\n", ()
size
,

1451 
≈
 =
NULL
 ? "failed" : "succeeded");

1453  
≈
;

1454 
	}
}

1458 
	$bshrök
(
buf
)

1459 *
buf
;

1461 i‡(((*)
buf
Ë=
bp
) {

1462 #ifde‡
EXPTRACE


1463 
V
 
	`¥ötf
("InitialÖoolÑeleased.\n");

1465 
bp
 = 
NULL
;

1467 #ifde‡
EXPTRACE


1468 
V
 
	`¥ötf
("ShrinkÖool.\n");

1470 
	`‰ì
((*)
buf
);

1471 
	}
}

1478 
bufsize
 
	$blimô
(
bs
)

1479 
bufsize
 
bs
;

1481 i‡(
bs
 < (*)) {

1482 
bs
 = (*);

1490 i‡(
bs
 > 32767) {

1491 
bs
 = 32767;

1494 i‡(
bs
 > 200000) {

1495 
bs
 = 200000;

1498  
bs
;

1499 
	}
}

1501 
	$maö
() {

1502 
i
;

1503 
x
;

1509 #ifde‡
RïóèbÀ


1510 
V
 
	`§™d
(1234);

1512 
V
 
	`§™d
(()
	`time
((*)
NULL
));

1519 
x
 = 4.0 * 
ExpIn¸
;

1520 
x
 = 
	`log
(x);

1521 
x
 = 
	`exp
(
	`log
(4.0 * 
ExpIn¸
) / (ExpIncr - 1.0));

1523 #ifde‡
BECé


1524 
	`be˘l
(
bcom∑˘
, 
bex∑nd
, 
bshrök
, (
bufsize
Ë
ExpIn¸
);

1525 
bp
 = 
	`mÆloc
(
ExpIn¸
);

1526 
	`as£π
(
bp
 !
NULL
);

1527 
	`bpoﬁ
((*)
bp
, (
bufsize
Ë
ExpIn¸
);

1529 
bp
 = 
	`mÆloc
(
PoﬁSize
);

1530 
	`as£π
(
bp
 !
NULL
);

1531 
	`bpoﬁ
((*)
bp
, (
bufsize
Ë
PoﬁSize
);

1534 
	`°©s
("CreateÖool");

1535 
V
 
	`bpoﬁv
((*)
bp
);

1536 
	`bpoﬁd
((*)
bp
, 
dumpAŒoc
, 
dumpFªe
);

1538 
i
 = 0; i < 
Te°Prog
; i++) {

1539 *
cb
;

1540 
bufsize
 
bs
 = 
	`pow
(
x
, ()(
	`ønd
(Ë& (
ExpIn¸
 - 1)));

1542 
	`as£π
(
bs
 <(((
bufsize
Ë4Ë* 
ExpIn¸
));

1543 
bs
 = 
	`blimô
(bs);

1544 i‡(
	`ønd
() & 0x400) {

1545 
cb
 = (*)
	`bgëz
(
bs
);

1547 
cb
 = (*)
	`bgë
(
bs
);

1549 i‡(
cb
 =
NULL
) {

1550 #ifde‡
EasyOut


1553 *
bc
 = 
bchaö
;

1555 i‡(
bc
 !
NULL
) {

1556 *
fb
;

1558 
fb
 = *((**)
bc
);

1559 i‡(
fb
 !
NULL
) {

1560 *((**)
bc
Ë*((**)
fb
);

1561 
	`bªl
((*)
fb
);

1567 *((**)
cb
Ë(*)
bchaö
;

1568 
bchaö
 = 
cb
;

1573 i‡((
	`ønd
() & 0x10) == 0) {

1574 *
bc
 = 
bchaö
;

1575 
i
 = 
	`ønd
() & 0x3;

1577 
i
 > 0 && 
bc
 !
NULL
) {

1578 
bc
 = *((**)bc);

1579 
i
--;

1581 i‡(
bc
 !
NULL
) {

1582 *
fb
;

1584 
fb
 = *((**)
bc
);

1585 i‡(
fb
 !
NULL
) {

1586 *((**)
bc
Ë*((**)
fb
);

1587 
	`bªl
((*)
fb
);

1595 i‡((
	`ønd
() & 0x20) == 0) {

1596 *
bc
 = 
bchaö
;

1597 
i
 = 
	`ønd
() & 0x3;

1599 
i
 > 0 && 
bc
 !
NULL
) {

1600 
bc
 = *((**)bc);

1601 
i
--;

1603 i‡(
bc
 !
NULL
) {

1604 *
fb
;

1606 
fb
 = *((**)
bc
);

1607 i‡(
fb
 !
NULL
) {

1608 *
√wb
;

1610 
bs
 = 
	`pow
(
x
, ()(
	`ønd
(Ë& (
ExpIn¸
 - 1)));

1611 
bs
 = 
	`blimô
(bs);

1612 #ifde‡
BECé


1613 
¥Ÿe˘
 = 1;

1615 
√wb
 = (*)
	`bgër
((*)
fb
, 
bs
);

1616 #ifde‡
BECé


1617 
¥Ÿe˘
 = 0;

1619 i‡(
√wb
 !
NULL
) {

1620 *((**)
bc
Ë
√wb
;

1626 
	`°©s
("\nAfterállocation");

1627 i‡(
bp
 !
NULL
) {

1628 
V
 
	`bpoﬁv
((*)
bp
);

1629 
	`bpoﬁd
((*)
bp
, 
dumpAŒoc
, 
dumpFªe
);

1632 
bchaö
 !
NULL
) {

1633 *
buf
 = 
bchaö
;

1635 
bchaö
 = *((**)
buf
);

1636 
	`bªl
((*)
buf
);

1638 
	`°©s
("\nAfterÑelease");

1639 #i‚de‡
BECé


1640 i‡(
bp
 !
NULL
) {

1641 
V
 
	`bpoﬁv
((*)
bp
);

1642 
	`bpoﬁd
((*)
bp
, 
dumpAŒoc
, 
dumpFªe
);

1647 
	}
}

	@src/common/fmtout.c

33 
	~<°d¨g.h
>

34 
	~<°ddef.h
>

35 
	~<gìkos/°rög.h
>

36 
	~<limôs.h
>

37 
	~<gìkos/fmtout.h
>

43 
	tötmax_t
;

44 
	tuötmax_t
;

45 
	tuöçå_t
;

48 
	#ASSERT
(
exp
) \

49 dÿ{ i‡(!(
exp
)Ë1); } 0)

	)

51 
	eÊags
 {

52 
	mFL_ZERO
 = 0x01,

53 
	mFL_MINUS
 = 0x02,

54 
	mFL_PLUS
 = 0x04,

55 
	mFL_TICK
 = 0x08,

56 
	mFL_SPACE
 = 0x10,

57 
	mFL_HASH
 = 0x20,

58 
	mFL_SIGNED
 = 0x40,

59 
	mFL_UPPER
 = 0x80

63 
	eønks
 {

64 
	mønk_ch¨
 = -2,

65 
	mønk_sh‹t
 = -1,

66 
	mønk_öt
 = 0,

67 
	mønk_l⁄g
 = 1,

69 
	mønk_l⁄gl⁄g
 = 2,

73 
	#MIN_RANK
 
ønk_ch¨


	)

74 
	#MAX_RANK
 
ønk_l⁄g


	)

76 
	#INTMAX_RANK
 
ønk_l⁄g


	)

77 
	#SIZE_T_RANK
 
ønk_l⁄g


	)

78 
	#PTRDIFF_T_RANK
 
ønk_l⁄g


	)

81 
	#EMIT
(
x
Ëdÿ{ (
q
)->
	`Emô
((q), (x)); } 0)

	)

94 
	#NDIGITS_MAX
 43

	)

96 
size_t


97 
	$f‹m©_öt
(
Ouçut_Sök
 *
q
, 
uötmax_t
 
vÆ
, 
Êags
 flags,

98 
ba£
, 
width
, 
¥ec
) {

99 *
qq
;

100 
size_t
 
o
 = 0, 
oo
;

101 c⁄° 
lcdigôs
[] = "0123456789abcdef";

102 c⁄° 
ucdigôs
[] = "0123456789ABCDEF";

103 c⁄° *
digôs
;

104 
uötmax_t
 
tmpvÆ
;

105 
möus
 = 0;

106 
ndigôs
 = 0, 
nch¨s
;

107 
tickskù
, 
b4tick
;

108 
digô_buf„r
[
NDIGITS_MAX
];

109 
size_t
 
ndigôs_ßve
;

112 
digôs
 = (
Êags
 & 
FL_UPPER
Ë? 
ucdigôs
 : 
lcdigôs
;

115 i‡(
Êags
 & 
FL_SIGNED
 && (
ötmax_t
Ë
vÆ
 < 0) {

116 
möus
 = 1;

117 
vÆ
 = (
uötmax_t
Ë(-(
ötmax_t
) val);

121 
tmpvÆ
 = 
vÆ
;

122 
tmpvÆ
) {

123 
tmpvÆ
 /
ba£
;

124 
ndigôs
++;

129 i‡(
Êags
 & 
FL_HASH
 && 
ba£
 == 8) {

130 i‡(
¥ec
 < 
ndigôs
 + 1)

131 
¥ec
 = 
ndigôs
 + 1;

134 i‡(
ndigôs
 < 
¥ec
) {

135 
ndigôs
 = 
¥ec
;

136 } i‡(
vÆ
 == 0) {

137 
ndigôs
 = 1;

141 i‡(
Êags
 & 
FL_TICK
) {

142 
tickskù
 = (
ba£
 == 16) ? 4 : 3;

144 
tickskù
 = 
ndigôs
;

148 
ndigôs
 +“digô†- 1Ë/ 
tickskù
;

151 
nch¨s
 = 
ndigôs
;

153 i‡(
möus
 || (
Êags
 & (
FL_PLUS
 | 
FL_SPACE
)))

154 
nch¨s
++;

155 i‡((
Êags
 & 
FL_HASH
Ë&& 
ba£
 == 16) {

156 
nch¨s
 += 2;

160 i‡(!(
Êags
 & (
FL_MINUS
 | 
FL_ZERO
)Ë&& 
width
 > 
nch¨s
) {

161 
width
 > 
nch¨s
) {

162 
	`EMIT
(' ');

163 
width
--;

168 i‡(
möus
)

169 
	`EMIT
('-');

170 i‡(
Êags
 & 
FL_PLUS
)

171 
	`EMIT
('+');

172 i‡(
Êags
 & 
FL_SPACE
)

173 
	`EMIT
(' ');

175 i‡((
Êags
 & 
FL_HASH
Ë&& 
ba£
 == 16) {

176 
	`EMIT
('0');

177 
	`EMIT
((
Êags
 & 
FL_UPPER
) ? 'X' : 'x');

181 i‡((
Êags
 & (
FL_MINUS
 | 
FL_ZERO
)Ë=FL_ZERO && 
width
 > 
ndigôs
) {

182 
width
 > 
nch¨s
) {

183 
	`EMIT
('0');

184 
width
--;

189 
	`ASSERT
(
ndigôs
 <
NDIGITS_MAX
);

190 
ndigôs_ßve
 = 
ndigôs
;

191 
qq
 = 
digô_buf„r
 + 
ndigôs
;

192 
oo
 = 
o
;

195 
b4tick
 = 
tickskù
;

196 
ndigôs
 > 0) {

197 i‡(!
b4tick
--) {

198 
qq
--;

199 
oo
--;

200 
ndigôs
--;

201 *
qq
 = '_';

202 
b4tick
 = 
tickskù
 - 1;

204 
qq
--;

205 
oo
--;

206 
ndigôs
--;

207 *
qq
 = 
digôs
[
vÆ
 % 
ba£
];

208 
vÆ
 /
ba£
;

212 
oo
 = 0; oÿ< 
ndigôs_ßve
; ++oo)

213 
	`EMIT
(
digô_buf„r
[
oo
]);

216 (
Êags
 & 
FL_MINUS
Ë&& 
width
 > 
nch¨s
) {

217 
	`EMIT
(' ');

218 
width
--;

221  
o
;

222 
	}
}

231 
	$F‹m©_Ouçut
(
Ouçut_Sök
 *
q
, c⁄° *
f‹m©
, 
va_li°
 
≠
) {

232 c⁄° *
p
 = 
f‹m©
;

233 
ch
;

234 
size_t
 
o
 = 0;

235 
uötmax_t
 
vÆ
 = 0;

236 
ønk
 = 
ønk_öt
;

237 
width
 = 0;

238 
¥ec
 = -1;

239 
ba£
;

240 
size_t
 
sz
;

241 
Êags
 flags = 0;

243 
°_n‹mÆ
,

244 
°_Êags
,

245 
°_width
,

246 
°_¥ec
,

247 
°_modifõrs


248 } 
°©e
 = 
°_n‹mÆ
;

249 c⁄° *
ßrg
;

250 
ˇrg
;

251 
¶í
;

253 (
ch
 = *
p
++)) {

254 
°©e
) {

255 
°_n‹mÆ
:

256 i‡(
ch
 == '%') {

257 
°©e
 = 
°_Êags
;

258 
Êags
 = 0;

259 
ønk
 = 
ønk_öt
;

260 
width
 = 0;

261 
¥ec
 = -1;

263 
	`EMIT
(
ch
);

267 
°_Êags
:

268 
ch
) {

270 
Êags
 |
FL_MINUS
;

273 
Êags
 |
FL_PLUS
;

276 
Êags
 |
FL_TICK
;

279 
Êags
 |
FL_SPACE
;

282 
Êags
 |
FL_HASH
;

285 
Êags
 |
FL_ZERO
;

288 
°©e
 = 
°_width
;

289 
p
--;

294 
°_width
:

295 i‡(
ch
 >= '0' && ch <= '9') {

296 
width
 = width * 10 + (
ch
 - '0');

297 } i‡(
ch
 == '*') {

298 
width
 = 
	`va_¨g
(
≠
, );

299 i‡(
width
 < 0) {

300 
width
 = -width;

301 
Êags
 |
FL_MINUS
;

303 } i‡(
ch
 == '.') {

304 
¥ec
 = 0;

305 
°©e
 = 
°_¥ec
;

307 
°©e
 = 
°_modifõrs
;

308 
p
--;

312 
°_¥ec
:

313 i‡(
ch
 >= '0' && ch <= '9') {

314 
¥ec
 =Öª¯* 10 + (
ch
 - '0');

315 } i‡(
ch
 == '*') {

316 
¥ec
 = 
	`va_¨g
(
≠
, );

317 i‡(
¥ec
 < 0)

318 
¥ec
 = -1;

320 
°©e
 = 
°_modifõrs
;

321 
p
--;

325 
°_modifõrs
:

326 
ch
) {

329 
ønk
--;

332 
ønk
++;

335 
ønk
 = 
INTMAX_RANK
;

338 
ønk
 = 
SIZE_T_RANK
;

341 
ønk
 = 
PTRDIFF_T_RANK
;

345 
ønk
 += 2;

349 
°©e
 = 
°_n‹mÆ
;

350 i‡(
ønk
 < 
MIN_RANK
)

351 
ønk
 = 
MIN_RANK
;

352 i‡(
ønk
 > 
MAX_RANK
)

353 
ønk
 = 
MAX_RANK
;

355 
ch
) {

357 
Êags
 |
FL_UPPER
;

360 
ba£
 = 16;

361 
¥ec
 = (
CHAR_BIT
 * (*) + 3) / 4;

362 
Êags
 |
FL_HASH
;

363 
vÆ
 =

364 (
uötmax_t
Ë(
uöçå_t
Ë
	`va_¨g
(
≠
,

366 
is_öãgî
;

370 
ba£
 = 10;

371 
Êags
 |
FL_SIGNED
;

372 
ønk
) {

373 
ønk_ch¨
:

375 
vÆ
 =

376 (
uötmax_t
Ë(
ötmax_t
) (signed

378 
	`va_¨g
(
≠
, signed );

380 
ønk_sh‹t
:

381 
vÆ
 =

382 (
uötmax_t
Ë(
ötmax_t
) (signed

384 
	`va_¨g
(
≠
, signed );

386 
ønk_öt
:

387 
vÆ
 =

388 (
uötmax_t
Ë(
ötmax_t
Ë
	`va_¨g
(
≠
,

392 
ønk_l⁄g
:

393 
vÆ
 =

394 (
uötmax_t
Ë(
ötmax_t
Ë
	`va_¨g
(
≠
,

399 
ønk_l⁄gl⁄g
:

400 
vÆ
 =

401 (
uötmax_t
Ë(
ötmax_t
Ë
	`va_¨g
(
≠
,

408 
is_öãgî
;

410 
ba£
 = 8;

411 
is_unsig√d
;

413 
ba£
 = 10;

414 
is_unsig√d
;

416 
Êags
 |
FL_UPPER
;

419 
ba£
 = 16;

420 
is_unsig√d
;

422 
is_unsig√d
:

423 
ønk
) {

424 
ønk_ch¨
:

425 
vÆ
 =

426 (
uötmax_t
) ()

427 
	`va_¨g
(
≠
, );

429 
ønk_sh‹t
:

430 
vÆ
 =

431 (
uötmax_t
) ()

432 
	`va_¨g
(
≠
, );

434 
ønk_öt
:

435 
vÆ
 =

436 (
uötmax_t
Ë
	`va_¨g
(
≠
,

439 
ønk_l⁄g
:

440 
vÆ
 =

441 (
uötmax_t
Ë
	`va_¨g
(
≠
,

445 
ønk_l⁄gl⁄g
:

446 
vÆ
 =

447 (
uötmax_t
Ë
	`va_¨g
(
≠
,

455 
is_öãgî
:

456 
sz
 = 
	`f‹m©_öt
(
q
, 
vÆ
, 
Êags
, 
ba£
, 
width
,

457 
¥ec
);

458 
q
 +
sz
;

459 
o
 +
sz
;

463 
ˇrg
 = ()
	`va_¨g
(
≠
, );

464 
ßrg
 = &
ˇrg
;

465 
¶í
 = 1;

466 
is_°rög
;

468 
ßrg
 = 
	`va_¨g
(
≠
, const *);

469 
ßrg
 = sarg ? sarg : "(null)";

470 
¶í
 = 
	`°æí
(
ßrg
);

471 
is_°rög
;

473 
is_°rög
:

475 
sch
;

476 
i
;

478 i‡(
¥ec
 !-1 && 
¶í
 >Örec)

479 
¶í
 = 
¥ec
;

481 i‡(
width
 > 
¶í
 && !(
Êags
 & 
FL_MINUS
)) {

482 
∑d
 =

483 (
Êags
 & 
FL_ZERO
) ? '0' : ' ';

484 
width
 > 
¶í
) {

485 
	`EMIT
(
∑d
);

486 
width
--;

489 
i
 = 
¶í
; i; i--) {

490 
sch
 = *
ßrg
++;

491 
	`EMIT
(
sch
);

493 i‡(
width
 > 
¶í
 && (
Êags
 & 
FL_MINUS
)) {

494 
width
 > 
¶í
) {

495 
	`EMIT
(' ');

496 
width
--;

504 
ønk
) {

505 
ønk_ch¨
:

506 *
	`va_¨g
(
≠
, sig√d *Ë
o
;

508 
ønk_sh‹t
:

509 *
	`va_¨g
(
≠
, sig√d *Ë
o
;

511 
ønk_öt
:

512 *
	`va_¨g
(
≠
, sig√d *Ë
o
;

514 
ønk_l⁄g
:

515 *
	`va_¨g
(
≠
, sig√d *Ë
o
;

518 
ønk_l⁄gl⁄g
:

519 *
	`va_¨g
(
≠
, signed *) =

520 
o
;

528 
	`EMIT
(
ch
);

537 i‡(
o
 < 
n
)

538 *
q
 = '\0';

539 i‡(
n
 > 0)

540 
buf„r
[
n
 - 1] = '\0';

542 
q
->
	`Föish
(q);

544  
o
;

545 
	}
}

	@src/common/memmove.c

8 
	~<°rög.h
>

10 *
	$memmove
(*
de°1
, c⁄° *
sour˚1
, 
size_t
 
Àngth
) {

11 *
de°
 = 
de°1
;

12 c⁄° *
sour˚
 = 
sour˚1
;

13 *
d0
 = 
de°
;

14 i‡(
sour˚
 < 
de°
)

16 
sour˚
 +
Àngth
, 
de°
 +=Üength;Üength; --length)

17 *--
de°
 = *--
sour˚
;

18 i‡(
sour˚
 !
de°
) {

20 ; 
Àngth
; --length)

21 *
de°
++ = *
sour˚
++;

23  (*)
d0
;

24 
	}
}

	@src/common/string.c

17 
	~<fmtout.h
>

18 
	~<°rög.h
>

20 *
MÆloc
(
size_t
 
size
);

22 *
	$mem£t
(*
s
, 
c
, 
size_t
 
n
) {

23 *
p
 = (*)
s
;

25 
n
 > 0) {

26 *
p
++ = ()
c
;

27 --
n
;

30  
s
;

31 
	}
}

33 *
	$mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
) {

34 *
d
 = (*)
d°
;

35 c⁄° *
s
 = (c⁄° *)
§c
;

37 
n
 > 0) {

38 *
d
++ = *
s
++;

39 --
n
;

42  
d°
;

43 
	}
}

45 
	$memcmp
(c⁄° *
s1_
, c⁄° *
s2_
, 
size_t
 
n
) {

46 c⁄° sig√d *
s1
 = 
s1_
, *
s2
 = 
s2_
;

48 
n
 > 0) {

49 
cmp
 = *
s1
 - *
s2
;

50 i‡(
cmp
 != 0)

51  
cmp
;

52 ++
s1
;

53 ++
s2
;

54 --
n
;

58 
	}
}

60 
size_t
 
	$°æí
(c⁄° *
s
) {

61 
size_t
 
Àn
 = 0;

62 *
s
++ != '\0')

63 ++
Àn
;

64  
Àn
;

65 
	}
}

75 
size_t
 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
maxÀn
) {

76 
size_t
 
Àn
 = 0;

77 
Àn
 < 
maxÀn
 && *
s
++ != '\0')

78 ++
Àn
;

79  
Àn
;

80 
	}
}

82 
	$°rcmp
(c⁄° *
s1
, c⁄° *
s2
) {

84 
cmp
 = *
s1
 - *
s2
;

85 i‡(
cmp
 !0 || *
s1
 ='\0' || *
s2
 == '\0')

86  
cmp
;

87 ++
s1
;

88 ++
s2
;

90 
	}
}

92 
	$°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
limô
) {

93 
size_t
 
i
 = 0;

94 
i
 < 
limô
) {

95 
cmp
 = *
s1
 - *
s2
;

96 i‡(
cmp
 !0 || *
s1
 ='\0' || *
s2
 == '\0')

97  
cmp
;

98 ++
s1
;

99 ++
s2
;

100 ++
i
;

105 
	}
}

107 *
	$°rˇt
(*
s1
, c⁄° *
s2
) {

108 *
t1
;

110 
t1
 = 
s1
;

111 *
s1
)

112 
s1
++;

113 *
s2
)

114 *
s1
++ = *
s2
++;

115 *
s1
 = '\0';

117  
t1
;

118 
	}
}

120 *
	$°r˝y
(*
de°
, c⁄° *
§c
) {

121 *
ªt
 = 
de°
;

123 *
§c
) {

124 *
de°
++ = *
§c
++;

126 *
de°
 = '\0';

128  
ªt
;

129 
	}
}

131 *
	$°∫˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
limô
) {

132 *
ªt
 = 
de°
;

134 *
§c
 !'\0' && 
limô
 > 0) {

135 *
de°
++ = *
§c
++;

136 --
limô
;

138 i‡(
limô
 > 0)

139 *
de°
 = '\0';

141  
ªt
;

142 
	}
}

144 *
	$°rdup
(c⁄° *
s1
) {

145 *
ªt
;

147 
ªt
 = 
	`MÆloc
(
	`°æí
(
s1
) + 1);

148 
	`°r˝y
(
ªt
, 
s1
);

150  
ªt
;

151 
	}
}

153 
	$©oi
(c⁄° *
buf
) {

154 
ªt
 = 0;

155 
√g©e
 = 1;

157 i‡(*
buf
 == '-') {

158 
√g©e
 = -1;

159 
buf
++;

161 *
buf
 >= '0' && *buf <= '9') {

162 
ªt
 *= 10;

163 
ªt
 +*
buf
 - '0';

164 
buf
++;

167  
√g©e
 * 
ªt
;

168 
	}
}

170 *
	$°rchr
(c⁄° *
s
, 
c
) {

171 *
s
 != '\0') {

172 i‡(*
s
 =
c
)

173  (*)
s
;

174 ++
s
;

177 
	}
}

179 *
	$°ºchr
(c⁄° *
s
, 
c
) {

180 
size_t
 
Àn
 = 
	`°æí
(
s
);

181 c⁄° *
p
 = 
s
 + 
Àn
;

183 
p
 > 
s
) {

184 --
p
;

185 i‡(*
p
 =
c
)

186  (*)
p
;

189 
	}
}

191 *
	$°Ωbrk
(c⁄° *
s
, c⁄° *
ac˚±
) {

192 
size_t
 
£tLí
 = 
	`°æí
(
ac˚±
);

194 *
s
 != '\0') {

195 
size_t
 
i
;

196 
i
 = 0; i < 
£tLí
; ++i) {

197 i‡(*
s
 =
ac˚±
[
i
])

198  (*)
s
;

200 ++
s
;

204 
	}
}

206 
	sSåög_Ouçut_Sök
 {

207 
Ouçut_Sök
 
	mo
;

208 *
	ms
;

209 
size_t
 
	mn
, 
	msize
;

212 
	$Såög_Emô
(
Ouçut_Sök
 *
o_
, 
ch
) {

213 
Såög_Ouçut_Sök
 *
o
 = (Såög_Ouçut_Sök *)
o_
;

215 i‡(
o
->
n
 < o->
size
) {

216 *(
o
->
s
Ë
ch
;

217 
o
->
s
++;

218 ++(
o
->
n
);

220 
	}
}

222 
	$Såög_Föish
(
Ouçut_Sök
 *
o_
) {

223 
Såög_Ouçut_Sök
 *
o
 = (Såög_Ouçut_Sök *)
o_
;

225 i‡(
o
->
n
 < o->
size
)

226 *(
o
->
s
) = '\0';

232 *(
o
->
s
 - 1) = '\0';

233 
	}
}

235 
	$¢¥ötf
(*
s
, 
size_t
 
size
, c⁄° *
fmt
, ...) {

236 
Såög_Ouçut_Sök
 
sök
;

237 
rc
;

238 
va_li°
 
¨gs
;

241 
sök
.
o
.
Emô
 = &
Såög_Emô
;

242 
sök
.
o
.
Föish
 = &
Såög_Föish
;

243 
sök
.
s
 = s;

244 
sök
.
n
 = 0;

245 
sök
.
size
 = size;

248 
	`va_°¨t
(
¨gs
, 
fmt
);

249 
rc
 = 
	`F‹m©_Ouçut
(&
sök
.
o
, 
fmt
, 
¨gs
);

250 
	`va_íd
(
¨gs
);

252  
rc
;

253 
	}
}

255 
	$tﬁowî
(
c
) {

256 i‡(
c
 >= 'A' && c <= 'Z') {

257  
c
 - 'A' + 'a';

259  
c
;

261 
	}
}

	@src/geekos/alarm.c

10 
	~<gìkos/timî.h
>

11 
	~<gìkos/Æ¨m.h
>

12 
	~<gìkos/mÆloc.h
>

13 
	~<gìkos/î∫o.h
>

14 
	~<gìkos/öt.h
>

15 
	~<gìkos/kthªad.h
>

17 #i‚de‡
NULL


18 
	#NULL
 ((*)0)

	)

21 
Spö_Lock_t
 
	gÆ¨mLock
;

23 
	#DEBUG_ALARM
(
x
...)

	)

25 
Aœrm_H™dÀr_Queue
 
	gs_Æ¨mWaôögQueue
;

26 
Aœrm_H™dÀr_Queue
 
	gs_Æ¨mPídögQueue
;

27 
Thªad_Queue
 
	gs_thªadQueue
;

29 
ölöe
 
	$CÆc_Ticks_Pî_MS
(
mûli£c⁄ds
) {

30 
ticks
 = 
TICKS_PER_MS
 * 
mûli£c⁄ds
;

31 
åunc
 = ()
ticks
;

32  (((
ticks
 - 
åunc
) > 0) ?Årunc + 1 :Årunc);

33 
	}
}

35 
Aœrm_Evít
 *
	$Aœrm_Föd_In_Queue_By_ID
(
Aœrm_H™dÀr_Queue


36 *
queue
, 
id
) {

37 
Aœrm_Evít
 *
Æ¨m
;

38 
Æ¨m
 = 
	`Gë_Fr⁄t_Of_Aœrm_H™dÀr_Queue
(
queue
);

39 
Æ¨m
 !0;áœrm = 
	`Gë_Next_In_Aœrm_H™dÀr_Queue
(alarm)) {

40 i‡(
Æ¨m
->
timîId
 =
id
) {

41  
Æ¨m
;

44  
NULL
;

45 
	}
}

47 *
_íd
;

48 
Aœrm_H™dÀr
(
ul⁄g_t
 
¨g
 
__©åibuã__
 ((
unu£d
))) {

49 
Aœrm_Evít
 *
	gÆ¨m
 = 
NULL
;

51 
DißbÀ_I¡îru±s
();

53 i‡(!
Is_Aœrm_H™dÀr_Queue_Em±y
(&
s_Æ¨mPídögQueue
)) {

55 
	gÆ¨m
 =

56 
Remove_From_Fr⁄t_Of_Aœrm_H™dÀr_Queue


57 (&
s_Æ¨mPídögQueue
);

58 
E«bÀ_I¡îru±s
();

60 
DEBUG_ALARM
("Æ: %∞", 
Æ¨m
);

61 
KASSERT0
(
Æ¨m
, "firstálarm handler in queue isÇull");

62 
KASSERT0
((*)
Æ¨m
 > (*)0x10,

64 
DEBUG_ALARM
("Æcb: %p(%pËC‹ê%d\n", 
Æ¨m
->
ˇŒback
,

65 
Æ¨m
->
d©a
, 
Gë_CPU_ID
());

66 i‡(
	g_íd
) {

67 
KASSERT0
((*)
Æ¨m
->
ˇŒback
 < 
_íd
,

70 
	gÆ¨m
->
ˇŒback
(
Æ¨m
->
d©a
);

72 
DißbÀ_I¡îru±s
();

73 
Fªe
(
Æ¨m
);

74 
E«bÀ_I¡îru±s
();

76 
Waô
(&
s_thªadQueue
);

77 
E«bÀ_I¡îru±s
();

82 
	$Sy°em_Timî_CÆlback
(
id
) {

83 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

84 
Aœrm_Evít
 *
Æ¨m
 =

85 
	`Aœrm_Föd_In_Queue_By_ID
(&
s_Æ¨mWaôögQueue
, 
id
);

86 i‡(
Æ¨m
 == 0)

89 
	`KASSERT0
((*)
Æ¨m
->
ˇŒback
, "alarm callback wasÇull");

90 i‡(
_íd
) {

91 
	`KASSERT0
((*)
Æ¨m
->
ˇŒback
 < 
_íd
,

95 
	`Remove_From_Aœrm_H™dÀr_Queue
(&
s_Æ¨mWaôögQueue
, 
Æ¨m
);

96 
	`C™˚l_Timî
(
id
);

100 i‡(!
	`Is_Membî_Of_Aœrm_H™dÀr_Queue
(&
s_Æ¨mPídögQueue
, 
Æ¨m
)) {

101 
	`Add_To_Fr⁄t_Of_Aœrm_H™dÀr_Queue
(&
s_Æ¨mPídögQueue
, 
Æ¨m
);

103 
	`Wake_Up
(&
s_thªadQueue
);

104 
	}
}

106 
	$Inô_Aœrm
() {

107 
	`Sèπ_Kî√l_Thªad
(
Aœrm_H™dÀr
, 0, 
PRIORITY_NORMAL
, 
Ál£
, "{Alarm}");

108 
	}
}

110 
	$Aœrm_Cª©e
(
Aœrm_CÆlback
 
ˇŒback
, *
d©a
,

111 
mûliSec⁄ds
) {

112 
Aœrm_Evít
 *
Æ¨mEvít
 = 
	`MÆloc
((Alarm_Event));

113 i‡(
Æ¨mEvít
 == 0)

114  
ENOMEM
;

116 
id
;

118 
Æ¨mEvít
->
ˇŒback
 = callback;

119 
Æ¨mEvít
->
d©a
 = data;

120 
Æ¨mEvít
->
thªad
 = 
CURRENT_THREAD
;

122 
	`DißbÀ_I¡îru±s
();

124 
id
 = 
	`Sèπ_Timî
(
	`CÆc_Ticks_Pî_MS
(
mûliSec⁄ds
), 
Sy°em_Timî_CÆlback
);

125 i‡(
id
 < 0) {

126 
	`E«bÀ_I¡îru±s
();

127 
	`DEBUG_ALARM
("In Alarm_Create, failedÅo Start_Timer\n");

131 
Æ¨mEvít
->
timîId
 = 
id
;

133 
	`Add_To_Fr⁄t_Of_Aœrm_H™dÀr_Queue
(&
s_Æ¨mWaôögQueue
, 
Æ¨mEvít
);

134 
	`E«bÀ_I¡îru±s
();

135  
id
;

137 
	}
}

139 
	$Aœrm_C™˚l_F‹_Thªad
(
Kî√l_Thªad
 *
thªad
) {

140 
Aœrm_Evít
 *
Æ¨m
, *
√xt
;

142 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

144 
Æ¨m
 = 
	`Gë_Fr⁄t_Of_Aœrm_H™dÀr_Queue
(&
s_Æ¨mWaôögQueue
);

145 
Æ¨m
 !0;áœrm = 
√xt
) {

146 
√xt
 = 
	`Gë_Next_In_Aœrm_H™dÀr_Queue
(
Æ¨m
);

147 i‡(
Æ¨m
->
thªad
 ==Åhread) {

148 
	`Remove_From_Aœrm_H™dÀr_Queue
(&
s_Æ¨mWaôögQueue
, 
Æ¨m
);

149 
	`Fªe
(
Æ¨m
);

154 
	}
}

156 
	$Aœrm_De°roy
(
id
) {

157 
	`DißbÀ_I¡îru±s
();

159 
Aœrm_Evít
 *
Æ¨m
 =

160 
	`Aœrm_Föd_In_Queue_By_ID
(&
s_Æ¨mWaôögQueue
, 
id
);

161 i‡(
Æ¨m
) {

162 
	`Remove_From_Aœrm_H™dÀr_Queue
(&
s_Æ¨mWaôögQueue
, 
Æ¨m
);

163 
	`C™˚l_Timî
(
id
);

164 
	`Fªe
(
Æ¨m
);

166 
Æ¨m
 = 
	`Aœrm_Föd_In_Queue_By_ID
(&
s_Æ¨mPídögQueue
, 
id
);

167 i‡(
Æ¨m
) {

168 
	`Remove_From_Aœrm_H™dÀr_Queue
(&
s_Æ¨mPídögQueue
, 
Æ¨m
);

169 
	`Fªe
(
Æ¨m
);

172 
	`E«bÀ_I¡îru±s
();

174 
	}
}

	@src/geekos/argblock.c

10 
	~<gìkos/kty≥s.h
>

11 
	~<gìkos/°rög.h
>

12 
	~<gìkos/¨gblock.h
>

19 
boﬁ
 
	$Is_S∑˚
(
c
) {

20  
c
 == ' ' || c == '\t' || c == '\n' || c == '\r';

21 
	}
}

28 c⁄° *
	$Skù_Whôe•a˚
(c⁄° *
s
) {

29 
	`Is_S∑˚
(*
s
))

30 ++
s
;

31  
s
;

32 
	}
}

39 
	$Gë_Argumít_Lí
(c⁄° *
¨g
) {

40 c⁄° *
s
 = 
¨g
;

41 
Àn
 = 0;

43 *
s
 !'\0' && !
	`Is_S∑˚
(*s)) {

44 ++
Àn
;

45 ++
s
;

47  
Àn
;

48 
	}
}

59 
	$Gë_Argumít_Block_Size
(c⁄° *
comm™d
, *
numArgs
,

60 
ul⁄g_t
 * 
¨gBlockSize
) {

61 
ul⁄g_t
 
size
 = 0;

62 
¨gCou¡
 = 0;

63 c⁄° *
s
 = 
comm™d
;

65 
size
 += ();

66 
size
 += (**);

73 
Àn
;

75 
s
 = 
	`Skù_Whôe•a˚
(s);

77 i‡(*
s
 == '\0')

79 
Àn
 = 
	`Gë_Argumít_Lí
(
s
);

80 
s
 +
Àn
;

82 
size
 += (*);

83 
size
 +
Àn
 + 1;

84 ++
¨gCou¡
;

88 
size
 += (*);

90 *
numArgs
 = 
¨gCou¡
;

91 *
¨gBlockSize
 = 
size
;

94 
	}
}

108 
	$F‹m©_Argumít_Block
(*
¨gBlock
, 
numArgs
,

109 
ul⁄g_t
 
u£rAddªss
, c⁄° *
comm™d
) {

110 
Àn
;

111 
ul⁄g_t
 *
¨gv
;

112 *
d°
 = 
¨gBlock
;

113 c⁄° *
s
 = 
comm™d
;

116 *(*)
d°
 = 
numArgs
;

117 
d°
 += ();

123 *(
ul⁄g_t
 *Ë
d°
 = 
u£rAddªss
 + (
Argumít_Block
);

124 
d°
 += (**);

127 
¨gv
 = (
ul⁄g_t
 *Ë
d°
;

128 
d°
 +(
numArgs
 + 1) * (*);

132 
s
 = 
	`Skù_Whôe•a˚
(s);

133 i‡(*
s
 == '\0')

135 *
¨gv
++ = 
u£rAddªss
 + (
d°
 - 
¨gBlock
);

137 
Àn
 = 
	`Gë_Argumít_Lí
(
s
);

138 
	`mem˝y
(
d°
, 
s
, 
Àn
);

139 
d°
 +
Àn
;

140 *
d°
++ = '\0';

142 
s
 +
Àn
;

146 *
¨gv
++ = 0;

147 
	}
}

	@src/geekos/bitset.c

15 
	~<gìkos/kas£π.h
>

16 
	~<gìkos/mÆloc.h
>

17 
	~<gìkos/bô£t.h
>

18 
	~<gìkos/°rög.h
>

19 
	~<libc/c⁄io.h
>

21 
	#FIND_OFFSET_AND_BIT
(
bôPos
,
off£t
,
bô
) \

23 
off£t
 = 
bôPos
 / 8; \

24 
bô
 = 
bôPos
 % 8; \

25 } 0)

	)

27 
	#FIND_NUM_BYTES
(
tŸÆBôs
) \

28 ((
tŸÆBôs
 / 8Ë+ (—ŸÆBô†% 8 !0Ë? 1 : 0))

	)

30 *
	$Cª©e_Bô_Së
(
uöt_t
 
tŸÆBôs
) {

31 
ul⁄g_t
 
numByãs
;

32 *
bôSë
;

34 
numByãs
 = 
	`FIND_NUM_BYTES
(
tŸÆBôs
);

36 
bôSë
 = 
	`MÆloc
(
numByãs
);

37 i‡(
bôSë
 != 0)

38 
	`mem£t
(
bôSë
, '\0', 
numByãs
);

40 
	`Pröt
("malloc failed\n");

42  
bôSë
;

43 
	}
}

45 
	$Së_Bô
(*
bôSë
, 
uöt_t
 
bôPos
) {

46 
ul⁄g_t
 
off£t
, 
bô
;

48 
	`FIND_OFFSET_AND_BIT
(
bôPos
, 
off£t
, 
bô
);

49 ((
uch¨_t
 *Ë
bôSë
)[
off£t
] |(1 << 
bô
);

50 
	}
}

52 
	$CÀ¨_Bô
(*
bôSë
, 
uöt_t
 
bôPos
) {

53 
ul⁄g_t
 
off£t
, 
bô
;

55 
	`FIND_OFFSET_AND_BIT
(
bôPos
, 
off£t
, 
bô
);

56 ((
uch¨_t
 *Ë
bôSë
)[
off£t
] &~(1 << 
bô
);

57 
	}
}

59 
boﬁ
 
	$Is_Bô_Së
(*
bôSë
, 
uöt_t
 
bôPos
) {

60 
ul⁄g_t
 
off£t
, 
bô
;

62 
	`FIND_OFFSET_AND_BIT
(
bôPos
, 
off£t
, 
bô
);

63  (((
uch¨_t
 *Ë
bôSë
)[
off£t
] & (1 << 
bô
)) != 0;

64 
	}
}

66 
	$Föd_Fú°_Fªe_Bô
(*
bôSë
, 
ul⁄g_t
 
tŸÆBôs
) {

67 
uöt_t
 
numByãs
 = 
	`FIND_NUM_BYTES
(
tŸÆBôs
);

68 
ul⁄g_t
 
off£t
;

69 
uch¨_t
 *
bôs
 = (uch¨_à*Ë
bôSë
;

71 
off£t
 = 0; off£à< 
numByãs
; ++offset) {

72 i‡(
bôs
[
off£t
] != 0xff) {

73 
uöt_t
 
bô
;

74 
bô
 = 0; bit < 8; ++bit) {

75 i‡((
bôs
[
off£t
] & (1 << 
bô
)) == 0)

76  (
off£t
 * 8Ë+ 
bô
;

78 #ifde‡
GEEKOS


80 
	`KASSERT
(
Ál£
);

86 
	}
}

91 
	$Föd_Fú°_N_Fªe
(*
bôSë
, 
uöt_t
 
runLígth
, 
ul⁄g_t
 
tŸÆBôs
) {

92 
uöt_t
 
i
, 
j
;

94 
i
 = 0; i < 
tŸÆBôs
 - 
runLígth
; i++) {

95 i‡(!
	`Is_Bô_Së
(
bôSë
, 
i
)) {

96 
j
 = 1; j < 
runLígth
; j++) {

97 i‡(
	`Is_Bô_Së
(
bôSë
, 
i
 + 
j
)) {

101 i‡(
j
 =
runLígth
) {

102  
i
;

107 
	}
}

109 
	$De°roy_Bô_Së
(*
bôSë
) {

110 
	`Fªe
(
bôSë
);

111 
	}
}

	@src/geekos/blockdev.c

10 
	~<gìkos/î∫o.h
>

11 
	~<gìkos/s¸ìn.h
>

12 
	~<gìkos/°rög.h
>

13 
	~<gìkos/mÆloc.h
>

14 
	~<gìkos/öt.h
>

15 
	~<gìkos/kthªad.h
>

16 
	~<gìkos/synch.h
>

17 
	~<gìkos/blockdev.h
>

20 #ifde‡
BLOCKDEV_DEBUG


21 
	#Debug
(
¨gs
...Ë
	`Pröt
◊rgs)

	)

23 
	#Debug
(
¨gs
...)

	)

26 
Spö_Lock_t
 
kthªadLock
;

35 
Muãx
 
	gs_blockdevLock
;

40 
DEFINE_LIST
(
Block_Devi˚_Li°
, 
Block_Devi˚
);

41 
IMPLEMENT_LIST
(
Block_Devi˚_Li°
, 
Block_Devi˚
);

47 
Block_Devi˚_Li°
 
	gs_devi˚Li°
;

54 
	$Do_Reque°
(
Block_Devi˚
 *
dev
, 
Reque°_Ty≥
 
ty≥
,

55 
blockNum
, *
buf
) {

56 
Block_Reque°
 *
ªque°
;

57 
rc
;

60 
	`Muãx_Lock
(&
s_blockdevLock
);

61 
ªque°
 = 
	`Cª©e_Reque°
(
dev
, 
ty≥
, 
blockNum
, 
buf
);

63 i‡(
ªque°
 == 0) {

65 
	`Muãx_U∆ock
(&
s_blockdevLock
);

66  
ENOMEM
;

69 
	`Po°_Reque°_And_Waô
(
ªque°
);

70 
rc
 = 
ªque°
->
îr‹Code
;

71 
	`Fªe
(
ªque°
);

72 
	`Muãx_U∆ock
(&
s_blockdevLock
);

73  
rc
;

74 
	}
}

86 
	$Regi°î_Block_Devi˚
(c⁄° *
«me
, 
Block_Devi˚_Ops
 *
›s
,

87 
unô
, *
drivîD©a
,

88 
Thªad_Queue
 *
waôQueue
,

89 
Block_Reque°_Li°
 *
ªque°Queue
) {

90 
Block_Devi˚
 *
dev
;

92 
	`KASSERT
(
›s
 != 0);

93 
	`KASSERT
(
waôQueue
 != 0);

94 
	`KASSERT
(
ªque°Queue
 != 0);

96 
dev
 = (
Block_Devi˚
 *)
	`MÆloc
((*dev));

97 i‡(
dev
 == 0)

98  
ENOMEM
;

100 
	`°r˝y
(
dev
->
«me
,Çame);

101 
dev
->
›s
 = ops;

102 
dev
->
unô
 = unit;

103 
dev
->
öU£
 = 
Ál£
;

104 
dev
->
drivîD©a
 = driverData;

105 
dev
->
waôQueue
 = waitQueue;

106 
dev
->
ªque°Queue
 =ÑequestQueue;

107 
dev
->
ªads
 = dev->
wrôes
 = 0;

109 
	`Muãx_Lock
(&
s_blockdevLock
);

111 
	`Debug
("Regi°îög block devi˚ %s\n", 
dev
->
«me
);

112 
	`Add_To_Back_Of_Block_Devi˚_Li°
(&
s_devi˚Li°
, 
dev
);

113 
	`Muãx_U∆ock
(&
s_blockdevLock
);

116 
	}
}

122 
	$O≥n_Block_Devi˚
(c⁄° *
«me
, 
Block_Devi˚
 **
pDev
) {

123 
Block_Devi˚
 *
dev
;

124 
rc
 = 0;

126 
	`Muãx_Lock
(&
s_blockdevLock
);

128 
dev
 = 
	`Gë_Fr⁄t_Of_Block_Devi˚_Li°
(&
s_devi˚Li°
);

129 
dev
 != 0) {

130 i‡(
	`°rcmp
(
dev
->
«me
,Çame) == 0)

132 
dev
 = 
	`Gë_Next_In_Block_Devi˚_Li°
(dev);

135 i‡(
dev
 == 0)

136 
rc
 = 
ENODEV
;

137 i‡(
dev
->
öU£
)

138 
rc
 = 
EBUSY
;

140 
rc
 = 
dev
->
›s
->
	`O≥n
(dev);

141 i‡(
rc
 == 0) {

142 *
pDev
 = 
dev
;

143 
dev
->
öU£
 = 
åue
;

147 
	`Muãx_U∆ock
(&
s_blockdevLock
);

149  
rc
;

150 
	}
}

156 
	$Clo£_Block_Devi˚
(
Block_Devi˚
 *
dev
) {

157 
rc
;

159 
	`Muãx_Lock
(&
s_blockdevLock
);

161 
	`KASSERT
(
dev
->
öU£
);

162 
rc
 = 
dev
->
›s
->
	`Clo£
(dev);

163 i‡(
rc
 == 0)

164 
dev
->
öU£
 = 
Ál£
;

166 
	`Muãx_U∆ock
(&
s_blockdevLock
);

168  
rc
;

169 
	}
}

174 
Block_Reque°
 *
	$Cª©e_Reque°
(
Block_Devi˚
 *
dev
,

175 
Reque°_Ty≥
 
ty≥
, 
blockNum
,

176 *
buf
) {

177 
Block_Reque°
 *
ªque°
 = 
	`MÆloc
((*request));

178 i‡(
ªque°
 != 0) {

179 
ªque°
->
dev
 = dev;

180 
ªque°
->
ty≥
 =Åype;

181 
ªque°
->
blockNum
 = blockNum;

182 
ªque°
->
buf
 = buf;

183 
ªque°
->
°©e
 = 
PENDING
;

184 
	`CÀ¨_Thªad_Queue
(&
ªque°
->
waôQueue
);

186  
ªque°
;

187 
	}
}

194 
	$Po°_Reque°_And_Waô
(
Block_Reque°
 *
ªque°
) {

195 
Block_Devi˚
 *
dev
;

197 
	`KASSERT
(
ªque°
 != 0);

199 
dev
 = 
ªque°
->dev;

200 
	`KASSERT
(
dev
 != 0);

203 
	`Debug
("Po°ög block devi˚Ñeque° [@%x]...\n", 
ªque°
);

204 
	`DißbÀ_I¡îru±s
();

205 
	`Spö_Lock
(&
kthªadLock
);

206 
	`Add_To_Back_Of_Block_Reque°_Li°
(
dev
->
ªque°Queue
, 
ªque°
);

207 
	`Wake_Up_Locked
(
dev
->
waôQueue
);

208 
	`Spö_U∆ock
(&
kthªadLock
);

209 
	`E«bÀ_I¡îru±s
();

212 
	`DißbÀ_I¡îru±s
();

213 
ªque°
->
°©e
 =
PENDING
) {

214 
	`Debug
("Waôög, sèã=%d\n", 
ªque°
->
°©e
);

215 
	`Waô
(&
ªque°
->
waôQueue
);

217 
	`Debug
("Wait completed!\n");

218 
	`E«bÀ_I¡îru±s
();

219 
	}
}

224 
Block_Reque°
 *
	$Dequeue_Reque°
(
Block_Reque°_Li°
 *
ªque°Queue
,

225 
Thªad_Queue
 *
waôQueue
) {

226 
Block_Reque°
 *
ªque°
;

228 
	`DißbÀ_I¡îru±s
();

229 
	`Is_Block_Reque°_Li°_Em±y
(
ªque°Queue
))

230 
	`Waô
(
waôQueue
);

231 
ªque°
 = 
	`Gë_Fr⁄t_Of_Block_Reque°_Li°
(
ªque°Queue
);

232 
	`Remove_From_Fr⁄t_Of_Block_Reque°_Li°
(
ªque°Queue
);

233 
	`E«bÀ_I¡îru±s
();

235  
ªque°
;

236 
	}
}

241 
	$NŸify_Reque°_Com∂ëi⁄
(
Block_Reque°
 *
ªque°
,

242 
Reque°_Sèã
 
°©e
, 
îr‹Code
) {

243 
	`DißbÀ_I¡îru±s
();

245 
ªque°
->
°©e
 = state;

246 
ªque°
->
îr‹Code
 =ÉrrorCode;

248 
	`Wake_Up
(&
ªque°
->
waôQueue
);

251 
	`E«bÀ_I¡îru±s
();

252 
	}
}

258 
	$Block_Ród
(
Block_Devi˚
 *
dev
, 
blockNum
, *
buf
) {

259 
	`KASSERT
(
dev
);

260 
	`KASSERT
(
buf
);

261 
dev
->
ªads
++;

262  
	`Do_Reque°
(
dev
, 
BLOCK_READ
, 
blockNum
, 
buf
);

263 
	}
}

269 
	$Block_Wrôe
(
Block_Devi˚
 *
dev
, 
blockNum
, *
buf
) {

270 
	`KASSERT
(
dev
);

271 
	`KASSERT
(
buf
);

272 
dev
->
wrôes
++;

273  
	`Do_Reque°
(
dev
, 
BLOCK_WRITE
, 
blockNum
, 
buf
);

274 
	}
}

279 
	$Gë_Num_Blocks
(
Block_Devi˚
 *
dev
) {

280  
dev
->
›s
->
	`Gë_Num_Blocks
(dev);

281 
	}
}

286 
	$Dump_Blockdev_Sèts
() {

287 
Block_Devi˚
 *
dev
;

288 
i
;

289 
	`Pröt
("Block Device Stats:\n");

290 
	`Muãx_Lock
(&
s_blockdevLock
);

291 
dev
 = 
	`Gë_Fr⁄t_Of_Block_Devi˚_Li°
(&
s_devi˚Li°
), 
i
 = 5;

292 
dev
 !0 && 
i
 > 0;

293 
dev
 = 
	`Gë_Next_In_Block_Devi˚_Li°
(dev), 
i
 -= 1) {

294 
	`Pröt
(" %s:Ñód %u wrŸê%u\n", 
dev
->
«me
, dev->
ªads
, dev->
wrôes
);

296 
	`Muãx_U∆ock
(&
s_blockdevLock
);

297 
	}
}

	@src/geekos/bufcache.c

10 
	~<gìkos/î∫o.h
>

11 
	~<gìkos/kas£π.h
>

12 
	~<gìkos/mem.h
>

13 
	~<gìkos/mÆloc.h
>

14 
	~<gìkos/blockdev.h
>

15 
	~<gìkos/bufˇche.h
>

20 
	#FS_BUFFER_CACHE_MAX_BLOCKS
 128

	)

26 
	gbufCacheDebug
 = 0;

27 
	#Debug
(
¨gs
...Ëi‡(
bufCacheDebug
Ë
	`Pröt
◊rgs)

	)

30 
	gnoEvi˘
 = 0;

36 
uöt_t
 
	$Gë_Num_Se˘‹s_Pî_FS_Block
(
FS_Buf„r_Cache
 *
ˇche
) {

37  (
ˇche
->
fsBlockSize
 / 
SECTOR_SIZE
);

38 
	}
}

43 
Do_Buf„r_IO
(
FS_Buf„r_Cache
 *
ˇche
, 
FS_Buf„r
 *
buf
,

44 (*
IO_Func
Ë(
Block_Devi˚
 * 
dev
,

45 
blockNum
, *
buf
)) {

46 
uöt_t
 
off£t
;

47 
£˘‹Cou¡
 = 0;

48 
blockNum
 = 
buf
->
fsBlockNum
 * 
	`Gë_Num_Se˘‹s_Pî_FS_Block
(
ˇche
);

49 *
±r
 = (*)
buf
->
d©a
;

51 
off£t
 = 0; off£à< 
ˇche
->
fsBlockSize
; off£à+
SECTOR_SIZE
) {

52 
rc
 = 
	`IO_Func
(
ˇche
->
dev
, 
blockNum
, 
±r
 + 
off£t
);

53 i‡(
rc
 != 0)

54  
rc
;

55 ++
£˘‹Cou¡
;

56 ++
blockNum
;

58 
	`KASSERT
(
off£t
 =
ˇche
->
fsBlockSize
);

59 
	`KASSERT
(
£˘‹Cou¡
 =
	`Gë_Num_Se˘‹s_Pî_FS_Block
(
ˇche
));

62 
	}
}

67 
	$Sync_Buf„r
(
FS_Buf„r_Cache
 *
ˇche
, 
FS_Buf„r
 *
buf
) {

68 
rc
 = 0;

70 
	`KASSERT
(
	`IS_HELD
(&
ˇche
->
lock
));

72 i‡(
buf
->
Êags
 & 
FS_BUFFER_DIRTY
) {

73 i‡((
rc
 = 
	`Do_Buf„r_IO
(
ˇche
, 
buf
, 
Block_Wrôe
)) == 0)

74 
buf
->
Êags
 &~(
FS_BUFFER_DIRTY
);

77  
rc
;

78 
	}
}

84 
	$Move_To_Fr⁄t
(
FS_Buf„r_Cache
 *
ˇche
,

85 
FS_Buf„r
 *
buf
) {

86 
	`Remove_From_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
, 
buf
);

87 
	`Add_To_Fr⁄t_Of_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
, 
buf
);

88 
	}
}

94 
	$Gë_Buf„r
(
FS_Buf„r_Cache
 *
ˇche
, 
ul⁄g_t
 
fsBlockNum
,

95 
FS_Buf„r
 **
pBuf
) {

96 
FS_Buf„r
 *
buf
, *
Ãu
 = 0;

97 
rc
;

99 
	`Debug
("Reque° block %lu\n", 
fsBlockNum
);

101 
	`KASSERT
(
	`IS_HELD
(&
ˇche
->
lock
));

108 
buf
 = 
	`Gë_Fr⁄t_Of_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
);

109 
buf
 != 0) {

110 i‡(
buf
->
fsBlockNum
 == fsBlockNum) {

111 
	`Debug
("Found block %lu\n", 
fsBlockNum
);

113 
buf
->
Êags
 & 
FS_BUFFER_INUSE
) {

114 
	`Debug
("Waôög f‹ block %lu\n", 
fsBlockNum
);

115 
	`C⁄d_Waô
(&
ˇche
->
c⁄d
, &ˇche->
lock
);

117 
d⁄e
;

121 i‡(!(
buf
->
Êags
 & 
FS_BUFFER_INUSE
))

122 
Ãu
 = 
buf
;

124 
buf
 = 
	`Gë_Next_In_FS_Buf„r_Li°
(buf);

131 i‡(
ˇche
->
numCached
 < 
FS_BUFFER_CACHE_MAX_BLOCKS
) {

132 
buf
 = (
FS_Buf„r
 *)
	`MÆloc
((*buf));

133 i‡(
buf
 != 0) {

134 
buf
->
d©a
 = 
	`AŒoc_Page
();

135 i‡(
buf
->
d©a
 == 0) {

136 
	`Fªe
(
buf
);

139 
buf
->
fsBlockNum
 = fsBlockNum;

140 
buf
->
Êags
 = 0;

141 
	`Add_To_Fr⁄t_Of_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
, 
buf
);

142 ++
ˇche
->
numCached
;

143 
ªadAndAcquúe
;

152 i‡(
Ãu
 == 0)

153  
ENOMEM
;

155 
	`KASSERT
(!
noEvi˘
);

158 i‡((
rc
 = 
	`Sync_Buf„r
(
ˇche
, 
Ãu
)) != 0)

159  
rc
;

162 
buf
 = 
Ãu
;

163 
buf
->
Êags
 = 0;

164 
buf
->
fsBlockNum
 = fsBlockNum;

165 
	`Move_To_Fr⁄t
(
ˇche
, 
buf
);

167 
ªadAndAcquúe
:

173 
	`KASSERT
(!(
buf
->
Êags
 & 
FS_BUFFER_DIRTY
));

174 
	`KASSERT
(
	`Gë_Fr⁄t_Of_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
Ë=
buf
);

177 i‡((
rc
 = 
	`Do_Buf„r_IO
(
ˇche
, 
buf
, 
Block_Ród
)) != 0)

178  
rc
;

180 
d⁄e
:

182 
buf
->
Êags
 |
FS_BUFFER_INUSE
;

185 
	`Debug
("Acquúed block %lu\n", 
fsBlockNum
);

186 *
pBuf
 = 
buf
;

188 
	}
}

193 
	$Sync_Cache
(
FS_Buf„r_Cache
 *
ˇche
) {

194 
rc
 = 0;

195 
FS_Buf„r
 *
buf
;

197 
	`KASSERT
(
	`IS_HELD
(&
ˇche
->
lock
));

199 
buf
 = 
	`Gë_Fr⁄t_Of_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
);

200 
buf
 != 0) {

201 i‡((
rc
 = 
	`Sync_Buf„r
(
ˇche
, 
buf
)) != 0)

203 
buf
 = 
	`Gë_Next_In_FS_Buf„r_Li°
(buf);

206  
rc
;

207 
	}
}

212 
	$Fªe_Buf„r
(
FS_Buf„r
 *
buf
) {

213 
	`KASSERT
(!(
buf
->
Êags
 & (
FS_BUFFER_DIRTY
 | 
FS_BUFFER_INUSE
)));

214 
	`Fªe_Page
(
buf
->
d©a
);

215 
	`Fªe
(
buf
);

216 
	}
}

225 
FS_Buf„r_Cache
 *
	$Cª©e_FS_Buf„r_Cache
(
Block_Devi˚
 *
dev
,

226 
uöt_t
 
fsBlockSize
) {

227 
FS_Buf„r_Cache
 *
ˇche
;

229 
	`KASSERT
(
dev
 != 0);

230 
	`KASSERT
(
dev
->
öU£
);

236 
	`KASSERT
(
fsBlockSize
 <
PAGE_SIZE
);

237 
	`KASSERT
(
fsBlockSize
 > 0);

239 
ˇche
 = (
FS_Buf„r_Cache
 *)
	`MÆloc
((*cache));

240 i‡(
ˇche
 == 0)

243 
ˇche
->
dev
 = dev;

244 
ˇche
->
fsBlockSize
 = fsBlockSize;

245 
ˇche
->
numCached
 = 0;

246 
	`CÀ¨_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
);

247 
	`Muãx_Inô
(&
ˇche
->
lock
);

248 
	`C⁄d_Inô
(&
ˇche
->
c⁄d
);

250  
ˇche
;

251 
	}
}

257 
	$Sync_FS_Buf„r_Cache
(
FS_Buf„r_Cache
 *
ˇche
) {

258 
rc
;

260 
	`Muãx_Lock
(&
ˇche
->
lock
);

261 
rc
 = 
	`Sync_Cache
(
ˇche
);

262 
	`Muãx_U∆ock
(&
ˇche
->
lock
);

264  
rc
;

265 
	}
}

272 
	$De°roy_FS_Buf„r_Cache
(
FS_Buf„r_Cache
 *
ˇche
) {

273 
rc
;

274 
FS_Buf„r
 *
buf
;

276 
	`Muãx_Lock
(&
ˇche
->
lock
);

279 
rc
 = 
	`Sync_Cache
(
ˇche
);

282 
buf
 = 
	`Gë_Fr⁄t_Of_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
);

283 
buf
 != 0) {

284 
FS_Buf„r
 *
√xt
 = 
	`Gë_Next_In_FS_Buf„r_Li°
(
buf
);

285 
	`Fªe_Buf„r
(
buf
);

286 
buf
 = 
√xt
;

288 
	`CÀ¨_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
);

290 
	`Muãx_U∆ock
(&
ˇche
->
lock
);

293 
	`Fªe
(
ˇche
);

295  
rc
;

296 
	}
}

301 
	$Gë_FS_Buf„r
(
FS_Buf„r_Cache
 *
ˇche
, 
ul⁄g_t
 
fsBlockNum
,

302 
FS_Buf„r
 **
pBuf
) {

303 
rc
;

305 
	`KASSERT0
(
ˇche
 !
NULL
, "Null FS_Buffer_CacheÖassedÅo Get_FS_Buffer.");

306 
	`KASSERT0
(
pBuf
 !
NULL
,

309 
	`Muãx_Lock
(&
ˇche
->
lock
);

310 
rc
 = 
	`Gë_Buf„r
(
ˇche
, 
fsBlockNum
, 
pBuf
);

311 
	`Muãx_U∆ock
(&
ˇche
->
lock
);

313  
rc
;

314 
	}
}

319 
	$Modify_FS_Buf„r
(
FS_Buf„r_Cache
 *
ˇche
, 
FS_Buf„r
 *
buf
) {

320 
	`KASSERT0
(
ˇche
 !
NULL
, "Null FS_Buffer_CacheÖassedÅo Modify_FS_Buffer.");

321 
	`KASSERT0
(
buf
 !
NULL
, "Null FS_BufferÖassedÅo Modify_FS_Buffer.");

323 
	`KASSERT
(
buf
->
Êags
 & 
FS_BUFFER_INUSE
);

324 
buf
->
Êags
 |
FS_BUFFER_DIRTY
;

325 
	}
}

331 
	$Sync_FS_Buf„r
(
FS_Buf„r_Cache
 *
ˇche
, 
FS_Buf„r
 *
buf
) {

332 
rc
;

334 
	`KASSERT
(
buf
->
Êags
 & 
FS_BUFFER_INUSE
);

336 
	`Muãx_Lock
(&
ˇche
->
lock
);

337 
rc
 = 
	`Sync_Buf„r
(
ˇche
, 
buf
);

338 
	`Muãx_U∆ock
(&
ˇche
->
lock
);

340  
rc
;

341 
	}
}

346 
	$Rñó£_FS_Buf„r
(
FS_Buf„r_Cache
 *
ˇche
, 
FS_Buf„r
 *
buf
) {

347 
rc
 = 0;

349 
	`KASSERT
(
buf
->
Êags
 & 
FS_BUFFER_INUSE
);

351 
	`Muãx_Lock
(&
ˇche
->
lock
);

358 i‡(
rc
 == 0) {

359 
buf
->
Êags
 &~(
FS_BUFFER_INUSE
);

360 
	`C⁄d_Brﬂdˇ°
(&
ˇche
->
c⁄d
);

362 
	`Debug
("Rñó£d block %lu\n", 
buf
->
fsBlockNum
);

364 
	`Muãx_U∆ock
(&
ˇche
->
lock
);

366  
rc
;

367 
	}
}

	@src/geekos/cfs.c

13 
	~<limôs.h
>

14 
	~<˘y≥.h
>

15 
	~<gìkos/î∫o.h
>

16 
	~<gìkos/kas£π.h
>

17 
	~<gìkos/s¸ìn.h
>

18 
	~<gìkos/mÆloc.h
>

19 
	~<gìkos/°rög.h
>

20 
	~<gìkos/bô£t.h
>

21 
	~<gìkos/synch.h
>

22 
	~<gìkos/bufˇche.h
>

23 
	~<gìkos/li°.h
>

24 
	~<gìkos/cfs.h
>

25 
	~<gìkos/vfs.h
>

26 
	~<gìkos/°rög.h
>

27 
	~<gìkos/¥oje˘s.h
>

28 
	~<gìkos/mem.h
>

38 
	$CFS_F‹m©
(
Block_Devi˚
 *
blockDev
) {

39 
	`TODO_P
(
PROJECT_CFS
, "chameleon file system Format operation");

40  
EUNSUPPORTED
;

41 
	}
}

47 
	$CFS_Mou¡
(
Mou¡_Poöt
 *
mou¡Poöt
) {

48 
	`TODO_P
(
PROJECT_CFS
, "chameleon file system Mount operation");

49  
EUNSUPPORTED
;

50 
	}
}

55 
	$CFS_FSèt
(
Fûe
 *
fûe
, 
VFS_Fûe_Sèt
 *
°©
) {

56 
	`TODO_P
(
PROJECT_CFS
, "chameleon file system FStat operation");

57  
EUNSUPPORTED
;

58 
	}
}

66 
	$CFS_O≥n
(
Mou¡_Poöt
 *
mp
, c⁄° *
∑th
, 
mode
,

67 
Fûe
 **
pFûe
) {

68 
	`TODO_P
(
PROJECT_CFS
, "chameleon file system Open operation");

69  
EUNSUPPORTED
;

70 
	}
}

76 
	$CFS_Ród
(
Fûe
 *
fûe
, *
±r
, 
ul⁄g_t
 
numByãs
) {

77 
	`TODO_P
(
PROJECT_CFS
, "chameleon file system Read operation");

78  
EUNSUPPORTED
;

79 
	}
}

85 
	$CFS_Wrôe
(
Fûe
 *
fûe
, *
±r
, 
ul⁄g_t
 
numByãs
) {

86 
	`TODO_P
(
PROJECT_CFS
, "chameleon file system Write operation");

87  
EUNSUPPORTED
;

88 
	}
}

93 
	$CFS_Sèt
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

94 
VFS_Fûe_Sèt
 *
°©
) {

95 
	`TODO_P
(
PROJECT_CFS
, "chameleon file system Stat operation");

96  
EUNSUPPORTED
;

97 
	}
}

103 
	$CFS_Sync
(
Mou¡_Poöt
 *
mou¡Poöt
) {

104 
	`TODO_P
(
PROJECT_CFS
, "chameleon file system Sync operation");

105  
EUNSUPPORTED
;

106 
	}
}

111 
	$CFS_Clo£
(
Fûe
 *
fûe
) {

112 
	`TODO_P
(
PROJECT_CFS
, "chameleon file system Close operation");

113  
EUNSUPPORTED
;

114 
	}
}

119 
	$CFS_Cª©e_Dúe˘‹y
(
Mou¡_Poöt
 *
mp
, c⁄° *
c⁄°_∑th
) {

120 
	`TODO_P
(
PROJECT_CFS
, "chameleon file system Create Directory operation");

121  
EUNSUPPORTED
;

122 
	}
}

127 
	$CFS_O≥n_Dúe˘‹y
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

128 
Fûe
 **
pDú
) {

129 
	`TODO_P
(
PROJECT_CFS
, "chameleon file system Open Directory operation");

130  
EUNSUPPORTED
;

131 
	}
}

136 
	$CFS_Sìk
(
Fûe
 *
fûe
, 
ul⁄g_t
 
pos
) {

137 
	`TODO_P
(
PROJECT_CFS
, "chameleon file system Seek operation");

138  
EUNSUPPORTED
;

139 
	}
}

146 
	$CFS_Dñëe
(
Mou¡_Poöt
 *
mp
, c⁄° *
c⁄°_∑th
, 
boﬁ
 
ªcursive
) {

147 
	`TODO_P
(
PROJECT_CFS
, "chameleon file system Delete operation");

148  
EUNSUPPORTED
;

149 
	}
}

151 
	$CFS_Ríame
(
Mou¡_Poöt
 *
mp
, c⁄° *
ﬁd∑th
,

152 c⁄° *
√w∑th
) {

153 
	`TODO_P
(
PROJECT_USER
, "chameleon file system Rename operation");

154  
EUNSUPPORTED
;

155 
	}
}

157 
	$CFS_Lök
(
Mou¡_Poöt
 *
mp
, c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
) {

158 
	`TODO_P
(
PROJECT_USER
, "chameleon file system Link operation");

159  
EUNSUPPORTED
;

160 
	}
}

162 
	$CFS_SymLök
(
Mou¡_Poöt
 *
mp
, c⁄° *
ﬁd∑th
,

163 c⁄° *
√w∑th
) {

164 
	`TODO_P
(
PROJECT_USER
, "chameleon file system SymLink operation");

165  
EUNSUPPORTED
;

166 
	}
}

168 
	$CFS_SëSëUid
(
Mou¡_Poöt
 *
mp
, c⁄° *
fûe
, 
£tuid
) {

169 
Fûe
 *
pFûe
;

171 
	`TODO_P
(
PROJECT_USER
, "chameleon file system SetSetUID operation");

172  
EUNSUPPORTED
;

173 
	}
}

175 
	$CFS_SëA˛
(
Mou¡_Poöt
 *
mp
, c⁄° *
fûe
, 
uid
,

176 
≥rmissi⁄s
) {

177 
	`TODO_P
(
PROJECT_USER
, "chameleon file system SetAcl operation");

178  
EUNSUPPORTED
;

179 
	}
}

184 
	$CFS_Ród_E¡ry
(
Fûe
 *
fûe
, 
VFS_Dú_E¡ry
 *
íåy
) {

185 
	`TODO_P
(
PROJECT_CFS
, "chameleon file system Read Directory operation");

186  
EUNSUPPORTED
;

187 
	}
}

189 
Fûesy°em_Ops
 
	gs_cfsFûesy°emOps
 = {

190 &
CFS_F‹m©
,

191 &
CFS_Mou¡
,

198 
	$Inô_CFS
() {

199 
	`Regi°î_Fûesy°em
("cfs", &
s_cfsFûesy°emOps
);

200 
	}
}

	@src/geekos/crc32.c

9 
	~<gìkos/¸c32.h
>

10 
	~<gìkos/kas£π.h
>

12 
	#POLYNOMIAL
 (
ul⁄g_t
)0xedb88320

	)

13 
ul⁄g_t
 
	g¸c_èbÀ
[256];

20 
	$Inô_CRC32
() {

21 
i
, 
j
;

22 
ul⁄g_t
 
h
 = 1;

23 
¸c_èbÀ
[0] = 0;

24 
i
 = 128; i; i >>= 1) {

25 
h
 = (h >> 1Ë^ ((h & 1Ë? 
POLYNOMIAL
 : 0);

27 
j
 = 0; j < 256; j +2 * 
i
)

28 
¸c_èbÀ
[
i
 + 
j
] = crc_èbÀ[j] ^ 
h
;

30 
	}
}

42 
ul⁄g_t
 
	$¸c32
(
ul⁄g_t
 
¸c
, c⁄° *
buf
, 
size_t
 
Àn
) {

43 
	`KASSERT
(
¸c_èbÀ
[255] != 0);

44 
¸c
 ^= 0xffffffff;

45 
Àn
--)

46 
¸c
 = (¸¯>> 8Ë^ 
¸c_èbÀ
[(¸¯^ *
buf
++) & 0xff];

47  
¸c
 ^ 0xffffffff;

48 
	}
}

	@src/geekos/dma.c

35 
	~<gìkos/s¸ìn.h
>

36 
	~<gìkos/ønge.h
>

37 
	~<gìkos/öt.h
>

38 
	~<gìkos/io.h
>

39 
	~<gìkos/dma.h
>

54 
	$VALID_CHANNEL
(
ch™
) (((chan) >= 0) && ((chan) < 8))

60 
	#DMA_MAX_ADDR
 0x1000000UL

	)

61 
	#VALID_MEM
(
°¨t
,
size
Ë
	`Check_R™ge_Undî
((
ul⁄g_t
)(°¨t),(size),
DMA_MAX_ADDR
)

	)

66 
	#DMA_BASE
 0x00

	)

67 
	#DMA_COMMAND_REG
 0x08

	)

68 
	#DMA_STATUS_REG
 0x08

	)

69 
	#DMA_REQUEST_REG
 0x09

	)

70 
	#DMA_MASK_ONE_REG
(
ch™
Ë(ch™<4 ? 0x0A : 0xD4Ë

	)

71 
	#DMA_MODE_REG
(
ch™
Ë(ch™<4 ? 0x0B : 0xD6Ë

	)

72 
	#DMA_CLEAR_FF_REG
(
ch™
Ë(ch™<4 ? 0x0C : 0xD8Ë

	)

73 
	#DMA_MASTER_CLEAR_REG
 0x0D

	)

74 
	#DMA_TEMP_REG
 0x0D

	)

75 
	#DMA_CLEAR_MASK_REG
 0x0E

	)

76 
	#DMA_MASK_ALL_REG
 0x0F

	)

84 
	#DMA_ADDR_REG
(
ch™
Ë(ch™<4 ? (((ch™Ë& 0x3)<<1Ë: (0xC0 | ((ch™Ë& 0x3Ë<<2Ë)

	)

87 
	#DMA_COUNT_REG
(
ch™
Ë(
	`DMA_ADDR_REG
(ch™Ë+ (ch™<4 ? 1 : 2))

	)

92 
	#DMA_MASK_ENABLE
 (1<<2Ë

	)

97 
	#DMA_MODE_SINGLE
 0x40

	)

98 
	#DMA_MODE_CASCADE
 0xC0

	)

99 
	#DMA_MODE_READ
 0x04

	)

100 
	#DMA_MODE_WRITE
 0x08

	)

105 c⁄° 
uch¨_t
 
s_dmaPageRegi°îLi°
[] = {

114 
	}
};

116 
	#DMA_PAGE_REG
(
ch™
Ë(
s_dmaPageRegi°îLi°
[ch™]Ë

	)

118 
	#IS_RESERVED
(
ch™
Ë((
s_Æloˇãd
 & (1 << (ch™))Ë!0)

	)

121 #ifde‡
DEBUG_DMA


122 
	#Debug
(
¨gs
...Ë
	`Pröt
◊rgs)

	)

124 
	#Debug
(
¨gs
...)

	)

131 
uch¨_t
 
	gs_Æloˇãd
;

140 
	$Inô_DMA
() {

141 
	`Pröt
("Initializing DMA Controller...\n");

144 
	`Out_Byã
(
DMA_MASTER_CLEAR_REG
, 0);

145 
	}
}

152 
boﬁ
 
	$Re£rve_DMA
(
ch™
) {

153 
boﬁ
 
iÊag
 = 
	`Begö_I¡_Atomic
();

154 
boﬁ
 
ªsu…
 = 
Ál£
;

156 
	`KASSERT
(
	`VALID_CHANNEL
(
ch™
));

158 i‡(!
	`IS_RESERVED
(
ch™
)) {

160 
	`Out_Byã
(
	`DMA_MASK_ONE_REG
(
ch™
), chan & 3);

163 
s_Æloˇãd
 |(1 << 
ch™
);

164 
ªsu…
 = 
åue
;

167 
	`End_I¡_Atomic
(
iÊag
);

169  
ªsu…
;

170 
	}
}

179 
	$Sëup_DMA
(
DMA_Dúe˘i⁄
 
dúe˘i⁄
, 
ch™
, *
addr_
,

180 
ul⁄g_t
 
size
) {

181 
uch¨_t
 
mode
 = 0;

182 
ul⁄g_t
 
addr
 = (ul⁄g_tË
addr_
;

185 
	`KASSERT
(
dúe˘i⁄
 =
DMA_READ
 || dúe˘i⁄ =
DMA_WRITE
);

186 
	`KASSERT
(
	`VALID_CHANNEL
(
ch™
));

187 
	`KASSERT
(
	`IS_RESERVED
(
ch™
));

188 
	`KASSERT
(
	`VALID_MEM
(
addr
, 
size
));

189 
	`KASSERT
(
size
 > 0);

191 
	`KASSERT0
((((
addr
 & 0xffffË=0 && 
size
 <= 65536)) ||

192 (
size
 <(0xfff‡- (
addr
 & 0xffff))),

196 
mode
 |
DMA_MODE_SINGLE
;

197 
mode
 |(
dúe˘i⁄
 =
DMA_READ
Ë? 
DMA_MODE_READ
 : 
DMA_MODE_WRITE
;

198 
mode
 |(
ch™
 & 3);

199 i‡(
ch™
 == 5)

200 
mode
 |= 0x10;

202 
	`Debug
("Setup_DMA(%s,%d,%x,%d)\n",

203 
dúe˘i⁄
 =
DMA_READ
 ? "DMA_READ" : "DMA_WRITE", 
ch™
, 
addr
, 
size
);

204 
	`Debug
("Sëup_DMA: mode=%02x\n", 
mode
);

205 
	`Debug
("DMA_ADDR_REG f‹ ch™√»i†%02x\n", 
	`DMA_ADDR_REG
(
ch™
));

206 
	`Debug
("DMA_PAGE_REG f‹ ch™√»i†%02x\n", 
	`DMA_PAGE_REG
(
ch™
));

207 
	`Debug
("DMA_COUNT_REG f‹ ch™√»i†%02x\n", 
	`DMA_COUNT_REG
(
ch™
));

210 
	`Mask_DMA
(
ch™
);

213 
	`Out_Byã
(
	`DMA_MODE_REG
(
ch™
), 
mode
);

216 
	`Out_Byã
(
	`DMA_CLEAR_FF_REG
(
ch™
), 0);

219 
	`Out_Byã
(
	`DMA_ADDR_REG
(
ch™
), 
addr
 & 0xFF);

220 
	`Out_Byã
(
	`DMA_ADDR_REG
(
ch™
), (
addr
 >> 8) & 0xFF);

223 
	`Out_Byã
(
	`DMA_PAGE_REG
(
ch™
), (
addr
 >> 16) & 0xFF);

229 i‡(
ch™
 > 4) {

230 
size
 >>= 1;

232 --
size
;

233 
	`Out_Byã
(
	`DMA_COUNT_REG
(
ch™
), 
size
 & 0xFF);

234 
	`Out_Byã
(
	`DMA_COUNT_REG
(
ch™
), (
size
 >> 8) & 0xFF);

237 
	`Unmask_DMA
(
ch™
);

238 
	}
}

245 
	$Mask_DMA
(
ch™
) {

246 
	`KASSERT
(
	`VALID_CHANNEL
(
ch™
));

247 
	`KASSERT
(
	`IS_RESERVED
(
ch™
));

249 
	`Out_Byã
(
	`DMA_MASK_ONE_REG
(
ch™
), (1 << 2) | (chan & 3));

250 
	}
}

257 
	$Unmask_DMA
(
ch™
) {

258 
	`KASSERT
(
	`VALID_CHANNEL
(
ch™
));

259 
	`KASSERT
(
	`IS_RESERVED
(
ch™
));

261 
	`Out_Byã
(
	`DMA_MASK_ONE_REG
(
ch™
), chan & 3);

262 
	}
}

	@src/geekos/elf.c

18 
	~<gìkos/î∫o.h
>

19 
	~<gìkos/kas£π.h
>

20 
	~<gìkos/kty≥s.h
>

21 
	~<gìkos/s¸ìn.h
>

22 
	~<gìkos/pÁt.h
>

23 
	~<gìkos/mÆloc.h
>

24 
	~<gìkos/°rög.h
>

25 
	~<gìkos/u£r.h
>

26 
	~<gìkos/fûeio.h
>

27 
	~<gìkos/ñf.h
>

29 
	~<gìkos/∑gög.h
>

31 
	gñfDebug
 = 0;

42 
	$P¨£_ELF_ExecuèbÀ
(*
exeFûeD©a
, 
ul⁄g_t
 
exeFûeLígth
,

43 
Exe_F‹m©
 *
exeF‹m©
) {

44 
ñfHódî
 *
hdr
;

45 
¥ogømHódî
 *
phdr
;

46 
i
;

48 
hdr
 = (
ñfHódî
 *Ë
exeFûeD©a
;

56 i‡(
exeFûeLígth
 < (
ñfHódî
) ||

57 
	`°∫cmp
(
exeFûeD©a
, "\x7F" "ELF", 4) != 0) {

58 i‡(
ñfDebug
)

59 
	`Pröt
("Notán ELFÉxecutable\n");

60  
ENOEXEC
;

63 i‡(
hdr
->
phnum
 > 
EXE_MAX_SEGMENTS
) {

64 i‡(
ñfDebug
)

65 
	`Pröt
("Toÿm™y segmít†(%dËö ELFÉxecuèbÀ\n", 
hdr
->
phnum
);

66  
ENOEXEC
;

69 i‡(
exeFûeLígth
 < 
hdr
->
phoff
 + (hdr->
phnum
 * (
¥ogømHódî
))) {

70 i‡(
ñfDebug
)

71 
	`Pröt
("NotÉnoughÑoom forÖrogram header\n");

72  
ENOEXEC
;

75 
exeF‹m©
->
numSegmíts
 = 
hdr
->
phnum
;

76 
exeF‹m©
->
íåyAddr
 = 
hdr
->
íåy
;

78 
phdr
 = (
¥ogømHódî
 *Ë(
exeFûeD©a
 + 
hdr
->
phoff
);

79 
i
 = 0; i < 
hdr
->
phnum
; ++i) {

80 
Exe_Segmít
 *
£gmít
 = &
exeF‹m©
->
£gmítLi°
[
i
];

86 
£gmít
->
off£tInFûe
 = 
phdr
[
i
].
off£t
;

87 
£gmít
->
ÀngthInFûe
 = 
phdr
[
i
].
fûeSize
;

88 
£gmít
->
°¨tAddªss
 = 
phdr
[
i
].
vaddr
;

89 
£gmít
->
sizeInMem‹y
 = 
phdr
[
i
].
memSize
;

91 i‡(
£gmít
->
ÀngthInFûe
 > segmít->
sizeInMem‹y
) {

92 i‡(
ñfDebug
)

93 
Pröt


95 
i
, 
£gmít
->
ÀngthInFûe
, segmít->
sizeInMem‹y
);

96  
ENOEXEC
;

103 
	}
}

	@src/geekos/floppy.c

10 
	~<gìkos/s¸ìn.h
>

11 
	~<gìkos/°rög.h
>

12 
	~<gìkos/mem.h
>

13 
	~<gìkos/mÆloc.h
>

14 
	~<gìkos/öt.h
>

15 
	~<gìkos/úq.h
>

16 
	~<gìkos/dma.h
>

17 
	~<gìkos/io.h
>

18 
	~<gìkos/timî.h
>

19 
	~<gìkos/kthªad.h
>

20 
	~<gìkos/blockdev.h
>

21 
	~<gìkos/Ê›py.h
>

58 
	#FDC_IRQ
 6

	)

63 
	#FDC_DMA
 2

	)

68 
	#FDC_BASE
 0x3F0

	)

69 
	#FDC_DOR_REG
 0x3F2

	)

70 
	#FDC_STATUS_REG
 0x3F4

	)

71 
	#FDC_DATA_RATE_SELECT_REG
 0x3F4

	)

72 
	#FDC_DATA_REG
 0x3F5

	)

77 
	#FDC_STATUS_MRQ
 (1 << 7)

	)

78 
	#FDC_STATUS_DIO
 (1 << 6)

	)

79 
	#FDC_STATUS_NDMA
 (1 << 5)

	)

80 
	#FDC_STATUS_BUSY
 (1 << 4)

	)

81 
	#FDC_STATUS_ACTIVE
(
drive
Ë(1 << (drive))

	)

82 
	#FDC_STATUS_READY_MASK
 (
FDC_STATUS_MRQ
 | 
FDC_STATUS_DIO
)

	)

83 
	#FDC_STATUS_READY_WRITE
 
FDC_STATUS_MRQ


	)

84 
	#FDC_STATUS_READY_READ
 (
FDC_STATUS_MRQ
 | 
FDC_STATUS_DIO
)

	)

89 
	#FDC_DOR_MOTOR
(
drive
Ë(1 << ((driveË+ 4))

	)

90 
	#FDC_DOR_DMA_ENABLE
 (1 << 3)

	)

91 
	#FDC_DOR_RESET_DISABLE
 (1 << 2)

	)

92 
	#FDC_DOR_DRIVE_SELECT
(
drive
Ë((driveË& 0x3)

	)

97 
	#FDC_COMMAND_CALIBRATE
 0x07

	)

98 
	#FDC_COMMAND_SENSE_INT_STATUS
 0x08

	)

99 
	#FDC_COMMAND_SEEK
 0x0F

	)

100 
	#FDC_COMMAND_WRITE_SECTOR
 0x05

	)

101 
	#FDC_COMMAND_READ_SECTOR
 0x06

	)

106 
	#FDC_MULTI_TRACK
 0x80

	)

107 
	#FDC_MFM
 0x40

	)

108 
	#FDC_SKIP_DELETED
 0x20

	)

113 
	#FDC_ST0_SEEK_END
 (1 << 5)

	)

114 
	#FDC_ST0_IS_SUCCESS
(
code
Ë((((codeË>> 6Ë& 0x3Ë=0)

	)

120 
	#CMOS_OUT
 0x70

	)

121 
	#CMOS_IN
 0x71

	)

122 
	#CMOS_FLOPPY_INDEX
 0x10

	)

124 íum { 
	mFLOPPY_READ
, 
	mFLOPPY_WRITE
 };

127 #ifde‡
FLOPPY_DEBUG


128 
	#Debug
(
¨gs
...Ë
	`Pröt
◊rgs)

	)

130 
	#Debug
(
¨gs
...)

	)

140 
	sFl›py_P¨amëîs
 {

141 
	mcylödîs
;

142 
	mhóds
;

143 
	m£˘‹s
;

144 
	m£˘‹SizeCode
;

145 
	mg≠LígthCode
;

147 
	#INVALID_FLOPPY_TYPE
 { -1, -1, -1, -1, -1 }

	)

153 
Fl›py_P¨amëîs
 
	gs_Ê›pyP¨amsTabÀ
[] = {

154 
INVALID_FLOPPY_TYPE
,

155 
INVALID_FLOPPY_TYPE
,

156 
INVALID_FLOPPY_TYPE
,

157 
INVALID_FLOPPY_TYPE
,

159 
INVALID_FLOPPY_TYPE
,

162 
	#NUM_FLOPPY_TYPES
 ((
s_Ê›pyP¨amsTabÀ
Ë/ (
Fl›py_P¨amëîs
))

	)

163 
	#IS_VALID_FLOPPY_TYPE
(
ty≥
) \

164 ((
ty≥
Ë< 
NUM_FLOPPY_TYPES
 && 
s_Ê›pyP¨amsTabÀ
[—y≥)].
cylödîs
 > 0)

	)

169 
	sFl›py_Drive
 {

170 
Fl›py_P¨amëîs
 *
	m∑øms
;

176 
Fl›py_Drive
 
	gs_driveTabÀ
[2];

182 
Thªad_Queue
 
	gs_Ê›pyI¡îru±WaôQueue
;

187 
uch¨_t
 *
	gs_å™s„rBuf
;

192 
Block_Reque°_Li°
 
	gs_Ê›pyReque°Queue
;

198 
Thªad_Queue
 
	gs_Ê›pyWaôQueue
;

207 
	$Fl›py_O≥n
(
Block_Devi˚
 *
dev
) {

208 
	`KASSERT
(!
dev
->
öU£
);

210 
	}
}

215 
	$Fl›py_Clo£
(
Block_Devi˚
 *
dev
) {

216 
	`KASSERT
(
dev
->
öU£
);

218 
	}
}

223 
	$Fl›py_Gë_Num_Blocks
(
Block_Devi˚
 *
dev
) {

224 
Fl›py_Drive
 *
drive
;

225 
Fl›py_P¨amëîs
 *
∑øms
;

227 
	`KASSERT
(
dev
->
unô
 >= 0 && dev->unit <= 1);

228 
drive
 = &
s_driveTabÀ
[
dev
->
unô
];

230 
∑øms
 = 
drive
->params;

231 
	`KASSERT
(
∑øms
 != 0);

233  
∑øms
->
cylödîs
 *Ö¨ams->
hóds
 *Ö¨ams->
£˘‹s
;

234 
	}
}

239 
Block_Devi˚_Ops
 
	gs_Ê›pyDevi˚Ops
 = {

240 
Fl›py_O≥n
,

241 
Fl›py_Clo£
,

242 
Fl›py_Gë_Num_Blocks
,

253 
	$Fl›py_I¡îru±_H™dÀr
(
I¡îru±_Sèã
 *
°©e
) {

254 
	`Begö_IRQ
(
°©e
);

255 
	`Wake_Up
(&
s_Ê›pyI¡îru±WaôQueue
);

256 
	`End_IRQ
(
°©e
);

257 
	}
}

263 
	$Sëup_Drive_P¨amëîs
(
drive
, 
ty≥
) {

264 i‡(
	`IS_VALID_FLOPPY_TYPE
(
ty≥
)) {

265 
Fl›py_P¨amëîs
 *
∑øms
 = &
s_Ê›pyP¨amsTabÀ
[
ty≥
];

266 
dev«me
[
BLOCKDEV_MAX_NAME_LEN
 + 1];

267 
rc
;

269 
	`¢¥ötf
(
dev«me
, (dev«me), "fd%d", 
drive
);

270 
	`Pröt
(" %s: cyl=%d, hóds=%d, se˘‹s=%d\n", 
dev«me
,

271 
∑øms
->
cylödîs
,Ö¨ams->
hóds
,Ö¨ams->
£˘‹s
);

272 
s_driveTabÀ
[
drive
].
∑øms
 =Öarams;

275 
rc
 = 
	`Regi°î_Block_Devi˚
(
dev«me
, &
s_Ê›pyDevi˚Ops
, 
drive
, 0,

276 &
s_Ê›pyWaôQueue
, &
s_Ê›pyReque°Queue
);

277 i‡(
rc
 != 0)

278 
	`Pröt
(" Eº‹: couldÇŸ cª©êblock devi˚ f‹ %s\n", 
dev«me
);

280 
	}
}

285 
	$LBA_To_CHS
(
Fl›py_Drive
 *
drive
, 
lba
, *
cylödî
,

286 *
hód
, *
£˘‹
) {

287 
Fl›py_P¨amëîs
 *
∑øms
 = 
drive
->params;

289 
	`KASSERT
(
∑øms
 != 0);

291 *
cylödî
 = 
lba
 / (
∑øms
->
hóds
 *Ö¨ams->
£˘‹s
);

292 *
hód
 = (
lba
 / 
∑øms
->
£˘‹s
Ë%Ö¨ams->
hóds
;

293 *
£˘‹
 = (
lba
 % 
∑øms
->
£˘‹s
) + 1;

295 
	`KASSERT
(*
cylödî
 >0 && *cylödî < 
∑øms
->
cylödîs
);

296 
	`KASSERT
(*
hód
 >0 && *hód < 
∑øms
->
hóds
);

297 
	`KASSERT
(*
£˘‹
 > 0 && *£˘‹ <
∑øms
->
£˘‹s
);

298 
	}
}

305 
	$Waô_F‹_MRQ
(
uch¨_t
 
ªadyVÆue
) {

306 
	`KASSERT
(
ªadyVÆue
 =
FDC_STATUS_READY_READ
 ||

307 
ªadyVÆue
 =
FDC_STATUS_READY_WRITE
);

310 (
	`In_Byã
(
FDC_STATUS_REG
Ë& 
FDC_STATUS_READY_MASK
Ë!
ªadyVÆue
);

313 
	}
}

318 
uch¨_t
 
	$Fl›py_In
() {

319 
	`Waô_F‹_MRQ
(
FDC_STATUS_READY_READ
);

320  
	`In_Byã
(
FDC_DATA_REG
);

321 
	}
}

326 
	$Fl›py_Out
(
uch¨_t
 
vÆ
) {

327 
	`Waô_F‹_MRQ
(
FDC_STATUS_READY_WRITE
);

328 
	`Out_Byã
(
FDC_DATA_REG
, 
vÆ
);

329 
	}
}

335 
	$Waô_F‹_I¡îru±
() {

336 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

339 
	`Waô
(&
s_Ê›pyI¡îru±WaôQueue
);

340 
	}
}

342 
	$Sí£_I¡îru±_Sètus
(
uch¨_t
 * 
°0
, uch¨_à* 
p˙
) {

343 
	`Fl›py_Out
(
FDC_COMMAND_SENSE_INT_STATUS
);

344 *
°0
 = 
	`Fl›py_In
();

345 *
p˙
 = 
	`Fl›py_In
();

346 
	}
}

351 
boﬁ
 
	$CÆibøã
(
drive
) {

352 
numAâem±s
 = 4;

353 
boﬁ
 
suc˚ss
 = 
Ál£
;

354 
uch¨_t
 
°0
, 
p˙
;

356 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

358 
numAâem±s
-- > 0) {

360 
	`Fl›py_Out
(
FDC_COMMAND_CALIBRATE
);

361 
	`Fl›py_Out
((
uch¨_t
Ë
drive
);

362 
	`Waô_F‹_I¡îru±
();

365 
	`Sí£_I¡îru±_Sètus
(&
°0
, &
p˙
);

366 
	`Debug
("CÆibøã: st0=%02x,Ö˙=%02x\n", 
°0
, 
p˙
);

367 i‡(
°0
 & 
FDC_ST0_SEEK_END
) {

368 
suc˚ss
 = 
åue
;

373 
	`Debug
("Drivê%d cÆibøti⁄ %s\n", 
drive
,

374 
suc˚ss
 ? "succeeded" : "failed");

375  
suc˚ss
;

376 
	}
}

378 
	$Sèπ_MŸ‹
(
drive
) {

379 
	`Out_Byã
(
FDC_DOR_REG
,

380 
	`FDC_DOR_MOTOR
(
drive
Ë| 
FDC_DOR_DMA_ENABLE
 | 
FDC_DOR_RESET_DISABLE


381 | 
	`FDC_DOR_DRIVE_SELECT
(0));

382 
	}
}

384 
St›_MŸ‹
(
drive
 
__©åibuã__
 ((
unu£d
))) {

385 
Out_Byã
(
FDC_DOR_REG
,

386 
FDC_DOR_DMA_ENABLE
 | 
FDC_DOR_RESET_DISABLE
 |

387 
FDC_DOR_DRIVE_SELECT
(0));

394 
boﬁ
 
	$Re£t_C⁄åﬁÀr
() {

396 
	`Out_Byã
(
FDC_DOR_REG
, 0);

403 
	`Sèπ_MŸ‹
(0);

405  
	`CÆibøã
(0);

406 
	}
}

408 
boﬁ
 
	$Fl›py_Sìk
(
drive
, 
cylödî
, 
hód
) {

409 
uch¨_t
 
°0
, 
p˙
;

410 
numAâem±s
 = 4;

411 
boﬁ
 
suc˚ss
 = 
Ál£
;

413 
	`Debug
("Fl›py_Sìk(%d,%d,%d)\n", 
drive
, 
cylödî
, 
hód
);

415 
numAâem±s
-- > 0) {

416 
	`Sèπ_MŸ‹
(
drive
);

419 
	`DißbÀ_I¡îru±s
();

421 
	`Fl›py_Out
(
FDC_COMMAND_SEEK
);

422 
	`Fl›py_Out
((
hód
 << 2Ë| (
drive
 & 3));

423 
	`Fl›py_Out
(
cylödî
 & 0xFF);

425 
	`Debug
("Seek: waiting for interrupt\n");

426 
	`Waô_F‹_I¡îru±
();

427 
	`Debug
("Seek: got interrupt\n");

429 
	`E«bÀ_I¡îru±s
();

431 
	`St›_MŸ‹
(
drive
);

433 
	`Sí£_I¡îru±_Sètus
(&
°0
, &
p˙
);

434 i‡(
°0
 & 
FDC_ST0_SEEK_END
) {

436 i‡(
p˙
 !
cylödî
) {

437 
	`Debug
("Seekárrivedát wrong cylinder\n");

439 
	`Debug
("Seek complete!\n");

440 
suc˚ss
 = 
åue
;

446  
suc˚ss
;

447 
	}
}

449 
	$Fl›py_Tøns„r
(
dúe˘i⁄
, 
driveNum
, 
blockNum
) {

450 
Fl›py_Drive
 *
drive
 = &
s_driveTabÀ
[
driveNum
];

451 
Fl›py_P¨amëîs
 *
∑øms
 = 
drive
->params;

452 
cylödî
, 
hód
, 
£˘‹
;

453 
DMA_Dúe˘i⁄
 
dmaDúe˘i⁄
 =

454 
dúe˘i⁄
 =
FLOPPY_READ
 ? 
DMA_READ
 : 
DMA_WRITE
;

455 
uch¨_t
 
comm™d
;

456 
uch¨_t
 
°0
, 
°1
, 
°2
;

457 
ªsu…
 = -1;

459 
	`KASSERT
(
driveNum
 == 0);

460 
	`KASSERT
(
dúe˘i⁄
 =
FLOPPY_READ
 || dúe˘i⁄ =
FLOPPY_WRITE
);

461 
	`KASSERT
(
∑øms
 != 0);

463 
	`LBA_To_CHS
(&
s_driveTabÀ
[
driveNum
], 
blockNum
, &
cylödî
, &
hód
, &
£˘‹
);

465 i‡(!
	`Fl›py_Sìk
(
driveNum
, 
cylödî
, 
hód
))

468 
	`DißbÀ_I¡îru±s
();

471 
	`Sëup_DMA
(
dmaDúe˘i⁄
, 
FDC_DMA
, 
s_å™s„rBuf
, 
SECTOR_SIZE
);

474 
	`Sèπ_MŸ‹
(
driveNum
);

480 
	`Mi¸o_Dñay
(8000);

482 i‡(
dúe˘i⁄
 =
FLOPPY_READ
)

483 
comm™d
 = 
FDC_COMMAND_READ_SECTOR
 | 
FDC_MFM
 | 
FDC_SKIP_DELETED
;

485 
comm™d
 = 
FDC_COMMAND_WRITE_SECTOR
 | 
FDC_MFM
;

488 
	`Fl›py_Out
(
comm™d
);

489 
	`Fl›py_Out
((
hód
 << 2Ë| (
driveNum
 & 3));

490 
	`Fl›py_Out
(
cylödî
);

491 
	`Fl›py_Out
(
hód
);

492 
	`Fl›py_Out
(
£˘‹
);

493 
	`Fl›py_Out
(
∑øms
->
£˘‹SizeCode
);

494 
	`Fl›py_Out
(
∑øms
->
£˘‹s
);

495 
	`Fl›py_Out
(
∑øms
->
g≠LígthCode
);

496 
	`Fl›py_Out
(0xFF);

499 
	`Waô_F‹_I¡îru±
();

500 
	`Debug
("Floppy_Transfer:Ñeceived interrupt!\n");

503 
°0
 = 
	`Fl›py_In
();

504 
°1
 = 
	`Fl›py_In
();

505 
°2
 = 
	`Fl›py_In
();

506 
	`Fl›py_In
();

507 
	`Fl›py_In
();

508 
	`Fl›py_In
();

509 
	`Fl›py_In
();

511 
	`St›_MŸ‹
(
driveNum
);

513 i‡(
	`FDC_ST0_IS_SUCCESS
(
°0
)) {

514 
	`Debug
("Floppy_Transfer: successfulÅransfer!\n");

515 
ªsu…
 = 0;

518 
	`E«bÀ_I¡îru±s
();

521  
ªsu…
;

522 
	}
}

524 
	$Fl›py_Ród
(
driveNum
, 
blockNum
, *
buf„r
) {

525 
rc
;

527 
	`Debug
("Fl›py_Ród(%d,%d,%x)\n", 
driveNum
, 
blockNum
, 
buf„r
);

529 #i‚de‡
NDEBUG


530 
	`mem£t
(
buf„r
, ()0xcd, 
SECTOR_SIZE
);

531 
	`mem£t
(
s_å™s„rBuf
, ()0xcd, 
SECTOR_SIZE
);

534 
rc
 = 
	`Fl›py_Tøns„r
(
FLOPPY_READ
, 
driveNum
, 
blockNum
);

536 i‡(
rc
 == 0) {

541 
	`mem˝y
(
buf„r
, 
s_å™s„rBuf
, 
SECTOR_SIZE
);

544  
rc
;

545 
	}
}

547 
	$Fl›py_Wrôe
(
driveNum
, 
blockNum
, *
buf„r
) {

548 
	`Debug
("Fl›py_Wrôe(%d,%d,%x)\n", 
driveNum
, 
blockNum
, 
buf„r
);

550 
	`mem˝y
(
s_å™s„rBuf
, 
buf„r
, 
SECTOR_SIZE
);

551  
	`Fl›py_Tøns„r
(
FLOPPY_WRITE
, 
driveNum
, 
blockNum
);

552 
	}
}

557 
Fl›py_Reque°_Thªad
(
ul⁄g_t
 
¨g
 
__©åibuã__
 ((
unu£d
))) {

558 
	grc
;

560 
Debug
("FRQ: FloppyÑequestÅhread starting...\n");

563 
Block_Reque°
 *
	gªque°
;

566 
Debug
("FRQ: RequestÅhread waiting foráÑequest\n");

567 
	gªque°
 = 
Dequeue_Reque°
(&
s_Ê›pyReque°Queue
, &
s_Ê›pyWaôQueue
);

568 
Debug
("FRQ: GŸá fl›pyÑeque° [@%x]\n", 
ªque°
);

569 
KASSERT
(
ªque°
->
ty≥
 =
BLOCK_READ
 ||Ñeque°->ty≥ =
BLOCK_WRITE
);

572 i‡(
	gªque°
->
	gty≥
 =
BLOCK_READ
)

573 
rc
 = 
Fl›py_Ród
(
ªque°
->
dev
->
unô
,Ñeque°->
blockNum
,

574 
ªque°
->
buf
);

576 
	grc
 = 
Fl›py_Wrôe
(
ªque°
->
dev
->
unô
,Ñeque°->
blockNum
,

577 
ªque°
->
buf
);

580 
Debug
("FRQ: NotifyingÑequestingÅhread...\n");

581 
NŸify_Reque°_Com∂ëi⁄
(
ªque°
, 
rc
 =0 ? 
COMPLETED
 : 
ERROR
,Ñc);

582 
Debug
("FRQ: Completed floppyÑequest\n");

593 
	$Inô_Fl›py
() {

594 
uch¨_t
 
Ê›pyByã
;

595 
boﬁ
 
ªady
 = 
Ál£
;

596 
boﬁ
 
good
;

598 
	`Pröt
("Initializing floppy controller...\n");

601 
s_å™s„rBuf
 = (
uch¨_t
 *Ë
	`AŒoc_Page
();

604 
	`Out_Byã
(
CMOS_OUT
, 
CMOS_FLOPPY_INDEX
);

605 
Ê›pyByã
 = 
	`In_Byã
(
CMOS_IN
);

606 
	`Sëup_Drive_P¨amëîs
(0, (
Ê›pyByã
 >> 4) & 0xF);

607 
	`Sëup_Drive_P¨amëîs
(1, 
Ê›pyByã
 & 0xF);

610 
	`In°Æl_IRQ
(
FDC_IRQ
, &
Fl›py_I¡îru±_H™dÀr
);

611 
	`E«bÀ_IRQ
(
FDC_IRQ
);

614 
	`DißbÀ_I¡îru±s
();

615 
good
 = 
	`Re£t_C⁄åﬁÀr
();

616 
	`E«bÀ_I¡îru±s
();

617 i‡(!
good
) {

618 
	`Pröt
(" FailedÅoÑeset controller!\n");

619 
d⁄e
;

623 i‡(!
	`Re£rve_DMA
(
FDC_DMA
)) {

624 
	`Pröt
(" FailedÅoÑeserve DMA channel\n");

625 
d⁄e
;

632 
ªady
 = 
åue
;

633 
	`Sèπ_Kî√l_Thªad
(
Fl›py_Reque°_Thªad
, 0, 
PRIORITY_NORMAL
, 
åue
,

637 
d⁄e
:

638 i‡(!
ªady
)

639 
	`Pröt
(" Floppy controller initialization FAILED\n");

641 
	`Pröt
(" Floppy controller initialization complete\n");

642 
	}
}

	@src/geekos/gdt.c

10 
	~<gìkos/kas£π.h
>

11 
	~<gìkos/£gmít.h
>

12 
	~<gìkos/öt.h
>

13 
	~<gìkos/tss.h
>

14 
	~<gìkos/gdt.h
>

19 
Lﬂd_GDTR
(
ush‹t_t
 * 
limôAndBa£
);

29 
	#NUM_GDT_ENTRIES
 32

	)

34 
Segmít_Des¸ùt‹
 
	gs_GDT
[
NUM_GDT_ENTRIES
];

39 
	gs_numAŒoˇãd
 = 0;

49 
Segmít_Des¸ùt‹
 *
	$AŒoˇã_Segmít_Des¸ùt‹
() {

50 
Segmít_Des¸ùt‹
 *
ªsu…
 = 0;

51 
i
;

52 
boﬁ
 
iÊag
;

54 
iÊag
 = 
	`Begö_I¡_Atomic
();

57 
i
 = 1; i < 
NUM_GDT_ENTRIES
; ++i) {

58 
Segmít_Des¸ùt‹
 *
desc
 = &
s_GDT
[
i
];

59 i‡(
desc
->
avaû
) {

60 ++
s_numAŒoˇãd
;

61 
desc
->
avaû
 = 0;

62 
ªsu…
 = 
desc
;

67 
	`End_I¡_Atomic
(
iÊag
);

69  
ªsu…
;

70 
	}
}

75 
	$Fªe_Segmít_Des¸ùt‹
(
Segmít_Des¸ùt‹
 *
desc
) {

76 
boﬁ
 
iÊag
 = 
	`Begö_I¡_Atomic
();

78 
	`KASSERT
(!
desc
->
avaû
);

80 
	`Inô_NuŒ_Segmít_Des¸ùt‹
(
desc
);

81 
desc
->
avaû
 = 1;

82 --
s_numAŒoˇãd
;

84 
	`End_I¡_Atomic
(
iÊag
);

85 
	}
}

90 
	$Gë_Des¸ùt‹_Index
(
Segmít_Des¸ùt‹
 *
desc
) {

91  ()(
desc
 - 
s_GDT
);

92 
	}
}

97 
	$Inô_GDT
(
˝uid
) {

98 
ush‹t_t
 
limôAndBa£
[3];

99 
ul⁄g_t
 
gdtBa£Addr
 = (ul⁄g_tË
s_GDT
;

100 
Segmít_Des¸ùt‹
 *
desc
;

101 
i
;

103 
	`KASSERT
((
Segmít_Des¸ùt‹
) == 8);

106 i‡(!
˝uid
) {

108 
i
 = 0; i < 
NUM_GDT_ENTRIES
; ++i) {

109 
desc
 = &
s_GDT
[
i
];

110 
	`Inô_NuŒ_Segmít_Des¸ùt‹
(
desc
);

111 
desc
->
avaû
 = 1;

115 
desc
 = 
	`AŒoˇã_Segmít_Des¸ùt‹
();

116 
	`Inô_Code_Segmít_Des¸ùt‹
(
desc
, 0,

120 
	`KASSERT
(
	`Gë_Des¸ùt‹_Index
(
desc
Ë=(
KERNEL_CS
 >> 3));

123 
desc
 = 
	`AŒoˇã_Segmít_Des¸ùt‹
();

124 
	`Inô_D©a_Segmít_Des¸ùt‹
(
desc
, 0,

128 
	`KASSERT
(
	`Gë_Des¸ùt‹_Index
(
desc
Ë=(
KERNEL_DS
 >> 3));

132 
limôAndBa£
[0] = (
Segmít_Des¸ùt‹
Ë* 
NUM_GDT_ENTRIES
;

133 
limôAndBa£
[1] = 
gdtBa£Addr
 & 0xffff;

134 
limôAndBa£
[2] = 
gdtBa£Addr
 >> 16;

135 
	`Lﬂd_GDTR
(
limôAndBa£
);

136 
	}
}

	@src/geekos/gfs2.c

15 
	~<limôs.h
>

16 
	~<gìkos/î∫o.h
>

17 
	~<gìkos/kas£π.h
>

18 
	~<gìkos/s¸ìn.h
>

19 
	~<gìkos/mÆloc.h
>

20 
	~<gìkos/°rög.h
>

21 
	~<gìkos/bô£t.h
>

22 
	~<gìkos/synch.h
>

23 
	~<gìkos/bufˇche.h
>

24 
	~<gìkos/gfs2.h
>

25 
	~<gìkos/¥oje˘s.h
>

39 
	$GFS2_FSèt
(
Fûe
 *
fûe
, 
VFS_Fûe_Sèt
 *
°©
) {

40 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem FStat operation");

42 
	}
}

47 
	$GFS2_Ród
(
Fûe
 *
fûe
, *
buf
, 
ul⁄g_t
 
numByãs
) {

48 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystemÑead operation");

50  
EUNSUPPORTED
;

51 
	}
}

56 
	$GFS2_Wrôe
(
Fûe
 *
fûe
, *
buf
, 
ul⁄g_t
 
numByãs
) {

57 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem write operation");

58  
EUNSUPPORTED
;

59 
	}
}

65 
	$GFS2_Sìk
(
Fûe
 *
fûe
, 
ul⁄g_t
 
pos
) {

66 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem seek operation");

67  
EUNSUPPORTED
;

68 
	}
}

73 
	$GFS2_Clo£
(
Fûe
 *
fûe
) {

74 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem close operation");

75  
EUNSUPPORTED
;

76 
	}
}

78  
Fûe_Ops
 
	gs_gfs2FûeOps
 = {

79 &
GFS2_FSèt
,

80 &
GFS2_Ród
,

81 &
GFS2_Wrôe
,

82 &
GFS2_Sìk
,

83 &
GFS2_Clo£
,

90 
	$GFS2_FSèt_Dúe˘‹y
(
Fûe
 *
dú
, 
VFS_Fûe_Sèt
 *
°©
) {

92 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem FStat directory operation");

94 
	}
}

99 
	$GFS2_Clo£_Dúe˘‹y
(
Fûe
 *
dú
) {

100 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem Close directory operation");

101  
EUNSUPPORTED
;

102 
	}
}

107 
	$GFS2_Ród_E¡ry
(
Fûe
 *
dú
, 
VFS_Dú_E¡ry
 *
íåy
) {

108 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem Read_Entry operation");

109  
EUNSUPPORTED
;

110 
	}
}

112  
Fûe_Ops
 
	gs_gfs2DúOps
 = {

113 &
GFS2_FSèt
,

117 &
GFS2_Clo£_Dúe˘‹y
,

118 &
GFS2_Ród_E¡ry
,

126 
	$GFS2_O≥n
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

127 
mode
, 
Fûe
 **
pFûe
) {

128 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem open operation");

129  
EUNSUPPORTED
;

130 
	}
}

135 
	$GFS2_Cª©e_Dúe˘‹y
(
Mou¡_Poöt
 *
mou¡Poöt
,

136 c⁄° *
∑th
) {

137 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem create directory operation");

138  
EUNSUPPORTED
;

139 
	}
}

144 
	$GFS2_O≥n_Dúe˘‹y
(
Mou¡_Poöt
 *
mou¡Poöt
,

145 c⁄° *
∑th
, 
Fûe
 **
pDú
) {

146 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem open directory operation");

147  
EUNSUPPORTED
;

148 
	}
}

153 
	$GFS2_Dñëe
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

154 
boﬁ
 
ªcursive
) {

155 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem delete operation");

156  
EUNSUPPORTED
;

157 
	}
}

162 
	$GFS2_Sèt
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

163 
VFS_Fûe_Sèt
 *
°©
) {

164 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem stat operation");

165  
EUNSUPPORTED
;

166 
	}
}

172 
	$GFS2_Sync
(
Mou¡_Poöt
 *
mou¡Poöt
) {

173 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem sync operation");

174  
EUNSUPPORTED
;

175 
	}
}

177 
	$GFS2_Disk_Pr›îtõs
(
Mou¡_Poöt
 *
mou¡Poöt
,

178 *
block_size
,

179 *
blocks_ö_disk
) {

180 
	`TODO_P
(
PROJECT_GFS2
,

182  
EUNSUPPORTED
;

183 
	}
}

185  
Mou¡_Poöt_Ops
 
	gs_gfs2Mou¡PoötOps
 = {

186 &
GFS2_O≥n
,

187 &
GFS2_Cª©e_Dúe˘‹y
,

188 &
GFS2_O≥n_Dúe˘‹y
,

189 &
GFS2_Sèt
,

190 &
GFS2_Sync
,

191 &
GFS2_Dñëe
,

197 &
GFS2_Disk_Pr›îtõs
,

200 
GFS2_F‹m©
(
Block_Devi˚
 *
blockDev
 
__©åibuã__
 ((
unu£d
))) {

201 
TODO_P
(
PROJECT_GFS2
,

203  
	gEUNSUPPORTED
;

206 
	$GFS2_Mou¡
(
Mou¡_Poöt
 *
mou¡Poöt
) {

207 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem mount operation");

208  
EUNSUPPORTED
;

209 
	}
}

212 
Fûesy°em_Ops
 
	gs_gfs2Fûesy°emOps
 = {

213 &
GFS2_F‹m©
,

214 &
GFS2_Mou¡
,

221 
	$Inô_GFS2
() {

222 
	`Regi°î_Fûesy°em
("gfs2", &
s_gfs2Fûesy°emOps
);

223 
	}
}

	@src/geekos/gosfs.c

13 
	~<limôs.h
>

14 
	~<gìkos/î∫o.h
>

15 
	~<gìkos/kas£π.h
>

16 
	~<gìkos/s¸ìn.h
>

17 
	~<gìkos/mÆloc.h
>

18 
	~<gìkos/°rög.h
>

19 
	~<gìkos/bô£t.h
>

20 
	~<gìkos/synch.h
>

21 
	~<gìkos/bufˇche.h
>

22 
	~<gìkos/li°.h
>

23 
	~<gìkos/gosfs.h
>

24 
	~<gìkos/vfs.h
>

25 
	~<gìkos/°rög.h
>

26 
	~<gìkos/¥oje˘s.h
>

35 
	$GOSFS_F‹m©
(
Block_Devi˚
 *
blockDev
) {

36 
	`TODO_P
(
PROJECT_GOSFS
, "GeekOS file system Format operation");

37  
EUNSUPPORTED
;

38 
	}
}

44 
	$GOSFS_Mou¡
(
Mou¡_Poöt
 *
mou¡Poöt
) {

45 
	`TODO_P
(
PROJECT_GOSFS
, "GeekOS file system Mount operation");

46  
EUNSUPPORTED
;

47 
	}
}

52 
	$GOSFS_FSèt
(
Fûe
 *
fûe
, 
VFS_Fûe_Sèt
 *
°©
) {

53 
	`TODO_P
(
PROJECT_GOSFS
, "GeekOS file system FStat operation");

54  
EUNSUPPORTED
;

55 
	}
}

61 
	$GOSFS_O≥n
(
Mou¡_Poöt
 *
mp
, c⁄° *
c⁄°_∑th
, 
mode
,

62 
Fûe
 **
pFûe
) {

63 
	`TODO_P
(
PROJECT_GOSFS
, "GeekOS file system Open operation");

64  
EUNSUPPORTED
;

65 
	}
}

71 
	$GOSFS_Ród
(
Fûe
 *
fûe
, *
±r
, 
ul⁄g_t
 
numByãs
) {

72 
	`TODO_P
(
PROJECT_GOSFS
, "GeekOS file system Read operation");

73  
EUNSUPPORTED
;

74 
	}
}

80 
	$GOSFS_Wrôe
(
Fûe
 *
fûe
, *
±r
, 
ul⁄g_t
 
numByãs
) {

81 
	`TODO_P
(
PROJECT_GOSFS
, "GeekOS file system Write operation");

82  
EUNSUPPORTED
;

83 
	}
}

88 
	$GOSFS_Sèt
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

89 
VFS_Fûe_Sèt
 *
°©
) {

90 
	`TODO_P
(
PROJECT_GOSFS
, "GeekOS file system Stat operation");

91  
EUNSUPPORTED
;

92 
	}
}

98 
	$GOSFS_Sync
(
Mou¡_Poöt
 *
mou¡Poöt
) {

99 
	`TODO_P
(
PROJECT_GOSFS
, "GeekOS file system Sync operation");

100  
EUNSUPPORTED
;

101 
	}
}

106 
	$GOSFS_Clo£
(
Fûe
 *
fûe
) {

107 
	`TODO_P
(
PROJECT_GOSFS
, "GeekOS file system Close operation");

108  
EUNSUPPORTED
;

109 
	}
}

114 
	$GOSFS_Cª©e_Dúe˘‹y
(
Mou¡_Poöt
 *
mp
, c⁄° *
c⁄°_∑th
) {

115 
	`TODO_P
(
PROJECT_GOSFS
, "GeekOS file system Create Directory operation");

116  
EUNSUPPORTED
;

117 
	}
}

122 
	$GOSFS_O≥n_Dúe˘‹y
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

123 
Fûe
 **
pDú
) {

124 
	`TODO_P
(
PROJECT_GOSFS
, "GeekOS file system Open Directory operation");

125  
EUNSUPPORTED
;

126 
	}
}

131 
	$GOSFS_Sìk
(
Fûe
 *
fûe
, 
ul⁄g_t
 
pos
) {

132 
	`TODO_P
(
PROJECT_GOSFS
, "GeekOS file system Seek operation");

133  
EUNSUPPORTED
;

134 
	}
}

140 
	$GOSFS_Dñëe
(
Mou¡_Poöt
 *
mp
, c⁄° *
c⁄°_∑th
,

141 
boﬁ
 
ªcursive
) {

142 
	`TODO_P
(
PROJECT_GOSFS
, "GeekOS file system Delete operation");

143  
EUNSUPPORTED
;

144 
	}
}

147 
	$GOSFS_SëSëUid
(
Mou¡_Poöt
 *
mp
, c⁄° *
fûe
, 
£tuid
) {

148 
Fûe
 *
pFûe
;

150 
	`TODO_P
(
PROJECT_USER
, "GeekOS file system SetSetUID operation");

151  
EUNSUPPORTED
;

152 
	}
}

154 
	$GOSFS_SëA˛
(
Mou¡_Poöt
 *
mp
, c⁄° *
fûe
, 
uid
,

155 
≥rmissi⁄s
) {

156 
	`TODO_P
(
PROJECT_USER
, "GeekOS file system SetAcl operation");

157  
EUNSUPPORTED
;

158 
	}
}

163 
	$GOSFS_Ród_E¡ry
(
Fûe
 *
fûe
, 
VFS_Dú_E¡ry
 *
íåy
) {

164 
	`TODO_P
(
PROJECT_GOSFS
, "GeekOS file system Read Directory operation");

165  
EUNSUPPORTED
;

166 
	}
}

168 
Fûesy°em_Ops
 
	gs_gosfsFûesy°emOps
 = {

169 &
GOSFS_F‹m©
,

170 &
GOSFS_Mou¡
,

177 
	$Inô_GOSFS
() {

178 
	`Regi°î_Fûesy°em
("gosfs", &
s_gosfsFûesy°emOps
);

179 
	}
}

	@src/geekos/ide.c

21 
	~<gìkos/kty≥s.h
>

22 
	~<gìkos/kas£π.h
>

23 
	~<gìkos/î∫o.h
>

24 
	~<gìkos/mÆloc.h
>

25 
	~<gìkos/°rög.h
>

26 
	~<gìkos/io.h
>

27 
	~<gìkos/öt.h
>

28 
	~<gìkos/s¸ìn.h
>

29 
	~<gìkos/timî.h
>

30 
	~<gìkos/kthªad.h
>

31 
	~<gìkos/blockdev.h
>

32 
	~<gìkos/ide.h
>

35 
	#IDE_DATA_REGISTER
 0x1f0

	)

36 
	#IDE_ERROR_REGISTER
 0x1f1

	)

37 
	#IDE_FEATURE_REG
 
IDE_ERROR_REGISTER


	)

38 
	#IDE_SECTOR_COUNT_REGISTER
 0x1f2

	)

39 
	#IDE_SECTOR_NUMBER_REGISTER
 0x1f3

	)

40 
	#IDE_CYLINDER_LOW_REGISTER
 0x1f4

	)

41 
	#IDE_CYLINDER_HIGH_REGISTER
 0x1f5

	)

42 
	#IDE_DRIVE_HEAD_REGISTER
 0x1f6

	)

43 
	#IDE_STATUS_REGISTER
 0x1f7

	)

44 
	#IDE_COMMAND_REGISTER
 0x1f7

	)

45 
	#IDE_DEVICE_CONTROL_REGISTER
 0x3F6

	)

48 
	#IDE_DRIVE_BASE
 0xa0

	)

49 
	#IDE_DRIVE
(
driveNum
Ë(
IDE_DRIVE_BASE
 | (driveNum <<4))

	)

50 
	#IDE_MAX_DRIVES
 4

	)

54 
	#IDE_COMMAND_IDENTIFY_DRIVE
 0xEC

	)

55 
	#IDE_COMMAND_SEEK
 0x70

	)

56 
	#IDE_COMMAND_READ_SECTORS
 0x21

	)

57 
	#IDE_COMMAND_READ_BUFFER
 0xE4

	)

58 
	#IDE_COMMAND_WRITE_SECTORS
 0x30

	)

59 
	#IDE_COMMAND_WRITE_BUFFER
 0xE8

	)

60 
	#IDE_COMMAND_DIAGNOSTIC
 0x90

	)

61 
	#IDE_COMMAND_ATAPI_IDENT_DRIVE
 0xA1

	)

64 
	#IDE_INDENTIFY_NUM_CYLINDERS
 0x01

	)

65 
	#IDE_INDENTIFY_NUM_HEADS
 0x03

	)

66 
	#IDE_INDENTIFY_NUM_BYTES_TRACK
 0x04

	)

67 
	#IDE_INDENTIFY_NUM_BYTES_SECTOR
 0x05

	)

68 
	#IDE_INDENTIFY_NUM_SECTORS_TRACK
 0x06

	)

71 
	#IDE_STATUS_DRIVE_BUSY
 0x80

	)

72 
	#IDE_STATUS_DRIVE_READY
 0x40

	)

73 
	#IDE_STATUS_DRIVE_WRITE_FAULT
 0x20

	)

74 
	#IDE_STATUS_DRIVE_SEEK_COMPLETE
 0x10

	)

75 
	#IDE_STATUS_DRIVE_DATA_REQUEST
 0x08

	)

76 
	#IDE_STATUS_DRIVE_CORRECTED_DATA
 0x04

	)

77 
	#IDE_STATUS_DRIVE_INDEX
 0x02

	)

78 
	#IDE_STATUS_DRIVE_ERROR
 0x01

	)

81 
	#IDE_DCR_NOINTERRUPT
 0x02

	)

82 
	#IDE_DCR_RESET
 0x04

	)

85 
	#IDE_ERROR_NO_ERROR
 0

	)

86 
	#IDE_ERROR_BAD_DRIVE
 -1

	)

87 
	#IDE_ERROR_INVALID_BLOCK
 -2

	)

88 
	#IDE_ERROR_DRIVE_ERROR
 -3

	)

91 
	#IDE_CONTROL_REGISTER
 0x3F6

	)

92 
	#IDE_CONTROL_SOFTWARE_RESET
 0x04

	)

93 
	#IDE_CONTROL_INT_DISABLE
 0x02

	)

95 
	#LOW_BYTE
(
x
Ë(x & 0xff)

	)

96 
	#HIGH_BYTE
(
x
Ë((x >> 8Ë& 0xff)

	)

99 
	mnum_Cylödîs
;

100 
	mnum_Hóds
;

101 
	mnum_Se˘‹sPîTøck
;

102 
	mnum_ByãsPîSe˘‹
;

103 } 
	tideDisk
;

105 
	gideDebug
 = 0;

106 
	gnumDrives
;

107 
ideDisk
 
	gdrives
[
IDE_MAX_DRIVES
];

109 
Thªad_Queue
 
	gs_ideWaôQueue
;

110 
Block_Reque°_Li°
 
	gs_ideReque°Queue
;

116 
	$IDE_gëNumBlocks
(
driveNum
) {

117 i‡(
driveNum
 < 0 || driveNum > 
IDE_MAX_DRIVES
) {

118  
IDE_ERROR_BAD_DRIVE
;

121  (
drives
[
driveNum
].
num_Hóds
 *

122 
drives
[
driveNum
].
num_Se˘‹sPîTøck
 *

123 
drives
[
driveNum
].
num_Cylödîs
);

124 
	}
}

129 
	$IDE_Ród
(
driveNum
, 
blockNum
, *
buf„r
) {

130 
i
;

131 
hód
;

132 
£˘‹
;

133 
cylödî
;

134 *
buf„rW
;

135 
ªE«bÀ
 = 0;

137 i‡(
driveNum
 < 0 || driveNum > (
numDrives
 - 1)) {

138 i‡(
ideDebug
)

139 
	`Pröt
("ide: invÆid drivê%d\n", 
driveNum
);

140  
IDE_ERROR_BAD_DRIVE
;

143 i‡(
blockNum
 < 0 || blockNum >
	`IDE_gëNumBlocks
(
driveNum
)) {

144 i‡(
ideDebug
)

145 
	`Pröt
("ide: invÆid block %d\n", 
blockNum
);

146  
IDE_ERROR_INVALID_BLOCK
;

149 i‡(
	`I¡îru±s_E«bÀd
()) {

150 
	`DißbÀ_I¡îru±s
();

151 
ªE«bÀ
 = 1;

155 
£˘‹
 = 
blockNum
 % 
drives
[
driveNum
].
num_Se˘‹sPîTøck
 + 1;

156 
cylödî
 = 
blockNum
 / (
drives
[
driveNum
].
num_Hóds
 *

157 
drives
[
driveNum
].
num_Se˘‹sPîTøck
);

158 
hód
 = (
blockNum
 / 
drives
[
driveNum
].
num_Se˘‹sPîTøck
) %

159 
drives
[
driveNum
].
num_Hóds
;

161 i‡(
ideDebug
 >= 2) {

162 
	`Pröt
("ªque°Åÿªad block %d\n", 
blockNum
);

163 
	`Pröt
(" hód %d\n", 
hód
);

164 
	`Pröt
(" cylödî %d\n", 
cylödî
);

165 
	`Pröt
(" se˘‹ %d\n", 
£˘‹
);

168 
	`Out_Byã
(
IDE_SECTOR_COUNT_REGISTER
, 1);

169 
	`Out_Byã
(
IDE_SECTOR_NUMBER_REGISTER
, 
£˘‹
);

170 
	`Out_Byã
(
IDE_CYLINDER_LOW_REGISTER
, 
	`LOW_BYTE
(
cylödî
));

171 
	`Out_Byã
(
IDE_CYLINDER_HIGH_REGISTER
, 
	`HIGH_BYTE
(
cylödî
));

172 
	`Out_Byã
(
IDE_DRIVE_HEAD_REGISTER
, 
	`IDE_DRIVE
(
driveNum
Ë| 
hód
);

174 
	`Out_Byã
(
IDE_COMMAND_REGISTER
, 
IDE_COMMAND_READ_SECTORS
);

176 i‡(
ideDebug
 > 2)

177 
	`Pröt
("AboutÅo wait for Read \n");

180 
	`In_Byã
(
IDE_STATUS_REGISTER
Ë& 
IDE_STATUS_DRIVE_BUSY
);

182 i‡(
	`In_Byã
(
IDE_STATUS_REGISTER
Ë& 
IDE_STATUS_DRIVE_ERROR
) {

183 
	`Pröt
("ERROR: GŸ Ród %d\n", 
	`In_Byã
(
IDE_STATUS_REGISTER
));

184  
IDE_ERROR_DRIVE_ERROR
;

187 i‡(
ideDebug
 > 2)

188 
	`Pröt
("got buffer \n");

190 
buf„rW
 = (*)
buf„r
;

191 
i
 = 0; i < 256; i++) {

192 
buf„rW
[
i
] = 
	`In_W‹d
(
IDE_DATA_REGISTER
);

195 i‡(
ªE«bÀ
)

196 
	`E«bÀ_I¡îru±s
();

198  
IDE_ERROR_NO_ERROR
;

199 
	}
}

204 
	$IDE_Wrôe
(
driveNum
, 
blockNum
, *
buf„r
) {

205 
i
;

206 
hód
;

207 
£˘‹
;

208 
cylödî
;

209 *
buf„rW
;

210 
ªE«bÀ
 = 0;

212 i‡(
driveNum
 < 0 || driveNum > (
numDrives
 - 1)) {

213  
IDE_ERROR_BAD_DRIVE
;

216 i‡(
blockNum
 < 0 || blockNum >
	`IDE_gëNumBlocks
(
driveNum
)) {

217  
IDE_ERROR_INVALID_BLOCK
;

220 i‡(
	`I¡îru±s_E«bÀd
()) {

221 
	`DißbÀ_I¡îru±s
();

222 
ªE«bÀ
 = 1;

226 
£˘‹
 = 
blockNum
 % 
drives
[
driveNum
].
num_Se˘‹sPîTøck
 + 1;

227 
cylödî
 = 
blockNum
 / (
drives
[
driveNum
].
num_Hóds
 *

228 
drives
[
driveNum
].
num_Se˘‹sPîTøck
);

229 
hód
 = (
blockNum
 / 
drives
[
driveNum
].
num_Se˘‹sPîTøck
) %

230 
drives
[
driveNum
].
num_Hóds
;

232 i‡(
ideDebug
) {

233 
	`Pröt
("ªque°Åÿwrôêblock %d\n", 
blockNum
);

234 
	`Pröt
(" hód %d\n", 
hód
);

235 
	`Pröt
(" cylödî %d\n", 
cylödî
);

236 
	`Pröt
(" se˘‹ %d\n", 
£˘‹
);

239 
	`Out_Byã
(
IDE_SECTOR_COUNT_REGISTER
, 1);

240 
	`Out_Byã
(
IDE_SECTOR_NUMBER_REGISTER
, 
£˘‹
);

241 
	`Out_Byã
(
IDE_CYLINDER_LOW_REGISTER
, 
	`LOW_BYTE
(
cylödî
));

242 
	`Out_Byã
(
IDE_CYLINDER_HIGH_REGISTER
, 
	`HIGH_BYTE
(
cylödî
));

243 
	`Out_Byã
(
IDE_DRIVE_HEAD_REGISTER
, 
	`IDE_DRIVE
(
driveNum
Ë| 
hód
);

245 
	`Out_Byã
(
IDE_COMMAND_REGISTER
, 
IDE_COMMAND_WRITE_SECTORS
);

249 
	`In_Byã
(
IDE_STATUS_REGISTER
Ë& 
IDE_STATUS_DRIVE_BUSY
);

251 
buf„rW
 = (*)
buf„r
;

252 
i
 = 0; i < 256; i++) {

253 
	`Out_W‹d
(
IDE_DATA_REGISTER
, 
buf„rW
[
i
]);

256 i‡(
ideDebug
)

257 
	`Pröt
("AboutÅo wait for Write \n");

260 
	`In_Byã
(
IDE_STATUS_REGISTER
Ë& 
IDE_STATUS_DRIVE_BUSY
);

262 i‡(
	`In_Byã
(
IDE_STATUS_REGISTER
Ë& 
IDE_STATUS_DRIVE_ERROR
) {

263 
	`Pröt
("ERROR: GŸ Ród %d\n", 
	`In_Byã
(
IDE_STATUS_REGISTER
));

264  
IDE_ERROR_DRIVE_ERROR
;

267 i‡(
ideDebug
)

268 
	`Pröt
("write completed \n");

270 i‡(
ªE«bÀ
)

271 
	`E«bÀ_I¡îru±s
();

273  
IDE_ERROR_NO_ERROR
;

274 
	}
}

276 
	$IDE_O≥n
(
Block_Devi˚
 *
dev
) {

277 
	`KASSERT
(!
dev
->
öU£
);

279 
	}
}

281 
	$IDE_Clo£
(
Block_Devi˚
 *
dev
) {

282 
	`KASSERT
(
dev
->
öU£
);

284 
	}
}

286 
	$IDE_Gë_Num_Blocks
(
Block_Devi˚
 *
dev
) {

287  
	`IDE_gëNumBlocks
(
dev
->
unô
);

288 
	}
}

290 
Block_Devi˚_Ops
 
	gs_ideDevi˚Ops
 = {

291 
IDE_O≥n
,

292 
IDE_Clo£
,

293 
IDE_Gë_Num_Blocks
,

296 
IDE_Reque°_Thªad
(
ul⁄g_t
 
¨g
 
__©åibuã__
 ((
unu£d
))) {

298 
Block_Reque°
 *
	gªque°
;

299 
	grc
;

302 
	gªque°
 = 
Dequeue_Reque°
(&
s_ideReque°Queue
, &
s_ideWaôQueue
);

305 i‡(
	gªque°
->
	gty≥
 =
BLOCK_READ
)

306 
rc
 = 
IDE_Ród
(
ªque°
->
dev
->
unô
,Ñeque°->
blockNum
,

307 
ªque°
->
buf
);

309 
	grc
 = 
IDE_Wrôe
(
ªque°
->
dev
->
unô
,Ñeque°->
blockNum
,

310 
ªque°
->
buf
);

313 
NŸify_Reque°_Com∂ëi⁄
(
ªque°
, 
rc
 =0 ? 
COMPLETED
 : 
ERROR
,Ñc);

317 
	$ªadDriveC⁄fig
(
drive
) {

318 
i
;

319 
°©us
;

320 
öfo
[256];

321 
dev«me
[
BLOCKDEV_MAX_NAME_LEN
];

322 
rc
;

324 i‡(
ideDebug
 > 1)

325 
	`Pröt
("ide:ábouàtÿªad drivêc⁄fig f‹ drivê#%d\n", 
drive
);

327 
	`Out_Byã
(
IDE_DRIVE_HEAD_REGISTER
, 
	`IDE_DRIVE
(
drive
));

328 
	`Out_Byã
(
IDE_COMMAND_REGISTER
, 
IDE_COMMAND_IDENTIFY_DRIVE
);

329 
	`In_Byã
(
IDE_STATUS_REGISTER
Ë& 
IDE_STATUS_DRIVE_BUSY
);

331 
°©us
 = 
	`In_Byã
(
IDE_STATUS_REGISTER
);

336 i‡((
°©us
 & 
IDE_STATUS_DRIVE_DATA_REQUEST
)) {

337 
	`Pröt
("ide:Örobe found ATA drive: ");

339 
i
 = 0; i < 256; i++) {

340 
öfo
[
i
] = 
	`In_W‹d
(
IDE_DATA_REGISTER
);

343 
drives
[
drive
].
num_Cylödîs
 = 
öfo
[
IDE_INDENTIFY_NUM_CYLINDERS
];

344 
drives
[
drive
].
num_Hóds
 = 
öfo
[
IDE_INDENTIFY_NUM_HEADS
];

345 
drives
[
drive
].
num_Se˘‹sPîTøck
 =

346 
öfo
[
IDE_INDENTIFY_NUM_SECTORS_TRACK
];

347 
drives
[
drive
].
num_ByãsPîSe˘‹
 =

348 
öfo
[
IDE_INDENTIFY_NUM_BYTES_SECTOR
];

351 
	`Out_Byã
(
IDE_FEATURE_REG
, 0);

353 
	`Out_Byã
(
IDE_DRIVE_HEAD_REGISTER
, 
	`IDE_DRIVE
(
drive
));

354 
	`Out_Byã
(
IDE_COMMAND_REGISTER
, 
IDE_COMMAND_ATAPI_IDENT_DRIVE
);

355 
	`In_Byã
(
IDE_STATUS_REGISTER
Ë& 
IDE_STATUS_DRIVE_BUSY
);

356 
°©us
 = 
	`In_Byã
(
IDE_STATUS_REGISTER
);

357 
	`Pröt
("°©u†i†%x\n", 
°©us
);

358 i‡((
°©us
 & 
IDE_STATUS_DRIVE_DATA_REQUEST
)) {

359 
	`Pröt
("ide: foundátapi drive\n");

361 
	`Pröt
("ide: foundÇÿdrivê%d\n", 
drive
);

366 
	`Pröt
(" ide%d: cyl=%d, hóds=%d, se˘‹s=%d\n", 
drive
,

367 
drives
[
drive
].
num_Cylödîs
, drives[drive].
num_Hóds
,

368 
drives
[
drive
].
num_Se˘‹sPîTøck
);

371 
	`¢¥ötf
(
dev«me
, (dev«me), "ide%d", 
drive
);

372 
rc
 = 
	`Regi°î_Block_Devi˚
(
dev«me
, &
s_ideDevi˚Ops
, 
drive
, 0,

373 &
s_ideWaôQueue
, &
s_ideReque°Queue
);

374 i‡(
rc
 != 0)

375 
	`Pröt
(" Eº‹: couldÇŸ cª©êblock devi˚ f‹ %s\n", 
dev«me
);

378 
	}
}

381 
	$Inô_IDE
() {

382 
îr‹Code
;

384 
	`Pröt
("Initializing IDE controller...\n");

387 
	`Out_Byã
(
IDE_DEVICE_CONTROL_REGISTER
,

388 
IDE_DCR_NOINTERRUPT
 | 
IDE_DCR_RESET
);

389 
	`Mi¸o_Dñay
(100);

390 
	`Out_Byã
(
IDE_DEVICE_CONTROL_REGISTER
, 
IDE_DCR_NOINTERRUPT
);

399 
	`In_Byã
(
IDE_STATUS_REGISTER
Ë& 
IDE_STATUS_DRIVE_BUSY
);

401 i‡(
ideDebug
)

402 
	`Pröt
("AboutÅoÑun drive Diagnosis\n");

404 
	`Out_Byã
(
IDE_COMMAND_REGISTER
, 
IDE_COMMAND_DIAGNOSTIC
);

405 
	`In_Byã
(
IDE_STATUS_REGISTER
Ë& 
IDE_STATUS_DRIVE_BUSY
);

406 
îr‹Code
 = 
	`In_Byã
(
IDE_ERROR_REGISTER
);

407 i‡(
ideDebug
 > 1)

408 
	`Pröt
("ide: idêîr‹Ñegi°î = %x\n", 
îr‹Code
);

411 
i
;

412 
i
 = 0; i < 
IDE_MAX_DRIVES
; i++) {

413 i‡(
	`ªadDriveC⁄fig
(
i
) == 0)

414 ++
numDrives
;

416 i‡(
ideDebug
)

417 
	`Pröt
("Found %d IDE drives\n", 
numDrives
);

420 i‡(
numDrives
 > 0)

421 
	`Sèπ_Kî√l_Thªad
(
IDE_Reque°_Thªad
, 0, 
PRIORITY_NORMAL
, 
åue
,

423 
	}
}

	@src/geekos/idt.c

10 
	~<gìkos/kas£π.h
>

11 
	~<gìkos/defs.h
>

12 
	~<gìkos/idt.h
>

13 
	~<gìkos/smp.h
>

22 
IDT_Des¸ùt‹
 
	gs_IDT
[4][
NUM_IDT_ENTRIES
];

30 
g_íåyPoötTabÀSèπ
, 
g_íåyPoötTabÀEnd
;

31 
g_h™dÀrSizeNoEº
, 
g_h™dÀrSizeEº
;

38 
I¡îru±_H™dÀr
 
	gg_öãºu±TabÀ
[
NUM_IDT_ENTRIES
];

51 
	$Inô_IDT
(
˝uID
) {

52 
i
;

53 
ush‹t_t
 
limôAndBa£
[3];

55 
	`KASSERT0
(
˝uID
 < 4, "Only supports upÅo 4 coresÑightÇow");

56 
ul⁄g_t
 
idtBa£Addr
 = (ul⁄g_tË
s_IDT
[
˝uID
];

57 
ul⁄g_t
 
èbÀBa£Addr
 = (ul⁄g_tË& 
g_íåyPoötTabÀSèπ
;

58 
ul⁄g_t
 
addr
;

60 
	`Pröt
("Initializing IDT...\n");

63 
	`KASSERT
(
g_h™dÀrSizeNoEº
 =
g_h™dÀrSizeEº
);

64 
	`KASSERT
((&
g_íåyPoötTabÀEnd
 - &
g_íåyPoötTabÀSèπ
) ==

65 
g_h™dÀrSizeNoEº
 * 
NUM_IDT_ENTRIES
);

73 
i
 = 0, 
addr
 = 
èbÀBa£Addr
; i < 
NUM_IDT_ENTRIES
; ++i) {

78 
d∂
 = (
i
 =
SYSCALL_INT
Ë? 
USER_PRIVILEGE
 : 
KERNEL_PRIVILEGE
;

79 
	`Inô_I¡îru±_G©e
(&
s_IDT
[
˝uID
][
i
], 
addr
, 
d∂
);

80 
addr
 +
g_h™dÀrSizeNoEº
;

87 
limôAndBa£
[0] = 8 * 
NUM_IDT_ENTRIES
;

88 
limôAndBa£
[1] = 
idtBa£Addr
 & 0xffff;

89 
limôAndBa£
[2] = 
idtBa£Addr
 >> 16;

92 
	`Lﬂd_IDTR
(
limôAndBa£
);

93 
	}
}

99 
	$Inô_I¡îru±_G©e
(
IDT_Des¸ùt‹
 *
desc
, 
ul⁄g_t
 
addr
, 
d∂
) {

100 
	`KASSERT
(
desc
);

101 
desc
->
ig
.
off£tLow
 = 
addr
 & 0xffff;

102 
desc
->
ig
.
£gmítSñe˘‹
 = 
KERNEL_CS
;

103 
desc
->
ig
.
ª£rved
 = 0;

104 
desc
->
ig
.
sig«tuª
 = 0x70;

105 
desc
->
ig
.
d∂
 = dpl;

106 
desc
->
ig
.
¥e£¡
 = 1;

107 
desc
->
ig
.
off£tHigh
 = 
addr
 >> 16;

108 
	}
}

116 
	$In°Æl_I¡îru±_H™dÀr
(
öãºu±
, 
I¡îru±_H™dÀr
 
h™dÀr
) {

117 
	`KASSERT
(
öãºu±
 >0 && i¡îru± < 
NUM_IDT_ENTRIES
);

118 
g_öãºu±TabÀ
[
öãºu±
] = 
h™dÀr
;

119 
	}
}

	@src/geekos/int.c

10 
	~<gìkos/idt.h
>

11 
	~<gìkos/s¸ìn.h
>

12 
	~<gìkos/kas£π.h
>

13 
	~<gìkos/∑gög.h
>

14 
	~<gìkos/öt.h
>

19 
ul⁄g_t
 
Gë_Cuºít_EFLAGS
();

30 
	$Dummy_I¡îru±_H™dÀr
(
I¡îru±_Sèã
 *
°©e
) {

31 
	`Pröt
("*** Unexpected interrupt! ***\n");

32 
	`Dump_I¡îru±_Sèã
(
°©e
);

33 
	`STOP
();

34 
	}
}

36 
	$Pröt_Sñe˘‹
(c⁄° *
ªgName
, 
uöt_t
 
vÆue
)

37 
	`__©åibuã__
 ((
unu£d
));

38 
	$Pröt_Sñe˘‹
(c⁄° *
ªgName
, 
uöt_t
 
vÆue
) {

39 
	`Pröt
("%s: index=%d,Åi=%d,Ñpl=%d\n",

40 
ªgName
, 
vÆue
 >> 3, (value >> 2) & 1, value & 3);

41 
	}
}

50 
	$Inô_I¡îru±s
(
˝uID
) {

51 
i
;

54 
	`Inô_IDT
(
˝uID
);

56 i‡(!
˝uID
) {

61 
i
 = 0; i < 
NUM_IDT_ENTRIES
; ++i) {

62 
	`In°Æl_I¡îru±_H™dÀr
(
i
, 
Dummy_I¡îru±_H™dÀr
);

68 
	`__E«bÀ_I¡îru±s
();

69 
	}
}

74 
boﬁ
 
	$I¡îru±s_E«bÀd
() {

75 
ul⁄g_t
 
eÊags
 = 
	`Gë_Cuºít_EFLAGS
();

76  (
eÊags
 & 
EFLAGS_IF
) != 0;

77 
	}
}

82 
	$Dump_I¡îru±_Sèã
(
I¡îru±_Sèã
 *
°©e
) {

83 
uöt_t
 
îr‹Code
 = 
°©e
->errorCode;

85 
	`Pröt
("eax=%08xÉbx=%08xÉcx=%08xÉdx=%08x\n"

90 
°©e
->
óx
, sèã->
ebx
, sèã->
ecx
, sèã->
edx
,

91 
°©e
->
esi
, sèã->
edi
, sèã->
ebp
,

92 
°©e
->
eù
, sèã->
cs
, sèã->
eÊags
,

93 
°©e
->
ötNum
, 
îr‹Code
,

94 
îr‹Code
 >> 3, (errorCode >> 2) & 1, (errorCode >> 1) & 1,

95 
îr‹Code
 & 1);

96 i‡(
	`Is_U£r_I¡îru±
(
°©e
)) {

97 
U£r_I¡îru±_Sèã
 *
u°©e
 =

98 (
U£r_I¡îru±_Sèã
 *)
°©e
;

99 
	`Pröt
("u£∏e•=%08x, u£∏ss=%08x\n", 
u°©e
->
e•U£r
,

100 
u°©e
->
ssU£r
);

102 i‡(
°©e
->
ötNum
 == 14) {

105 
Áu…code_t
 
pfEº‹Code
;

106 
vÆue
;

107 } 
u
;

109 
u
.
vÆue
 = 
îr‹Code
;

110 
	`Pröt
("Page fault: ");

111 i‡(
u
.
pfEº‹Code
.
¥Ÿe˘i⁄Viﬁ©i⁄
)

112 
	`Pröt
("[protection]");

113 
	`Pröt
("[%s]", 
u
.
pfEº‹Code
.
wrôeFau…
 ? "write" : "read");

114 i‡(
u
.
pfEº‹Code
.
u£rModeFau…
)

115 
	`Pröt
("[user mode]");

116 
	`Pröt
("[addªss=%lx]\n", 
	`Gë_Page_Fau…_Addªss
());

118 
	`H¨dw¨e_Shutdown
();

119 
submôTe°ög
;

121 i‡(
submôTe°ög
)

122 
	`H¨dw¨e_Shutdown
();

123 
	`Pröt_Sñe˘‹
("cs", 
°©e
->
cs
);

124 
	`Pröt_Sñe˘‹
("ds", 
°©e
->
ds
);

125 
	`Pröt_Sñe˘‹
("es", 
°©e
->
es
);

126 
	`Pröt_Sñe˘‹
("fs", 
°©e
->
fs
);

127 
	`Pröt_Sñe˘‹
("gs", 
°©e
->
gs
);

128 
	}
}

	@src/geekos/io.c

10 
	~<gìkos/io.h
>

15 
	$Out_Byã
(
ush‹t_t
 
p‹t
, 
uch¨_t
 
vÆue
) {

16 
__asm__
 
	`__vﬁ©ûe__
("outb %b0, %w1"::"a"(
vÆue
), "Nd"(
p‹t
)

18 
	}
}

23 
uch¨_t
 
	$In_Byã
(
ush‹t_t
 
p‹t
) {

24 
uch¨_t
 
vÆue
;

26 
__asm__
 
	`__vﬁ©ûe__
("öb %w1, %b0":"˜"(
vÆue
)

27 :"Nd"(
p‹t
)

30  
vÆue
;

31 
	}
}

36 
	$Out_W‹d
(
ush‹t_t
 
p‹t
, ush‹t_à
vÆue
) {

37 
__asm__
 
	`__vﬁ©ûe__
("outw %w0, %w1"::"a"(
vÆue
), "Nd"(
p‹t
)

39 
	}
}

44 
ush‹t_t
 
	$In_W‹d
(
ush‹t_t
 
p‹t
) {

45 
ush‹t_t
 
vÆue
;

47 
__asm__
 
	`__vﬁ©ûe__
("öw %w1, %w0":"˜"(
vÆue
)

48 :"Nd"(
p‹t
)

51  
vÆue
;

52 
	}
}

58 
	$IO_Dñay
() {

59 
uch¨_t
 
vÆue
 = 0;

60 
__asm__
 
	`__vﬁ©ûe__
("outb %0, $0x80"::"a"(
vÆue
)

62 
	}
}

	@src/geekos/irq.c

21 
	~<gìkos/kas£π.h
>

22 
	~<gìkos/idt.h
>

23 
	~<gìkos/io.h
>

24 
	~<gìkos/úq.h
>

25 
	~<gìkos/smp.h
>

36 
ush‹t_t
 
	gs_úqMask
 = 0xff7b;

41 
	#MASTER
(
mask
Ë((maskË& 0xff)

	)

42 
	#SLAVE
(
mask
Ë(((mask)>>8Ë& 0xff)

	)

53 
	$In°Æl_IRQ
(
úq
, 
I¡îru±_H™dÀr
 
h™dÀr
) {

54 
	`M≠_IO_APIC_IRQ
(
úq
, 
h™dÀr
);

55 
	}
}

61 
ush‹t_t
 
	$Gë_IRQ_Mask
() {

62  
s_úqMask
;

63 
	}
}

68 
	$Së_IRQ_Mask
(
ush‹t_t
 
mask
) {

69 
uch¨_t
 
ﬁdMask
, 
√wMask
;

71 
ﬁdMask
 = 
	`MASTER
(
s_úqMask
);

72 
√wMask
 = 
	`MASTER
(
mask
);

73 i‡(
√wMask
 !
ﬁdMask
) {

74 
	`Out_Byã
(0x21, 
√wMask
);

77 
ﬁdMask
 = 
	`SLAVE
(
s_úqMask
);

78 
√wMask
 = 
	`SLAVE
(
mask
);

79 i‡(
√wMask
 !
ﬁdMask
) {

80 
	`Out_Byã
(0xA1, 
√wMask
);

83 
s_úqMask
 = 
mask
;

84 
	}
}

89 
	$E«bÀ_IRQ
(
úq
) {

90 
boﬁ
 
iÊag
 = 
	`Begö_I¡_Atomic
();

91 
ush‹t_t
 
mask
 = 
	`Gë_IRQ_Mask
();

93 
	`KASSERT
(
úq
 >= 0 && irq <= 32);

94 
mask
 &~(1 << 
úq
);

95 
	`Së_IRQ_Mask
(
mask
);

97 
	`End_I¡_Atomic
(
iÊag
);

98 
	}
}

103 
	$DißbÀ_IRQ
(
úq
) {

104 
boﬁ
 
iÊag
 = 
	`Begö_I¡_Atomic
();

105 
ush‹t_t
 
mask
 = 
	`Gë_IRQ_Mask
();

107 
	`KASSERT
(
úq
 >= 0 && irq < 16);

108 
mask
 |(1 << 
úq
);

109 
	`Së_IRQ_Mask
(
mask
);

111 
	`End_I¡_Atomic
(
iÊag
);

112 
	}
}

118 
Begö_IRQ
(
I¡îru±_Sèã
 *
°©e
 
__©åibuã__
 ((
unu£d
))) {

125 
	$End_IRQ
(
I¡îru±_Sèã
 *
°©e
) {

126 
úq
 = 
°©e
->
ötNum
 - 
FIRST_EXTERNAL_INT
;

127 
uch¨_t
 
comm™d
 = 0x60 | (
úq
 & 0x7);

129 i‡(
úq
 < 8) {

131 
	`Out_Byã
(0x20, 
comm™d
);

134 
	`Out_Byã
(0xA0, 
comm™d
);

135 
	`Out_Byã
(0x20, 0x62);

137 
	}
}

	@src/geekos/keyboard.c

33 
	~<gìkos/kthªad.h
>

34 
	~<gìkos/kas£π.h
>

35 
	~<gìkos/s¸ìn.h
>

36 
	~<gìkos/úq.h
>

37 
	~<gìkos/io.h
>

38 
	~<gìkos/keybﬂrd.h
>

40 
	#DEBUG_KEYBOARD
(
x
...)

	)

50 
	#LEFT_SHIFT
 0x01

	)

51 
	#RIGHT_SHIFT
 0x02

	)

52 
	#LEFT_CTRL
 0x04

	)

53 
	#RIGHT_CTRL
 0x08

	)

54 
	#LEFT_ALT
 0x10

	)

55 
	#RIGHT_ALT
 0x20

	)

56 
	#SHIFT_MASK
 (
LEFT_SHIFT
 | 
RIGHT_SHIFT
)

	)

57 
	#CTRL_MASK
 (
LEFT_CTRL
 | 
RIGHT_CTRL
)

	)

58 
	#ALT_MASK
 (
LEFT_ALT
 | 
RIGHT_ALT
)

	)

59 
	gs_shi·Sèã
 = 0;

65 
	#QUEUE_SIZE
 256

	)

66 
	#QUEUE_MASK
 0xff

	)

67 
	#NEXT
(
ödex
Ë(((ödexË+ 1Ë& 
QUEUE_MASK
)

	)

68 
Keycode
 
	gs_queue
[
QUEUE_SIZE
];

69 
	gs_queueHód
, 
	gs_queueTaû
;

74 
Thªad_Queue
 
	gs_waôQueue
;

79 c⁄° 
Keycode
 
	gs_sˇnTabÀNoShi·
[] = {

80 
KEY_UNKNOWN
, 
ASCII_ESC
, '1', '2',

83 '-', '=', 
ASCII_BS
, '\t',

87 '\r', 
KEY_LCTRL
, 'a', 's',

90 '\'', '`', 
KEY_LSHIFT
, '\\',

93 '.', '/', 
KEY_RSHIFT
, 
KEY_PRINTSCRN
,

94 
KEY_LALT
, ' ', 
KEY_CAPSLOCK
, 
KEY_F1
,

95 
KEY_F2
, 
KEY_F3
, 
KEY_F4
, 
KEY_F5
,

96 
KEY_F6
, 
KEY_F7
, 
KEY_F8
, 
KEY_F9
,

97 
KEY_F10
, 
KEY_NUMLOCK
, 
KEY_SCRLOCK
, 
KEY_KPHOME
,

98 
KEY_KPUP
, 
KEY_KPPGUP
, 
KEY_KPMINUS
, 
KEY_KPLEFT
,

99 
KEY_KPCENTER
, 
KEY_KPRIGHT
, 
KEY_KPPLUS
, 
KEY_KPEND
,

100 
KEY_KPDOWN
, 
KEY_KPPGDN
, 
KEY_KPINSERT
, 
KEY_KPDEL
,

101 
KEY_SYSREQ
, 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN,

104 
	#SCAN_TABLE_SIZE
 ((
s_sˇnTabÀNoShi·
Ë/ (
Keycode
))

	)

111 c⁄° 
Keycode
 
	gs_sˇnTabÀWôhShi·
[] = {

112 
KEY_UNKNOWN
, 
ASCII_ESC
, '!', '@',

115 '_', '+', 
ASCII_BS
, '\t',

119 '\r', 
KEY_LCTRL
, 'A', 'S',

122 '"', '~', 
KEY_LSHIFT
, '|',

125 '>', '?', 
KEY_RSHIFT
, 
KEY_PRINTSCRN
,

126 
KEY_LALT
, ' ', 
KEY_CAPSLOCK
, 
KEY_F1
,

127 
KEY_F2
, 
KEY_F3
, 
KEY_F4
, 
KEY_F5
,

128 
KEY_F6
, 
KEY_F7
, 
KEY_F8
, 
KEY_F9
,

129 
KEY_F10
, 
KEY_NUMLOCK
, 
KEY_SCRLOCK
, 
KEY_KPHOME
,

130 
KEY_KPUP
, 
KEY_KPPGUP
, 
KEY_KPMINUS
, 
KEY_KPLEFT
,

131 
KEY_KPCENTER
, 
KEY_KPRIGHT
, 
KEY_KPPLUS
, 
KEY_KPEND
,

132 
KEY_KPDOWN
, 
KEY_KPPGDN
, 
KEY_KPINSERT
, 
KEY_KPDEL
,

133 
KEY_SYSREQ
, 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN,

137 c⁄° 
Keycode
 
	gs_sˇnTabÀE0
[] = {

138 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

139 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

140 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

141 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

142 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

143 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

144 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

145 
KEY_UNKNOWN
, 
KEY_RCTRL
, KEY_UNKNOWN, KEY_UNKNOWN,

146 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

147 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

148 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

149 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

150 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

151 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

152 
KEY_RALT
, 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN,

153 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

154 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

155 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

156 
KEY_KPUP
, 
KEY_KPPGUP
, 
KEY_KPMINUS
, 
KEY_KPLEFT
,

157 
KEY_KPCENTER
, 
KEY_KPRIGHT
, 
KEY_KPPLUS
, 
KEY_KPEND
,

158 
KEY_KPDOWN
, 
KEY_KPPGDN
, 
KEY_KPINSERT
, 
KEY_KPDEL
,

159 
KEY_UNKNOWN
, KEY_UNKNOWN, KEY_UNKNOWN, KEY_UNKNOWN,

162 
__ölöe__
 
boﬁ
 
	$Is_Queue_Em±y
() {

163  
s_queueHód
 =
s_queueTaû
;

164 
	}
}

166 
__ölöe__
 
boﬁ
 
	$Is_Queue_FuŒ
() {

167  
	`NEXT
(
s_queueTaû
Ë=
s_queueHód
;

168 
	}
}

170 
__ölöe__
 
	$Enqueue_Keycode
(
Keycode
 
keycode
) {

171 i‡(!
	`Is_Queue_FuŒ
()) {

172 
s_queue
[
s_queueTaû
] = 
keycode
;

173 
s_queueTaû
 = 
	`NEXT
(s_queueTail);

175 
	}
}

177 
__ölöe__
 
Keycode
 
	$Dequeue_Keycode
() {

178 
Keycode
 
ªsu…
;

179 
	`KASSERT
(!
	`Is_Queue_Em±y
());

180 
ªsu…
 = 
s_queue
[
s_queueHód
];

181 
s_queueHód
 = 
	`NEXT
(s_queueHead);

182  
ªsu…
;

183 
	}
}

188 
	$Keybﬂrd_I¡îru±_H™dÀr
(
I¡îru±_Sèã
 *
°©e
) {

189 
uch¨_t
 
°©us
, 
sˇnCode
;

190 
Êag
 = 0;

191 
boﬁ
 
ªÀa£
 = 
Ál£
, 
shi·
;

192 
Keycode
 
keycode
;

194 
	`Begö_IRQ
(
°©e
);

196 
°©us
 = 
	`In_Byã
(
KB_CMD
);

197 
	`IO_Dñay
();

199 i‡((
°©us
 & 
KB_OUTPUT_FULL
) != 0) {

201 
sˇnCode
 = 
	`In_Byã
(
KB_DATA
);

202 
	`IO_Dñay
();

204 
	`DEBUG_KEYBOARD
("code=%x%s\n", 
sˇnCode
,

205 (
sˇnCode
 & 0x80) ? " [release]" : "");

207 
shi·
 = ((
s_shi·Sèã
 & 
SHIFT_MASK
) != 0);

209 c⁄° 
Keycode
 *
sˇ¡abÀ_usög_cuºít_modifõrs
;

210 
sˇ¡abÀ_usög_cuºít_modifõrs
 =

211 
shi·
 ? 
s_sˇnTabÀWôhShi·
 : 
s_sˇnTabÀNoShi·
;

212 i‡(
sˇnCode
 == 0xe0) {

214 
sˇnCode
 = 
	`In_Byã
(
KB_DATA
);

215 
	`IO_Dñay
();

216 
sˇ¡abÀ_usög_cuºít_modifõrs
 = 
s_sˇnTabÀE0
;

217 
	`DEBUG_KEYBOARD
("suffixcode=%x%s\n", 
sˇnCode
,

218 (
sˇnCode
 & 0x80) ? " [release]" : "");

221 i‡(
sˇnCode
 & 
KB_KEY_RELEASE
) {

222 
ªÀa£
 = 
åue
;

223 
sˇnCode
 &~(
KB_KEY_RELEASE
);

226 i‡(
sˇnCode
 >
SCAN_TABLE_SIZE
) {

227 
	`Pröt
("Unknow¿sˇ¿code: 0x%x\n", 
sˇnCode
);

228 
d⁄e
;

231 
keycode
 = 
sˇ¡abÀ_usög_cuºít_modifõrs
[
sˇnCode
];

234 
keycode
) {

235 
KEY_LSHIFT
:

236 
Êag
 = 
LEFT_SHIFT
;

238 
KEY_RSHIFT
:

239 
Êag
 = 
RIGHT_SHIFT
;

241 
KEY_LCTRL
:

242 
Êag
 = 
LEFT_CTRL
;

244 
KEY_RCTRL
:

245 
Êag
 = 
RIGHT_CTRL
;

247 
KEY_LALT
:

248 
Êag
 = 
LEFT_ALT
;

250 
KEY_RALT
:

251 
Êag
 = 
RIGHT_ALT
;

254 
noÊagch™ge
;

257 i‡(
ªÀa£
)

258 
s_shi·Sèã
 &~(
Êag
);

260 
s_shi·Sèã
 |
Êag
;

266 
d⁄e
;

268 
noÊagch™ge
:

270 i‡(
shi·
)

271 
keycode
 |
KEY_SHIFT_FLAG
;

272 i‡((
s_shi·Sèã
 & 
CTRL_MASK
) != 0)

273 
keycode
 |
KEY_CTRL_FLAG
;

274 i‡((
s_shi·Sèã
 & 
ALT_MASK
) != 0)

275 
keycode
 |
KEY_ALT_FLAG
;

276 i‡(
ªÀa£
)

277 
keycode
 |
KEY_RELEASE_FLAG
;

280 
	`Enqueue_Keycode
(
keycode
);

283 
	`Wake_Up
(&
s_waôQueue
);

289 
g_√edRescheduÀ
[
	`Gë_CPU_ID
()] = 
åue
;

292 
d⁄e
:

293 
	`End_IRQ
(
°©e
);

294 
	}
}

300 
	$Inô_Keybﬂrd
() {

301 
ush‹t_t
 
úqMask
;

303 
	`Pröt
("Initializing keyboard...\n");

306 
s_shi·Sèã
 = 0;

309 
s_queueHód
 = 
s_queueTaû
 = 0;

312 
	`In°Æl_IRQ
(
KB_IRQ
, 
Keybﬂrd_I¡îru±_H™dÀr
);

315 
úqMask
 = 
	`Gë_IRQ_Mask
();

316 
úqMask
 &~(1 << 
KB_IRQ
);

317 
	`Së_IRQ_Mask
(
úqMask
);

319 
	}
}

328 
boﬁ
 
	$Ród_Key
(
Keycode
 * 
keycode
) {

329 
boﬁ
 
ªsu…
, 
iÊag
;

331 
iÊag
 = 
	`Begö_I¡_Atomic
();

333 
ªsu…
 = !
	`Is_Queue_Em±y
();

334 i‡(
ªsu…
) {

335 *
keycode
 = 
	`Dequeue_Keycode
();

338 
	`End_I¡_Atomic
(
iÊag
);

340  
ªsu…
;

341 
	}
}

343 
Keycode
 
	$Gë_Te°_I≈ut
() {

344 
Keycode
 
ªt
;

345 
ªt
 = 
	`In_Byã
(0x510);

346 i‡(!
ªt
)

347  
KEY_UNKNOWN
;

349  
ªt
;

350 
	}
}

357 
Keycode
 
	$Waô_F‹_Key
() {

358 
boﬁ
 
gŸKey
, 
iÊag
;

359 
Keycode
 
keycode
 = 
KEY_UNKNOWN
;

362 
keycode
 = 
	`Gë_Te°_I≈ut
();

363 i‡(
keycode
 !
KEY_UNKNOWN
) {

364  
keycode
;

367 
iÊag
 = 
	`Begö_I¡_Atomic
();

370 
gŸKey
 = !
	`Is_Queue_Em±y
();

371 i‡(
gŸKey
)

372 
keycode
 = 
	`Dequeue_Keycode
();

374 
	`Waô
(&
s_waôQueue
);

376 !
gŸKey
);

378 
	`End_I¡_Atomic
(
iÊag
);

380  
keycode
;

381 
	}
}

	@src/geekos/kthread.c

15 
	~<gìkos/kas£π.h
>

16 
	~<gìkos/defs.h
>

17 
	~<gìkos/s¸ìn.h
>

18 
	~<gìkos/öt.h
>

19 
	~<gìkos/mem.h
>

20 
	~<gìkos/symbﬁ.h
>

21 
	~<gìkos/°rög.h
>

22 
	~<gìkos/kthªad.h
>

23 
	~<gìkos/mÆloc.h
>

24 
	~<gìkos/u£r.h
>

25 
	~<gìkos/Æ¨m.h
>

26 
	~<gìkos/¥oje˘s.h
>

27 
	~<gìkos/smp.h
>

29 
Spö_Lock_t
 
kthªadLock
;

38 
AŒ_Thªad_Li°
 
	gs_ÆlThªadLi°
;

42 
Thªad_Queue
 
	gs_runQueue
;

43 
Thªad_Queue
 
	gs_blockQueue
;

48 
Kî√l_Thªad
 *
	gg_cuºítThªads
[
MAX_CPUS
];

55 
	gg_√edRescheduÀ
[
MAX_CPUS
];

62 vﬁ©ûê
	gg_¥ìm±i⁄DißbÀd
[
MAX_CPUS
];

69 
Thªad_Queue
 
	gs_gøvey¨dQueue
;

70 
Thªad_Queue
 
	gs_ª≠îWaôQueue
;

77 
	gs_éoˇlKeyCou¡î
 = 0;

78 
éoˇl_de°ru˘‹_t
 
	gs_éoˇlDe°ru˘‹s
[
MAX_TLOCAL_KEYS
];

80 
Kî√l_Thªad
 *
Gë_Next_Ru¬abÀ_Locked
();

87 
Spö_Lock_t
 
	gpidLock
;

89 
	$√xtPid
() {

90 
ªt
;

91 
√xtFªePid
 = 1;

93 
	`Spö_Lock
(&
pidLock
);

94 
ªt
 = 
√xtFªePid
++;

95 
	`Spö_U∆ock
(&
pidLock
);

96  
ªt
;

97 
	}
}

103 
	$Inô_Thªad
(
Kî√l_Thªad
 *
kthªad
, *
°ackPage
,

104 
¥i‹ôy
, 
boﬁ
 
dëached
) {

105 
Kî√l_Thªad
 *
ow√r
 = 
CURRENT_THREAD
;

107 
	`mem£t
(
kthªad
, '\0', (*kthread));

108 
kthªad
->
°ackPage
 = stackPage;

109 
	`KASSERT
(
°ackPage
);

110 
kthªad
->
e•
 = ((
ul⁄g_t
Ëkthªad->
°ackPage
Ë+ 
PAGE_SIZE
;

111 
kthªad
->
numTicks
 = 0;

112 
kthªad
->
dëached
 = detached;

113 
kthªad
->
¥i‹ôy
 =Öriority;

114 
kthªad
->
u£rC⁄ãxt
 = 0;

115 
kthªad
->
ow√r
 = owner;

116 
kthªad
->
afföôy
 = 
AFFINITY_ANY_CORE
;

117 
kthªad
->
tŸÆTime
 = 0;

124 
kthªad
->
ªfCou¡
 = 
dëached
 ? 1 : 2;

125 
kthªad
->
Æive
 = 
åue
;

126 
	`CÀ¨_Thªad_Queue
(&
kthªad
->
joöQueue
);

127 
kthªad
->
pid
 = 
	`√xtPid
();

128 
	}
}

134 
Kî√l_Thªad
 *
	$Cª©e_Thªad
(
¥i‹ôy
, 
boﬁ
 
dëached
) {

135 
Kî√l_Thªad
 *
kthªad
;

136 *
°ackPage
 = 0;

142 
kthªad
 = 
	`AŒoc_Page
();

143 i‡(
kthªad
 == 0)

146 
°ackPage
 = 
	`AŒoc_Page
();

147 i‡(
°ackPage
 == 0) {

148 
	`Fªe_Page
(
kthªad
);

158 
	`Inô_Thªad
(
kthªad
, 
°ackPage
, 
¥i‹ôy
, 
dëached
);

161 
	`Add_To_Back_Of_AŒ_Thªad_Li°
(&
s_ÆlThªadLi°
, 
kthªad
);

163  
kthªad
;

164 
	}
}

171 
__ölöe__
 
	$Push
(
Kî√l_Thªad
 *
kthªad
, 
ul⁄g_t
 
vÆue
) {

172 
kthªad
->
e•
 -= 4;

173 *((
ul⁄g_t
 *Ë
kthªad
->
e•
Ë
vÆue
;

174 
	}
}

182 
	$De°roy_Thªad
(
Kî√l_Thªad
 *
kthªad
) {

187 i‡(
kthªad
->
u£rC⁄ãxt
 != 0)

188 
	`Dëach_U£r_C⁄ãxt
(
kthªad
);

191 
	`Remove_From_AŒ_Thªad_Li°
(&
s_ÆlThªadLi°
, 
kthªad
);

194 
	`Fªe_Page
(
kthªad
->
°ackPage
);

195 
	`Fªe_Page
(
kthªad
);

196 
	}
}

202 
	$Róp_Thªad
(
Kî√l_Thªad
 *
kthªad
) {

204 
	`KASSERT
(
kthªad
 !
CPUs
[0].
idÀThªad
);

205 
	`KASSERT
(
kthªad
 !
CPUs
[1].
idÀThªad
);

206 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

207 
	`Enqueue_Thªad
(&
s_gøvey¨dQueue
, 
kthªad
);

208 
	`Wake_Up
(&
s_ª≠îWaôQueue
);

209 
	}
}

214 
	$Dëach_Thªad
(
Kî√l_Thªad
 *
kthªad
) {

215 
cou¡
;

217 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

219 
	`KASSERT
(
kthªad
->
ªfCou¡
 > 0);

221 
boﬁ
 
iÊag
 = 
	`Begö_I¡_Atomic
();

222 
cou¡
 = --
kthªad
->
ªfCou¡
;

224 i‡(
cou¡
 == 0) {

225 
	`Róp_Thªad
(
kthªad
);

227 
	`End_I¡_Atomic
(
iÊag
);

228 
	}
}

236 
	$Launch_Thªad
() {

237 
	`E«bÀ_I¡îru±s
();

238 
	}
}

243 
	$Push_GíîÆ_Regi°îs
(
Kî√l_Thªad
 *
kthªad
) {

248 
	`Push
(
kthªad
, 0);

249 
	`Push
(
kthªad
, 0);

250 
	`Push
(
kthªad
, 0);

251 
	`Push
(
kthªad
, 0);

252 
	`Push
(
kthªad
, 0);

253 
	`Push
(
kthªad
, 0);

254 
	`Push
(
kthªad
, 0);

255 
	}
}

262 
	$Shutdown_Thªad
() {

263 
	`Exô
(0);

264 
	}
}

269 
	$Sëup_Kî√l_Thªad
(
Kî√l_Thªad
 *
kthªad
,

270 
Thªad_Sèπ_Func
 
°¨tFunc
, 
ul⁄g_t
 
¨g
) {

276 
	`Push
(
kthªad
, 
¨g
);

277 
	`Push
(
kthªad
, (
ul⁄g_t
Ë& 
Shutdown_Thªad
);

280 
	`Push
(
kthªad
, (
ul⁄g_t
Ë
°¨tFunc
);

295 
	`Push
(
kthªad
, 0UL);

301 
	`Push
(
kthªad
, 
KERNEL_CS
);

302 
	`Push
(
kthªad
, (
ul⁄g_t
Ë& 
Launch_Thªad
);

305 
	`Push
(
kthªad
, 0);

306 
	`Push
(
kthªad
, 0);

309 
	`Push_GíîÆ_Regi°îs
(
kthªad
);

317 
	`Push
(
kthªad
, 
KERNEL_DS
);

318 
	`Push
(
kthªad
, 
KERNEL_DS
);

319 
	`Push
(
kthªad
, 0);

320 
	`Push
(
kthªad
, 0);

321 
	}
}

326  
	$Sëup_U£r_Thªad
(

327 
Kî√l_Thªad
 *
kthªad
,

328 
U£r_C⁄ãxt
 *
u£rC⁄ãxt
) {

329 
u£rDebug
;

335 
ul⁄g_t
 
eÊags
 = 
EFLAGS_IF
;

337 
csSñe˘‹
 = 
u£rC⁄ãxt
->csSelector;

338 
dsSñe˘‹
 = 
u£rC⁄ãxt
->dsSelector;

340 
	`Aâach_U£r_C⁄ãxt
(
kthªad
, 
u£rC⁄ãxt
);

348 
	`Push
(
kthªad
, 
dsSñe˘‹
);

349 
	`Push
(
kthªad
, 
u£rC⁄ãxt
->
°ackPoöãrAddr
);

352 
	`Push
(
kthªad
, 
eÊags
);

353 
	`Push
(
kthªad
, 
csSñe˘‹
);

354 
	`Push
(
kthªad
, 
u£rC⁄ãxt
->
íåyAddr
);

355 i‡(
u£rDebug
)

356 
	`Pröt
("E¡ryáddr=%lx\n", 
u£rC⁄ãxt
->
íåyAddr
);

359 
	`Push
(
kthªad
, 0);

360 
	`Push
(
kthªad
, 0);

367 
	`Push
(
kthªad
, 0);

368 
	`Push
(
kthªad
, 0);

369 
	`Push
(
kthªad
, 0);

370 
	`Push
(
kthªad
, 0);

371 
	`Push
(
kthªad
, 
u£rC⁄ãxt
->
¨gBlockAddr
);

372 
	`Push
(
kthªad
, 0);

373 
	`Push
(
kthªad
, 0);

376 
	`Push
(
kthªad
, 
dsSñe˘‹
);

377 
	`Push
(
kthªad
, 
dsSñe˘‹
);

378 
	`Push
(
kthªad
, 
dsSñe˘‹
);

379 
	`Push
(
kthªad
, 
dsSñe˘‹
);

382 
kthªad
->
afföôy
 = -1;

383 
	}
}

391 
IdÀ
(
ul⁄g_t
 
¨g
 
__©åibuã__
 ((
unu£d
))) {

392 
	gåue
) {

398 
__asm__
("hlt");

400 
Yõld
();

408 
Ró≥r
(
ul⁄g_t
 
¨g
 
__©åibuã__
 ((
unu£d
))) {

409 
Kî√l_Thªad
 *
	gkthªad
;

411 
DißbÀ_I¡îru±s
();

413 
	gåue
) {

414 
Spö_Lock
(&
kthªadLock
);

416 i‡((
	gkthªad
 = 
s_gøvey¨dQueue
.
hód
) == 0) {

418 
Spö_U∆ock
(&
kthªadLock
);

419 
Waô
(&
s_ª≠îWaôQueue
);

422 
CÀ¨_Thªad_Queue
(&
s_gøvey¨dQueue
);

425 
	gkthªad
 != 0) {

426 
Kî√l_Thªad
 *
√xt
 =

427 
Gë_Next_In_Thªad_Queue
(
kthªad
);

430 
De°roy_Thªad
(
kthªad
);

431 
KASSERT
(
kthªad
 !
√xt
);

432 
	gkthªad
 = 
√xt
;

436 
Spö_U∆ock
(&
kthªadLock
);

438 
E«bÀ_I¡îru±s
();

439 
Yõld
();

440 
DißbÀ_I¡îru±s
();

449 
__ölöe__
 
Kî√l_Thªad
 *
	$Föd_Be°
(
Thªad_Queue
 *
queue
) {

450 
˝uID
;

452 
	`KASSERT
(
	`Is_Locked
(&
kthªadLock
));

454 
˝uID
 = 
	`Gë_CPU_ID
();

457 
Kî√l_Thªad
 *
kthªad
 = 
queue
->
hód
, *
be°
 = 0;

458 
kthªad
 != 0) {

459 i‡(
kthªad
->
afföôy
 =
AFFINITY_ANY_CORE
 ||

460 
kthªad
->
afföôy
 =
˝uID
) {

461 i‡(
be°
 =0 || 
kthªad
->
¥i‹ôy
 > best->priority)

463 
be°
 = 
kthªad
;

465 
kthªad
 = 
	`Gë_Next_In_Thªad_Queue
(kthread);

468  
be°
;

469 
	}
}

476 
__ölöe__
 c⁄° **
	$Gë_Tloˇl_Poöãr
(
éoˇl_key_t
 
k
) {

477 
Kî√l_Thªad
 *
cuºít
 = 
CURRENT_THREAD
;

479 
	`KASSERT
(
k
 < 
MAX_TLOCAL_KEYS
);

481  &
cuºít
->
éoˇlD©a
[
k
];

482 
	}
}

492 
	$Tloˇl_Exô
(
Kî√l_Thªad
 *
cuº
) {

493 
i
, 
j
, 
ˇŒed
 = 0;

495 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

497 
j
 = 0; j < 
MIN_DESTRUCTOR_ITERATIONS
; j++) {

499 
i
 = 0; i < 
MAX_TLOCAL_KEYS
; i++) {

501 *
x
 = (*)
cuº
->
éoˇlD©a
[
i
];

502 i‡(
x
 !
NULL
 && 
s_éoˇlDe°ru˘‹s
[
i
] != NULL) {

504 
cuº
->
éoˇlD©a
[
i
] = 
NULL
;

505 
ˇŒed
 = 1;

507 
	`E«bÀ_I¡îru±s
();

508 
s_éoˇlDe°ru˘‹s
[
i
] (
x
);

509 
	`DißbÀ_I¡îru±s
();

512 i‡(!
ˇŒed
)

515 
	}
}

522 
	$Inô_ScheduÀr
(
˝uID
, *
°ack
) {

523 
Kî√l_Thªad
 *
maöThªad
 = (Kî√l_Thªad *)
	`AŒoc_Page
();

525 
	`mem˝y
(
maöThªad
, (*)
KERN_THREAD_OBJ
, (
Kî√l_Thªad
));

531 
	`Inô_Thªad
(
maöThªad
, 
°ack
, 
PRIORITY_NORMAL
, 
åue
);

532 
CURRENT_THREAD
 = 
maöThªad
;

533 
	`Add_To_Back_Of_AŒ_Thªad_Li°
(&
s_ÆlThªadLi°
, 
maöThªad
);

534 
	`°r˝y
(
maöThªad
->
thªadName
, "{Main}");

540 
«me
[30];

541 
	`°r˝y
(
«me
, "{Idle-#?}");

542 
«me
[7] = 
˝uID
 + '0';

543 
CPUs
[
˝uID
].
idÀThªad
 =

544 
	`Sèπ_Kî√l_Thªad
(
IdÀ
, 0, 
PRIORITY_IDLE
, 
åue
, 
«me
);

545 
CPUs
[
˝uID
].
idÀThªad
->
ow√r
 = 
NULL
;

546 
CPUs
[
˝uID
].
idÀThªad
->
afföôy
 = cpuID;

548 i‡(!
˝uID
) {

553 
Kî√l_Thªad
 *
ª≠î
;

555 
ª≠î
 =

556 
	`Sèπ_Kî√l_Thªad
(
Ró≥r
, 0, 
PRIORITY_NORMAL
, 
åue
, "{Reaper}");

558 
	}
}

571 
Kî√l_Thªad
 *
	$Sèπ_Kî√l_Thªad
(
Thªad_Sèπ_Func
 
°¨tFunc
,

572 
ul⁄g_t
 
¨g
,

573 
¥i‹ôy
,

574 
boﬁ
 
dëached
, c⁄° *
«me
) {

575 
Kî√l_Thªad
 *
kthªad
 = 
	`Cª©e_Thªad
(
¥i‹ôy
, 
dëached
);

576 i‡(
kthªad
 != 0) {

581 
	`Sëup_Kî√l_Thªad
(
kthªad
, 
°¨tFunc
, 
¨g
);

585 
	`Make_Ru¬abÀ_Atomic
(
kthªad
);

587 
	`°r˝y
(
kthªad
->
thªadName
, 
«me
);

590  
kthªad
;

591 
	}
}

597 
Kî√l_Thªad
 *
	$Sèπ_U£r_Thªad
(
U£r_C⁄ãxt
 *
u£rC⁄ãxt
,

598 
boﬁ
 
dëached
) {

599 
Kî√l_Thªad
 *
kthªad
 = 
	`Cª©e_Thªad
(
PRIORITY_USER
, 
dëached
);

600 i‡(
kthªad
 != 0) {

602 
	`Sëup_U£r_Thªad
(
kthªad
, 
u£rC⁄ãxt
);

603 
	`Make_Ru¬abÀ_Atomic
(
kthªad
);

606  
kthªad
;

607 
	}
}

613 
	$Make_Ru¬abÀ
(
Kî√l_Thªad
 *
kthªad
) {

614 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

616 
	`Enqueue_Thªad
(&
s_runQueue
, 
kthªad
);

617 
	`TODO_P
(
PROJECT_SCHEDULING
, "replace makeÑunnableásÇeeded");

618 
	}
}

626 
	$Make_Ru¬abÀ_Atomic
(
Kî√l_Thªad
 *
kthªad
) {

627 
	`DißbÀ_I¡îru±s
();

628 
	`Spö_Lock
(&
kthªadLock
);

629 
	`Make_Ru¬abÀ
(
kthªad
);

630 
	`Spö_U∆ock
(&
kthªadLock
);

631 
	`E«bÀ_I¡îru±s
();

632 
	}
}

637 
Kî√l_Thªad
 *
	$Gë_Cuºít
() {

638  
CURRENT_THREAD
;

639 
	}
}

645 
Kî√l_Thªad
 *
	$Gë_Next_Ru¬abÀ_Locked
() {

646 
Kî√l_Thªad
 *
be°
 = 0;

647 
be°
 = 
	`Föd_Be°
(&
s_runQueue
);

648 
	`KASSERT
(
be°
 != 0);

649 
	`Remove_Thªad
(&
s_runQueue
, 
be°
);

650 
˝uID
 = 
	`Gë_CPU_ID
();

652 
	`KASSERT
(
	`Is_Locked
(&
kthªadLock
));

653 
	`TODO_P
(
PROJECT_SCHEDULING
, "fix Get_Next_Runnable");

654  
be°
;

655 
	}
}

657 
Kî√l_Thªad
 *
	$Gë_Next_Ru¬abÀ
() {

658 
Kî√l_Thªad
 *
ªt
;

660 
	`Spö_Lock
(&
kthªadLock
);

662 
ªt
 = 
	`Gë_Next_Ru¬abÀ_Locked
();

665 
	`Spö_U∆ock
(&
kthªadLock
);

667  
ªt
;

668 
	}
}

678 
	$ScheduÀ
() {

679 
Kî√l_Thªad
 *
ru¬abÀ
;

682 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

686 
	`KASSERT
(!
g_¥ìm±i⁄DißbÀd
[
	`Gë_CPU_ID
()]);

689 
ru¬abÀ
 = 
	`Gë_Next_Ru¬abÀ
();

699 
	`Swôch_To_Thªad
(
ru¬abÀ
);

700 
	}
}

706 
	$Yõld
() {

707 
	`DißbÀ_I¡îru±s
();

708 
	`Make_Ru¬abÀ
(
CURRENT_THREAD
);

709 
	`ScheduÀ
();

710 
	`E«bÀ_I¡îru±s
();

711 
	}
}

718 
	$Exô
(
exôCode
) {

719 
	`Munm≠_Im∂
(
uöt_t
 
addr
);

721 
Kî√l_Thªad
 *
cuºít
 = 
CURRENT_THREAD
;

723 i‡(
	`I¡îru±s_E«bÀd
())

724 
	`DißbÀ_I¡îru±s
();

727 
cuºít
->
exôCode
 =ÉxitCode;

728 
cuºít
->
Æive
 = 
Ál£
;

732 
	`Aœrm_C™˚l_F‹_Thªad
(
cuºít
);

735 
	`Tloˇl_Exô
(
CURRENT_THREAD
);

737  
	`Wake_Up
(&
cuºít
->
joöQueue
);

740 
	`Dëach_Thªad
(
CURRENT_THREAD
);

748 
	`ScheduÀ
();

751 
	`KASSERT
(
Ál£
);

752 
	}
}

759 
	$Joö
(
Kî√l_Thªad
 *
kthªad
) {

760 
exôCode
;

762 
	`KASSERT
(
	`I¡îru±s_E«bÀd
());

765 
	`KASSERT
(
kthªad
->
ow√r
 =
CURRENT_THREAD
);

767 
	`DißbÀ_I¡îru±s
();

770 
kthªad
->
Æive
) {

771 
	`Waô
(&
kthªad
->
joöQueue
);

775 
exôCode
 = 
kthªad
->exitCode;

779 
kthªad
->
dëached
 = 1;

782 
	`Dëach_Thªad
(
kthªad
);

784 
	`E«bÀ_I¡îru±s
();

786  
exôCode
;

787 
	}
}

797 
Kî√l_Thªad
 *
	$Lookup_Thªad
(
pid
, 
nŸOw√r
) {

798 
Kî√l_Thªad
 *
ªsu…
 = 0;

800 
boﬁ
 
iÊag
 = 
	`Begö_I¡_Atomic
();

808 
	`Spö_Lock
(&
kthªadLock
);

809 
ªsu…
 = 
	`Gë_Fr⁄t_Of_AŒ_Thªad_Li°
(&
s_ÆlThªadLi°
);

810 
ªsu…
 != 0) {

811 i‡(
ªsu…
->
pid
 ==Öid) {

812 i‡(
CURRENT_THREAD
 !
ªsu…
->
ow√r
 && !
nŸOw√r
)

813 
ªsu…
 = 0;

816 
ªsu…
 = 
	`Gë_Next_In_AŒ_Thªad_Li°
(result);

818 
	`Spö_U∆ock
(&
kthªadLock
);

820 
	`End_I¡_Atomic
(
iÊag
);

822  
ªsu…
;

823 
	}
}

836 
	$Waô
(
Thªad_Queue
 *
waôQueue
) {

837 
Kî√l_Thªad
 *
cuºít
 = 
CURRENT_THREAD
;

839 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

840 
	`KASSERT
(
waôQueue
 !
NULL
);

843 
	`Enqueue_Thªad
(
waôQueue
, 
cuºít
);

846 
	`ScheduÀ
();

848 
	}
}

850 
	$Wake_Up_Locked
(
Thªad_Queue
 *
waôQueue
) {

851 
Kî√l_Thªad
 *
kthªad
 = 
waôQueue
->
hód
, *
√xt
;

853 
	`KASSERT
(
	`Is_Locked
(&
kthªadLock
));

854 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

855 
	`KASSERT
(
waôQueue
 !
NULL
);

861 
kthªad
 = 
waôQueue
->
hód
; kthªad !0; kthªad = 
√xt
) {

862 
√xt
 = 
	`Gë_Next_In_Thªad_Queue
(
kthªad
);

863 *
«me
;

865 i‡(
kthªad
->
u£rC⁄ãxt
) {

866 
«me
 = 
kthªad
->
u£rC⁄ãxt
->name;

868 
«me
 = 
kthªad
->
thªadName
;

872 
	`Make_Ru¬abÀ
(
kthªad
);

876 
	`CÀ¨_Thªad_Queue
(
waôQueue
);

877 
	}
}

886 
	$Wake_Up
(
Thªad_Queue
 *
waôQueue
) {

887 
	`Spö_Lock
(&
kthªadLock
);

888 
	`Wake_Up_Locked
(
waôQueue
);

889 
	`Spö_U∆ock
(&
kthªadLock
);

890 
	}
}

898 
	$Wake_Up_O√
(
Thªad_Queue
 *
waôQueue
) {

899 
Kî√l_Thªad
 *
be°
;

901 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

902 
	`KASSERT
(
waôQueue
 !
NULL
);

904 
	`Spö_Lock
(&
kthªadLock
);

906 
be°
 = 
	`Föd_Be°
(
waôQueue
);

908 i‡(
be°
 != 0) {

909 
	`Remove_Thªad
(
waôQueue
, 
be°
);

910 
	`Make_Ru¬abÀ
(
be°
);

914 
	`Spö_U∆ock
(&
kthªadLock
);

915 
	}
}

920 
	$Tloˇl_Cª©e
(
éoˇl_key_t
 * 
key
, 
éoˇl_de°ru˘‹_t
 
de°ru˘‹
) {

921 
boﬁ
 
iÊag
 = 
	`Begö_I¡_Atomic
();

923 
	`KASSERT
(
key
);

925 i‡(
s_éoˇlKeyCou¡î
 =
MAX_TLOCAL_KEYS
)

927 
s_éoˇlDe°ru˘‹s
[
s_éoˇlKeyCou¡î
] = 
de°ru˘‹
;

928 *
key
 = 
s_éoˇlKeyCou¡î
++;

930 
	`End_I¡_Atomic
(
iÊag
);

933 
	}
}

938 
	$Tloˇl_Put
(
éoˇl_key_t
 
k
, c⁄° *
v
) {

939 c⁄° **
pv
;

941 
	`KASSERT
(
k
 < 
s_éoˇlKeyCou¡î
);

943 
pv
 = 
	`Gë_Tloˇl_Poöãr
(
k
);

944 *
pv
 = 
v
;

945 
	}
}

950 *
	$Tloˇl_Gë
(
éoˇl_key_t
 
k
) {

951 c⁄° **
pv
;

953 
	`KASSERT
(
k
 < 
s_éoˇlKeyCou¡î
);

955 
pv
 = 
	`Gë_Tloˇl_Poöãr
(
k
);

956  (*)*
pv
;

957 
	}
}

963 
	$Dump_AŒ_Thªad_Li°
() {

964 
Kî√l_Thªad
 *
kthªad
;

965 
cou¡
 = 0;

966 
boﬁ
 
iÊag
 = 
	`Begö_I¡_Atomic
();

968 
	`Spö_Lock
(&
kthªadLock
);

970 
kthªad
 = 
	`Gë_Fr⁄t_Of_AŒ_Thªad_Li°
(&
s_ÆlThªadLi°
);

972 
	`Pröt
("[");

973 
kthªad
 != 0) {

974 ++
cou¡
;

975 
	`Pröt
("<%lx,%lx,%lx>",

976 (
ul⁄g_t
Ë
	`Gë_Pªv_In_AŒ_Thªad_Li°
(
kthªad
),

977 (
ul⁄g_t
Ë
kthªad
,

978 (
ul⁄g_t
Ë
	`Gë_Next_In_AŒ_Thªad_Li°
(
kthªad
));

979 
	`KASSERT
(
kthªad
 !
	`Gë_Next_In_AŒ_Thªad_Li°
(kthread));

980 
kthªad
 = 
	`Gë_Next_In_AŒ_Thªad_Li°
(kthread);

982 
	`Pröt
("]\n");

983 
	`Pröt
("%dÅhªad†¨êru¬ög\n", 
cou¡
);

985 
	`Spö_U∆ock
(&
kthªadLock
);

986 
	`End_I¡_Atomic
(
iÊag
);

987 
	}
}

	@src/geekos/main.c

19 
	~<gìkos/boŸöfo.h
>

20 
	~<gìkos/°rög.h
>

21 
	~<gìkos/s¸ìn.h
>

22 
	~<gìkos/mem.h
>

23 
	~<gìkos/¸c32.h
>

24 
	~<gìkos/tss.h
>

25 
	~<gìkos/öt.h
>

26 
	~<gìkos/kthªad.h
>

27 
	~<gìkos/å≠.h
>

28 
	~<gìkos/timî.h
>

29 
	~<gìkos/keybﬂrd.h
>

30 
	~<gìkos/dma.h
>

31 
	~<gìkos/ide.h
>

32 
	~<gìkos/Ê›py.h
>

33 
	~<gìkos/pÁt.h
>

34 
	~<gìkos/vfs.h
>

35 
	~<gìkos/u£r.h
>

36 
	~<gìkos/∑gög.h
>

37 
	~<gìkos/gosfs.h
>

38 
	~<gìkos/gfs2.h
>

39 
	~<gìkos/cfs.h
>

40 
	~<gìkos/√t/√2000.h
>

41 
	~<gìkos/√t/√t.h
>

42 
	~<gìkos/√t/√tbuf.h
>

43 
	~<gìkos/√t/¨p.h
>

44 
	~<gìkos/Æ¨m.h
>

45 
	~<gìkos/√t/ù.h
>

46 
	~<gìkos/√t/routög.h
>

47 
	~<gìkos/√t/sockë.h
>

48 
	~<gìkos/√t/rù.h
>

49 
	~<gìkos/¥oje˘s.h
>

50 
	~<gìkos/sound.h
>

51 
	~<gìkos/smp.h
>

52 
	~<gìkos/io.h
>

62 #ifde‡
FD_BOOT


63 
	#ROOT_DEVICE
 "fd0"

	)

64 
	#ROOT_PREFIX
 "a"

	)

66 
	#ROOT_DEVICE
 "ide0"

	)

67 
	#ROOT_PREFIX
 "c"

	)

70 
	#INIT_PROGRAM
 "/" 
ROOT_PREFIX
 "/shñl.exe"

	)

74 
Mou¡_RoŸ_Fûesy°em
();

75 
S∑wn_Inô_Pro˚ss
();

83 
checkPagög
();

86 
	$H¨dw¨e_Shutdown
() {

89 
	`Out_Byã
(0x501, 0x00);

92 
	`Out_Byã
(0x8900, 'S');

93 
	`Out_Byã
(0x8900, 'h');

94 
	`Out_Byã
(0x8900, 'u');

95 
	`Out_Byã
(0x8900, 't');

96 
	`Out_Byã
(0x8900, 'd');

97 
	`Out_Byã
(0x8900, 'o');

98 
	`Out_Byã
(0x8900, 'w');

99 
	`Out_Byã
(0x8900, 'n');

100 
	}
}

102 
	$Maö
(
BoŸ_Info
 *
boŸInfo
) {

103 
	`Inô_BSS
();

104 
	`Inô_S¸ìn
();

105 
	`Inô_Mem
(
boŸInfo
);

106 
	`Inô_CRC32
();

107 
	`Inô_TSS
();

109 
	`lockKî√l
();

110 
	`Inô_I¡îru±s
(0);

111 
	`Inô_SMP
();

112 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_A
,

114 
	`Inô_ScheduÀr
(0, (*)
KERN_STACK
);

115 
	`Inô_Tøps
();

116 
	`Inô_Loˇl_APIC
(0);

117 
	`Inô_Timî
();

119 
	`Inô_Keybﬂrd
();

120 
	`Inô_DMA
();

122 
	`Inô_IDE
();

123 
	`Inô_PFAT
();

124 
	`Inô_GFS2
();

125 
	`Inô_GOSFS
();

126 
	`Inô_CFS
();

127 
	`Inô_Aœrm
();

129 
	`Rñó£_SMP
();

132 
	`Inô_Nëw‹k_Devi˚s
();

133 
	`Inô_ARP_PrŸocﬁ
();

134 
	`Inô_IP
();

135 
	`Inô_Routög
();

136 
	`Inô_Sockës
();

137 
	`Inô_RIP
();

141 
	`Inô_Sound_Devi˚s
();

144 
	`Mou¡_RoŸ_Fûesy°em
();

146 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_A
, "initializeÖage file.");

148 
	`Së_Cuºít_Aâr
(
	`ATTRIB
(
BLACK
, 
GREEN
 | 
BRIGHT
));

149 
	`Pröt
("WelcomeÅo GeekOS!\n");

150 
	`Së_Cuºít_Aâr
(
	`ATTRIB
(
BLACK
, 
GRAY
));

152 
	`TODO_P
(
PROJECT_SOUND
, "play startup sound");

154 
	`S∑wn_Inô_Pro˚ss
();

157 
	`H¨dw¨e_Shutdown
();

160 
	}
}

164 
	$Mou¡_RoŸ_Fûesy°em
() {

165 i‡(
	`Mou¡
(
ROOT_DEVICE
, 
ROOT_PREFIX
, "pfat") != 0)

166 
	`Pröt
("FaûedÅÿmou¡ /" 
ROOT_PREFIX
 " filesystem\n");

168 
	`Pröt
("Mou¡ed /" 
ROOT_PREFIX
 " filesystem!\n");

170 
	}
}

177 
	$S∑wn_Inô_Pro˚ss
() {

178 
rc
;

179 
Kî√l_Thªad
 *
öôPro˚ss
;

182 
	`Pröt
("S∑wnög inôÖro˚s†(%s)\n", 
INIT_PROGRAM
);

183 
rc
 = 
	`S∑wn_F‹eground
(
INIT_PROGRAM
, INIT_PROGRAM, &
öôPro˚ss
);

185 i‡(
rc
 != 0) {

186 
	`Pröt
("FaûedÅÿ•aw¿öôÖro˚ss:Éº‹ codê%d\n", 
rc
);

189 
exôCode
 = 
	`Joö
(
öôPro˚ss
);

190 
	`Pröt
("InôÖro˚s†exôed wôh codê%d\n", 
exôCode
);

192 
	}
}

	@src/geekos/malloc.c

10 
	~<gìkos/s¸ìn.h
>

11 
	~<gìkos/öt.h
>

12 
	~<gìkos/bgë.h
>

13 
	~<gìkos/kas£π.h
>

14 
	~<gìkos/mÆloc.h
>

15 
	~<gìkos/lock.h
>

16 
	~<°rög.h
>

22 
	$Inô_Hóp
(
ul⁄g_t
 
°¨t
, ul⁄g_à
size
) {

23 
	`Pröt
("Cª©ög kî√»hóp: sèπ=%lx, size=%ld\n", 
°¨t
, 
size
);

24 
	`bpoﬁ
((*)
°¨t
, 
size
);

25 
	}
}

27 
Spö_Lock_t
 
	gmÆlocLock
;

34 *
	$MÆloc
(
ul⁄g_t
 
size
) {

35 
boﬁ
 
iÊag
;

36 *
ªsu…
;

38 
	`KASSERT
(
size
 > 0);

40 
iÊag
 = 
	`Begö_I¡_Atomic
();

41 
ªsu…
 = 
	`bgë
(
size
);

42 
	`End_I¡_Atomic
(
iÊag
);

44 i‡(
ªsu…
)

45 
	`mem£t
(
ªsu…
, '\0', 
size
);

47 i‡(!
ªsu…
) {

49 
	`H¨dw¨e_Shutdown
();

50 
	`H¨dw¨e_Shutdown
();

52  
ªsu…
;

53 
	}
}

58 
	$Fªe
(*
buf
) {

59 
boﬁ
 
iÊag
;

61 
	`KASSERT0
(((()
buf
) & 0x3) == 0,

64 
iÊag
 = 
	`Begö_I¡_Atomic
();

65 
	`bªl
(
buf
);

66 
	`End_I¡_Atomic
(
iÊag
);

67 
	}
}

	@src/geekos/mem.c

18 
	~<gìkos/defs.h
>

19 
	~<gìkos/kty≥s.h
>

20 
	~<gìkos/kas£π.h
>

21 
	~<gìkos/kthªad.h
>

22 
	~<gìkos/boŸöfo.h
>

23 
	~<gìkos/gdt.h
>

24 
	~<gìkos/s¸ìn.h
>

25 
	~<gìkos/öt.h
>

26 
	~<gìkos/mÆloc.h
>

27 
	~<gìkos/°rög.h
>

28 
	~<gìkos/∑gög.h
>

29 
	~<gìkos/mem.h
>

38 
Page
 *
	gg_∑geLi°
;

43 
uöt_t
 
	gg_‰ìPageCou¡
 = 0;

52 
debugFau…s
;

53 
	#Debug
(
¨gs
...Ëi‡(
debugFau…s
Ë
	`Pröt
◊rgs)

	)

58 
Page_Li°
 
	gs_‰ìLi°
;

63 
	gs_numPages
;

68 
	$Add_Page_R™ge
(
ul⁄g_t
 
°¨t
, ul⁄g_à
íd
, 
Êags
) {

69 
ul⁄g_t
 
addr
;

71 
	`KASSERT
(
	`Is_Page_Mu…ùÀ
(
°¨t
));

72 
	`KASSERT
(
	`Is_Page_Mu…ùÀ
(
íd
));

73 
	`KASSERT
(
°¨t
 < 
íd
);

75 
addr
 = 
°¨t
;ádd∏< 
íd
;ádd∏+
PAGE_SIZE
) {

76 
Page
 *
∑ge
 = 
	`Gë_Page
(
addr
);

78 
∑ge
->
Êags
 = flags;

80 i‡(
Êags
 =
PAGE_AVAIL
) {

82 
	`Unchecked_Add_To_Back_Of_Page_Li°
(&
s_‰ìLi°
, 
∑ge
);

85 ++
g_‰ìPageCou¡
;

87 
	`Së_Next_In_Page_Li°
(
∑ge
, 0);

88 
	`Së_Pªv_In_Page_Li°
(
∑ge
, 0);

91 
∑ge
->
˛ock
 = 0;

92 
∑ge
->
vaddr
 = 0;

93 
∑ge
->
c⁄ãxt
 = 
NULL
;

94 
∑ge
->
íåy
 = 0;

96 
	}
}

106 
íd
;

112 
	$Inô_Mem
(
BoŸ_Info
 *
boŸInfo
) {

113 i‡(!
boŸInfo
->
memSizeKB
) {

115 
i
;

117 
i
 = 0; i < 
boŸInfo
->
numMemRegi⁄s
; i++) {

118 i‡((
boŸInfo
->
memRegi⁄s
[
i
].
ba£Addr_low
 == 0x100000) &&

119 (
boŸInfo
->
memRegi⁄s
[
i
].
ty≥
 == 1)) {

120 
boŸInfo
->
memSizeKB
 =

121 
boŸInfo
->
memRegi⁄s
[
i
].
Àngth_low
 / 1024;

124 
boŸInfo
->
memSizeKB
 += 0x1000;

127 
ul⁄g_t
 
numPages
 = 
boŸInfo
->
memSizeKB
 >> 2;

128 
ul⁄g_t
 
ídOfMem
 = 
numPages
 * 
PAGE_SIZE
;

129 
numPageLi°Byãs
 = (
Page
Ë* 
numPages
;

130 
ul⁄g_t
 
∑geLi°Addr
;

131 
ul⁄g_t
 
kînEnd
;

132 
ul⁄g_t
 
∑geLi°End
;

134 
	`KASSERT
(
boŸInfo
->
memSizeKB
 > 0);

140 
	`Inô_GDT
(0);

148 
∑geLi°Addr
 = (
HIGHMEM_START
 + 
KERNEL_HEAP_SIZE
);

149 i‡(
∑geLi°Addr
 >
ídOfMem
) {

150 
Pröt


152 
KERNEL_HEAP_SIZE
, 
HIGHMEM_START
, 
ídOfMem
);

153 
	`KASSERT0
(
∑geLi°Addr
 < 
ídOfMem
,

156 
g_∑geLi°
 = (
Page
 *)
∑geLi°Addr
;

157 
∑geLi°End
 = 
	`Round_Up_To_Page
(
∑geLi°Addr
 + 
numPageLi°Byãs
);

160 
	`mem£t
((*)
g_∑geLi°
, '\0', (
∑geLi°End
 - (
ul⁄g_t
) g_pageList));

162 
kînEnd
 = 
	`Round_Up_To_Page
(()&
íd
);

163 
s_numPages
 = 
numPages
;

169 
	`KASSERT
(
ISA_HOLE_END
 =
KERN_THREAD_OBJ
);

170 
	`KASSERT
(
KERN_STACK
 =
KERN_THREAD_OBJ
 + 
PAGE_SIZE
);

184 
	`Add_Page_R™ge
(0, 
PAGE_SIZE
, 
PAGE_UNUSED
);

185 
	`Add_Page_R™ge
(
PAGE_SIZE
, 
KERNEL_START_ADDR
, 
PAGE_AVAIL
);

186 
	`Add_Page_R™ge
(
KERNEL_START_ADDR
, 
kînEnd
, 
PAGE_KERN
);

187 
	`Add_Page_R™ge
(
kînEnd
, 
ISA_HOLE_START
, 
PAGE_AVAIL
);

188 
	`Add_Page_R™ge
(
ISA_HOLE_START
, 
ISA_HOLE_END
, 
PAGE_HW
);

189 
	`Add_Page_R™ge
(
ISA_HOLE_END
, 
HIGHMEM_START
, 
PAGE_ALLOCATED
);

190 
	`Add_Page_R™ge
(
HIGHMEM_START
, HIGHMEM_START + 
KERNEL_HEAP_SIZE
,

191 
PAGE_HEAP
);

192 
	`Add_Page_R™ge
(
∑geLi°Addr
, 
∑geLi°End
, 
PAGE_KERN
);

193 i‡(
∑geLi°End
 > 
ídOfMem
) {

194 
	`KASSERT0
(
∑geLi°End
 < 
ídOfMem
,

198 
	`Add_Page_R™ge
(
∑geLi°End
, 
ídOfMem
, 
PAGE_AVAIL
);

201 
	`Inô_Hóp
(
HIGHMEM_START
, 
KERNEL_HEAP_SIZE
);

203 
Pröt


205 
boŸInfo
->
memSizeKB
, 
g_‰ìPageCou¡
, 
KERNEL_HEAP_SIZE
);

206 
	}
}

211 
	$Inô_BSS
() {

212 
BSS_START
, 
BSS_END
;

215 
	`mem£t
(&
BSS_START
, '\0', &
BSS_END
 - &BSS_START);

216 
	}
}

218 *
	$AŒoc_Page_Føme
() {

219 
Page
 *
∑ge
;

220 *
ªsu…
 = 0;

223 i‡(!
	`Is_Page_Li°_Em±y
(&
s_‰ìLi°
)) {

225 
∑ge
 = 
	`Gë_Fr⁄t_Of_Page_Li°
(&
s_‰ìLi°
);

226 
	`KASSERT
((
∑ge
->
Êags
 & 
PAGE_ALLOCATED
) == 0);

227 
	`Remove_From_Fr⁄t_Of_Page_Li°
(&
s_‰ìLi°
);

230 
∑ge
->
Êags
 |
PAGE_ALLOCATED
;

231 
g_‰ìPageCou¡
--;

232 
ªsu…
 = (*)
	`Gë_Page_Addªss
(
∑ge
);

235 i‡(
ªsu…
) {

236 
	`mem£t
(
ªsu…
, '\0', 4096);

239  
ªsu…
;

240 
	}
}

246 
Page
 *
	$Föd_Page_To_Page_Out
() {

247 
i
;

248 
Page
 *
cuº
, *
be°
;

249 
be°
 = 
NULL
;

250 
i
 = 0; i < 
s_numPages
; i++) {

251 i‡((
g_∑geLi°
[
i
].
Êags
 & 
PAGE_PAGEABLE
) &&

252 (
g_∑geLi°
[
i
].
Êags
 & 
PAGE_ALLOCATED
)) {

253 i‡(!
be°
)

254 
be°
 = &
g_∑geLi°
[
i
];

255 
cuº
 = &
g_∑geLi°
[
i
];

256 i‡((
cuº
->
˛ock
 < 
be°
->˛ockË&& (cuº->
Êags
 & 
PAGE_PAGEABLE
)) {

257 
be°
 = 
cuº
;

261  
be°
;

264 
	}
}

275 *
	$AŒoc_Or_Re˛aim_Page
(
±e_t
 * 
íåy
, 
ul⁄g_t
 
vaddr
,

276 
boﬁ
 
pö√dPage
) {

277 
boﬁ
 
iÊag
;

278 
boﬁ
 
m≠≥dPage
;

279 *
∑ddr
 = 0;

280 
Page
 *
∑ge
 = 0;

282 
iÊag
 = 
	`Begö_I¡_Atomic
();

284 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

285 
	`KASSERT
(
	`Is_Page_Mu…ùÀ
(
vaddr
));

287 
∑ddr
 = 
	`AŒoc_Page_Føme
();

288 i‡(
∑ddr
 != 0) {

289 
∑ge
 = 
	`Gë_Page
((
ul⁄g_t
Ë
∑ddr
);

290 
	`KASSERT
((
∑ge
->
Êags
 & 
PAGE_PAGEABLE
) == 0);

292 
∑gefûeIndex
;

295 
	`Debug
("AboutÅo hunt foráÖageÅoÖage out\n");

296 
∑ge
 = 
	`Föd_Page_To_Page_Out
();

297 
	`KASSERT
(
∑ge
->
Êags
 & 
PAGE_PAGEABLE
);

299 
∑ddr
 = (*)
	`Gë_Page_Addªss
(
∑ge
);

300 
	`Debug
("Sñe˘edÖagê©ádd∏%∞◊gê%d)\n", 
∑ddr
, 
∑ge
->
˛ock
);

303 
∑ge
->
Êags
 &~(
PAGE_PAGEABLE
);

306 
∑ge
->
Êags
 |
PAGE_LOCKED
;

309 i‡(
	`Is_Mm≠ed_Page
(
∑ge
->
c⁄ãxt
,Öage->
vaddr
)) {

310 
m≠≥dPage
 = 
åue
;

311 i‡(
∑ge
->
íåy
->
dúty
) {

312 
	`E«bÀ_I¡îru±s
();

313 
	`Wrôe_Out_Mm≠ed_Page
(
∑ge
->
c⁄ãxt
,Öage->
vaddr
);

314 
	`DißbÀ_I¡îru±s
();

315 
∑ge
->
íåy
->
dúty
 = 0;

317 
∑ge
->
íåy
->
¥e£¡
 = 0;

319 
m≠≥dPage
 = 
Ál£
;

322 
∑gefûeIndex
 = 
	`Föd_S∑˚_On_Pagög_Fûe
();

323 i‡(
∑gefûeIndex
 < 0) {

325 
	`KASSERT0
(
∑ddr
 =
NULL
,

327 
d⁄e
;

329 
	`Debug
("FªêdiskÖagê© index %d\n", 
∑gefûeIndex
);

332 
	`Debug
("WrôögÖhysiˇ»‰amê%∞tÿ∑gög fûê© %d\n", 
∑ddr
,

333 
∑gefûeIndex
);

334 
	`E«bÀ_I¡îru±s
();

335 
	`Wrôe_To_Pagög_Fûe
(
∑ddr
, 
∑ge
->
vaddr
, 
∑gefûeIndex
);

336 
	`DißbÀ_I¡îru±s
();

338 
	`Debug
("WrŸêphysiˇ»‰amê%∞tÿ∑gög fûê© %d\n", 
∑ddr
,

339 
∑gefûeIndex
);

343 i‡(
∑ge
->
Êags
 & 
PAGE_ALLOCATED
) {

346 
∑ge
->
íåy
->
¥e£¡
 = 0;

347 i‡(!
m≠≥dPage
) {

348 
∑ge
->
íåy
->
kî√lInfo
 = 
KINFO_PAGE_ON_DISK
;

349 
∑ge
->
íåy
->
∑geBa£Addr
 = 
∑gefûeIndex
;

353 i‡(!
m≠≥dPage
) {

354 
	`Fªe_S∑˚_On_Pagög_Fûe
(
∑gefûeIndex
);

358 
∑ge
->
Êags
 |
PAGE_ALLOCATED
;

362 
∑ge
->
Êags
 &~(
PAGE_LOCKED
);

365 
	`Flush_TLB
();

369 i‡(
pö√dPage
) {

370 
∑ge
->
Êags
 |
PAGE_LOCKED
;

371 
∑ge
->
íåy
 = 
NULL
;

372 
∑ge
->
vaddr
 = 0;

373 
∑ge
->
c⁄ãxt
 = 
NULL
;

375 
∑ge
->
Êags
 |
PAGE_PAGEABLE
;

376 
∑ge
->
íåy
 =Éntry;

377 
∑ge
->
íåy
->
kî√lInfo
 = 0;

378 
∑ge
->
vaddr
 = vaddr;

379 
∑ge
->
c⁄ãxt
 = 
CURRENT_THREAD
->
u£rC⁄ãxt
;

380 
	`KASSERT
(
∑ge
->
Êags
 & 
PAGE_ALLOCATED
);

383 
d⁄e
:

384 
	`End_I¡_Atomic
(
iÊag
);

385  
∑ddr
;

386 
	}
}

391 *
	$AŒoc_Page
() {

392 *
ªt
;

394 
ªt
 = 
	`AŒoc_Or_Re˛aim_Page
(
NULL
, 0, 
åue
);

395 i‡(!
ªt
) {

397 
	`H¨dw¨e_Shutdown
();

398 
	`H¨dw¨e_Shutdown
();

401  
ªt
;

402 
	}
}

413 *
	$AŒoc_PagóbÀ_Page
(
±e_t
 * 
íåy
, 
ul⁄g_t
 
vaddr
) {

414  
	`AŒoc_Or_Re˛aim_Page
(
íåy
, 
vaddr
, 
Ál£
);

415 
	}
}

420 
	$Fªe_Page
(*
∑geAddr
) {

421 
ul⁄g_t
 
addr
 = (ul⁄g_tË
∑geAddr
;

422 
Page
 *
∑ge
;

424 
	`mem£t
(
∑geAddr
, '\0', 4096);

426 
	`KASSERT
(
	`Is_Page_Mu…ùÀ
(
addr
));

429 
∑ge
 = 
	`Gë_Page
(
addr
);

430 
	`KASSERT0
(
∑ge
, "Couldn't findá struct Page * forÅhe givenÖageAddr");

432 
	`KASSERT0
((
∑ge
->
Êags
 & 
PAGE_ALLOCATED
) != 0,

436 
∑ge
->
Êags
 &~(
PAGE_ALLOCATED
);

439 i‡(
∑ge
->
Êags
 & 
PAGE_LOCKED
)

443 
∑ge
->
Êags
 &~(
PAGE_PAGEABLE
);

446 
∑ge
->
íåy
 = 0;

449 
	`Add_To_Back_Of_Page_Li°
(&
s_‰ìLi°
, 
∑ge
);

450 
g_‰ìPageCou¡
++;

452 
	}
}

	@src/geekos/net/arp.c

10 
	~<gìkos/mÆloc.h
>

11 
	~<gìkos/î∫o.h
>

12 
	~<gìkos/kas£π.h
>

13 
	~<gìkos/kthªad.h
>

14 
	~<gìkos/li°.h
>

15 
	~<gìkos/öt.h
>

16 
	~<gìkos/timî.h
>

17 
	~<gìkos/öt.h
>

18 
	~<gìkos/Æ¨m.h
>

20 
	~<gìkos/√t/¨p.h
>

21 
	~<gìkos/√t/ëhî√t.h
>

22 
	~<gìkos/√t/ù.h
>

24 
	~<gìkos/¥oje˘s.h
>

26 
	#ARP_TIMEOUT_MS
 10000

	)

29 
	#DEBUG_ARP
(
x
...)

	)

31 
ARP_TabÀ
 
	gs_¨pTabÀ
;

32 
Muãx
 
	gs_¨pTabÀMuãx
;

35 
ARP_TabÀ_In£π
(
ush‹t_t
 
hty≥
, ush‹t_à
±y≥
,

36 c⁄° 
uch¨_t


37 
h¨dw¨eAddªss
[
ARP_HWARE_ADDR_SIZE
],

38 c⁄° 
uch¨_t


39 
¥ŸocﬁAddªss
[
ARP_PROT_ADDR_SIZE
]);

41 
ARP_Síd_Rïly
(
Në_Devi˚
 *
devi˚
,

42 
ARP_Packë
 *
ª˚ivedPackë
,

43 c⁄° 
uch¨_t
 
¥ŸocﬁAddªss
[
ARP_PROT_ADDR_SIZE
]);

44 
ARP_Síd_Reque°
(
Në_Devi˚
 *
devi˚
,

45 
ush‹t_t
 
hty≥
,

46 
ush‹t_t
 
±y≥
,

47 c⁄° 
uch¨_t


48 
¥ŸocﬁAddªss
[
ARP_PROT_ADDR_SIZE
]);

51 
boﬁ
 
ARP_Com∑ª_PrŸocﬁ_Addªs£s
(
ush‹t_t
 
±y≥


52 
__©åibuã__
 ((
unu£d
)),

53 c⁄° 
uch¨_t


54 
pAddr1
[
ARP_PROT_ADDR_SIZE
],

55 c⁄° 
uch¨_t


56 
pAddr2
[
ARP_PROT_ADDR_SIZE
]) {

57 
	gi
;

58 
	gi
 = 0; i < 
	gARP_PROT_ADDR_SIZE
; ++i) {

59 i‡(
	gpAddr1
[
i
] !
pAddr2
[i])

60  
Ál£
;

62  
	gåue
;

67 
	$ARP_Gë_PrŸocﬁ_Addªss
(
Në_Devi˚
 *
devi˚
, 
±y≥
,

68 
uch¨_t
 * 
¥ŸocﬁAddªss
) {

69 
	`KASSERT0
(
devi˚
,

71 i‡(
±y≥
 =
ARP_PTYPE_IPV4
) {

72 
IP_Devi˚
 *
ùDevi˚
 = 
NULL
;

73 
rc
 = 
	`IP_Devi˚_Gë_By_Name
(&
ùDevi˚
, 
devi˚
->
devName
);

74 i‡(
rc
 != 0) {

75 
	`DEBUG_ARP
("failedÅo get IPáddress of device %s: %d\n",

76 
devi˚
->
devName
, 
rc
);

77  
rc
;

79 
	`mem˝y
(
¥ŸocﬁAddªss
, 
ùDevi˚
->
ùAddªss
.
±r
, 4);

82 
	`DEBUG_ARP
("unsuµ‹ãdÖrŸocﬁÅy≥ %d\n", 
±y≥
);

86 
	}
}

89 
	$ARP_Di•©ch
(
Në_Devi˚
 *
devi˚
, 
Në_Buf
 *
nBuf
) {

90 
ARP_Packë
 
∑ckë
;

92 
	`Në_Buf_Exåa˘
(
nBuf
, 0, &
∑ckë
, (packet));

93 
rc
 = 0;

95 
	`TODO_P
(
PROJECT_ARP
,

97  
EUNSUPPORTED
;

98 
	}
}

100 
	$ARP_Tønsmô
(
Në_Devi˚
 *
devi˚
, 
ARP_Packë
 *
∑ckë
,

101 
uch¨_t
 * 
ëhDe°Addr
) {

102 
∑ddögNìded
 = (
ARP_Packë
Ë- 
ETH_MIN_DATA
;

103 
Në_Buf
 *
nBuf
 = 
NULL
;

104 
rc
 = 
	`Në_Buf_Cª©e
(&
nBuf
);

105 i‡(
rc
 != 0)

106 
Áû
;

108 
rc
 = 
	`Në_Buf_Pª≥nd
(
nBuf
, 
∑ckë
, (
ARP_Packë
),

109 
NET_BUF_ALLOC_LEND
);

110 i‡(
rc
 != 0)

111 
Áû
;

113 
	`Eth_Tønsmô
(
devi˚
, 
nBuf
, 
ëhDe°Addr
, 
ETH_ARP
);

115 
	`Në_Buf_De°roy
(
nBuf
);

117  
rc
;

119 
Áû
:

120 
	`DEBUG_ARP
("failedÅoÅransmit");

121  
rc
;

122 
	}
}

124 
	$ARP_Síd_Reque°
(
Në_Devi˚
 *
devi˚
,

125 
ush‹t_t
 
hty≥
,

126 
ush‹t_t
 
±y≥
,

127 c⁄° 
uch¨_t


128 
¥ŸocﬁAddªss
[
ARP_PROT_ADDR_SIZE
]) {

129 
uch¨_t
 
ëhDe°Addr
[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

130 
rc
 = 0;

132 
ARP_Packë
 *
∑ckë
 = 
	`MÆloc
((ARP_Packet));

133 i‡(
∑ckë
 =
NULL
)

134  
ENOMEM
;

136 
	`TODO_P
(
PROJECT_ARP
, "Fill inÅheárpÑequest");

138 
rc
 = 
	`ARP_Tønsmô
(
devi˚
, 
∑ckë
, 
ëhDe°Addr
);

140 
Áû
:

141 
	`Fªe
(
∑ckë
);

142  
rc
;

143 
	}
}

145 
	$ARP_Síd_Rïly
(
Në_Devi˚
 *
devi˚
,

146 
ARP_Packë
 *
ª˚ivedPackë
,

147 c⁄° 
uch¨_t
 
¥ŸocﬁAddªss
[
ARP_PROT_ADDR_SIZE
]) {

148 
rc
 = 0;

149 
	`TODO_P
(
PROJECT_ARP
,

152  
rc
;

153 
	}
}

155 
	$ARP_Síd_Reque°_And_Waô
(
Në_Devi˚
 *
devi˚
, 
ush‹t_t
 
hty≥
,

156 
ush‹t_t
 
±y≥
,

157 
ARP_PrŸocﬁ_Addªss
 
¥ŸocﬁAddªss
) {

158 
rc
 = 0;

160 
	`KASSERT
(
	`I¡îru±s_E«bÀd
());

162 
	`TODO_P
(
PROJECT_ARP
,

165  
rc
;

166 
	}
}

169 
ARP_TabÀ_EÀmít
 *
	$ARP_Föd_By_PrŸo
(
ush‹t_t
 
hty≥
,

170 
ush‹t_t
 
±y≥
,

171 c⁄° 
uch¨_t


172 
¥ŸocﬁAddªss


173 [
ARP_PROT_ADDR_SIZE
]) {

174 
ARP_TabÀ_EÀmít
 *
cuº
;

175 
cuº
 = 
	`Gë_Fr⁄t_Of_ARP_TabÀ
(&
s_¨pTabÀ
);

176 
cuº
 !
NULL
; cuº = 
	`Gë_Next_In_ARP_TabÀ
(curr)) {

177 i‡(
cuº
->
hty≥
 == htype &&

178 
cuº
->
±y≥
 ==Ötype &&

179 
	`ARP_Com∑ª_PrŸocﬁ_Addªs£s
(
±y≥
, 
cuº
->
¥ŸocﬁAddªss
,

180 
¥ŸocﬁAddªss
)) {

181  
cuº
;

184  
NULL
;

185 
	}
}

188 
	$ARP_TabÀ_Lookup
(
ush‹t_t
 
hty≥
, ush‹t_à
±y≥
,

189 c⁄° 
uch¨_t
 
¥ŸocﬁAddªss
[
ARP_PROT_ADDR_SIZE
],

190 
uch¨_t
 
h¨dw¨eAddªssDe°
[
ARP_HWARE_ADDR_SIZE
])

192 
ARP_TabÀ_EÀmít
 *
cuº
;

193 
ªt
;

195 
	`KASSERT0
(
h¨dw¨eAddªssDe°
 !
NULL
,

198 
	`Muãx_Lock
(&
s_¨pTabÀMuãx
);

199 
cuº
 = 
	`ARP_Föd_By_PrŸo
(
hty≥
, 
±y≥
, 
¥ŸocﬁAddªss
);

200 i‡(
cuº
) {

201 
	`mem˝y
(
h¨dw¨eAddªssDe°
, 
cuº
->
h¨dw¨eAddªss
,

202 
ARP_HWARE_ADDR_SIZE
);

203 
ªt
 = 0;

205 
ªt
 = -1;

207 
	`Muãx_U∆ock
(&
s_¨pTabÀMuãx
);

208  
ªt
;

209 
	}
}

211 
	$ARP_TabÀ_In£π
(
ush‹t_t
 
hty≥
, ush‹t_à
±y≥
,

212 c⁄° 
uch¨_t


213 
h¨dw¨eAddªss
[
ARP_HWARE_ADDR_SIZE
],

214 c⁄° 
uch¨_t


215 
¥ŸocﬁAddªss
[
ARP_PROT_ADDR_SIZE
]) {

216 
	`Muãx_Lock
(&
s_¨pTabÀMuãx
);

217 
ARP_TabÀ_EÀmít
 *
ñemít
 =

218 
	`MÆloc
((
ARP_TabÀ_EÀmít
));

219 i‡(
ñemít
 =
NULL
)

220  
ENOMEM
;

222 
ñemít
->
hty≥
 = htype;

223 
ñemít
->
±y≥
 =Ötype;

224 
	`mem˝y
(
ñemít
->
h¨dw¨eAddªss
, h¨dw¨eAddªss, 
ARP_HWARE_ADDR_SIZE
);

225 
	`mem˝y
(
ñemít
->
¥ŸocﬁAddªss
,ÖrŸocﬁAddªss, 
ARP_PROT_ADDR_SIZE
);

227 
	`Add_To_Fr⁄t_Of_ARP_TabÀ
(&
s_¨pTabÀ
, 
ñemít
);

229 
	`Muãx_U∆ock
(&
s_¨pTabÀMuãx
);

232 
	}
}

234 
	$ARP_TabÀ_Dñëe
(
ush‹t_t
 
hty≥
, ush‹t_à
±y≥
,

235 c⁄° 
uch¨_t


236 
¥ŸocﬁAddªss
[
ARP_PROT_ADDR_SIZE
]) {

237 
ARP_TabÀ_EÀmít
 *
cuº
;

238 
ªt
;

240 
	`Muãx_Lock
(&
s_¨pTabÀMuãx
);

241 
cuº
 = 
	`ARP_Föd_By_PrŸo
(
hty≥
, 
±y≥
, 
¥ŸocﬁAddªss
);

242 i‡(
cuº
) {

243 
	`Remove_From_ARP_TabÀ
(&
s_¨pTabÀ
, 
cuº
);

244 
	`Fªe
(
cuº
);

245 
ªt
 = 0;

247 
ªt
 = -1;

249 
	`Muãx_U∆ock
(&
s_¨pTabÀMuãx
);

250  
ªt
;

251 
	}
}

253 
	$ARP_TabÀ_CÀ™£
(
ush‹t_t
 
hty≥
, ush‹t_à
±y≥
) {

254 
	`TODO_P
(
PROJECT_ARP
,

257 
	}
}

261 
	$ARP_Resﬁve_Addªss
(
Në_Devi˚
 *
devi˚
,

262 
ush‹t_t
 
hty≥
,

263 
ush‹t_t
 
±y≥
,

264 
ARP_PrŸocﬁ_Addªss
 
¥ŸocﬁAddªss
,

265 
ARP_H¨dw¨e_Addªss
 
h¨dw¨eAddªss
) {

266 
rc
 = 0;

268 
	`KASSERT
(
	`I¡îru±s_E«bÀd
());

270 
	`TODO_P
(
PROJECT_ARP
,

273  
rc
;

275 
	}
}

278 
	$Inô_ARP_PrŸocﬁ
() {

279 
	`Muãx_Inô
(&
s_¨pTabÀMuãx
);

280 
s_¨pTabÀ
.
hód
 = s_¨pTabÀ.
èû
 = 0;

281 
	`TODO_P
(
PROJECT_ARP
, "Initialize otherÇeeded variables");

283 
	`Eth_Di•©ch_TabÀ_Add
(
ETH_ARP
, 
ARP_Di•©ch
);

284 
	}
}

	@src/geekos/net/ethernet.c

10 
	~<gìkos/s¸ìn.h
>

11 
	~<gìkos/öt.h
>

12 
	~<gìkos/mÆloc.h
>

13 
	~<gìkos/î∫o.h
>

14 
	~<gìkos/√t/ëhî√t.h
>

15 
	~<gìkos/¥oje˘s.h
>

20 
	gEthî√t_Di•©ch_E¡ry
;

21 
DEFINE_LIST
(
Ethî√t_Di•©ch_TabÀ
, 
Ethî√t_Di•©ch_E¡ry
);

22 
	sEthî√t_Di•©ch_E¡ry
 {

23 
ush‹t_t
 
	mty≥
;

24 (*
	mdi•©chî
Ë(
Në_Devi˚
 * 
	mª˚ived_⁄
,

25 
Në_Buf
 * 
	m∑ckë_ª˚ived
);

26 
DEFINE_LINK
(
Ethî√t_Di•©ch_TabÀ
, 
Ethî√t_Di•©ch_E¡ry
);

28 
IMPLEMENT_LIST
(
Ethî√t_Di•©ch_TabÀ
, 
Ethî√t_Di•©ch_E¡ry
);

29 
Ethî√t_Di•©ch_TabÀ
 
	gs_ëhDi•©chTabÀ
;

32 
	#DEBUG_ETH
(
x
...Ë
	`Pröt
("Eth: " x)

	)

36 
	$Eth_Tønsmô
(
Në_Devi˚
 *
devi˚
, 
Në_Buf
 *
nBuf
,

37 
uch¨_t
 * 
de°Addr
, 
ush‹t_t
 
ty≥
) {

38 
Ethî√t_Hódî
 
hódî
;

39 
rc
;

41 
	`KASSERT
(
	`I¡îru±s_E«bÀd
());

44 
	`TODO_P
(
PROJECT_RAW_ETHERNET
,

47 
rc
 = 
	`Në_Buf_Pª≥nd
(
nBuf
, &
hódî
, (hódî), 
NET_BUF_ALLOC_COPY
);

48 i‡(
rc
 != 0)

49  
rc
;

51 
ul⁄g_t
 
size
 = 
	`MAX
(
	`NET_BUF_SIZE
(
nBuf
), 
ETH_MIN_DATA
);

54 
	`KASSERT0
(
size
 >
ETH_MIN_DATA
, "inputÅo Eth_Transmit should beátÜeast ETH_MIN_DATAÜong");

56 *
buf„r
 = 
	`MÆloc
(
size
);

57 i‡(
buf„r
 == 0)

58  
ENOMEM
;

60 
rc
 = 
	`Në_Buf_Exåa˘_AŒ
(
nBuf
, 
buf„r
);

61 i‡(
rc
 != 0) {

62 
	`Fªe
(
buf„r
);

63  
rc
;

66 
	`DißbÀ_I¡îru±s
();

67 
devi˚
->
	`å™smô
(devi˚, 
buf„r
, 
size
);

68 
	`E«bÀ_I¡îru±s
();

71 
	}
}

73 
	$Eth_Di•©ch
(
Në_Devi˚
 *
devi˚
, 
Në_Buf
 *
nBuf
) {

74 
Ethî√t_Hódî
 
hódî
;

75 
rc
;

77 
rc
 = 
	`Në_Buf_Exåa˘
(
nBuf
, 0x00, &
hódî
, (header));

78 i‡(
rc
 != 0)

79  
rc
;

81 
	`DEBUG_ETH
("TryingÅoÑemoveÅhe header... \n");

83 
rc
 = 
	`Në_Buf_Remove
(
nBuf
, 0x00, (
hódî
));

84 i‡(
rc
 != 0) {

85 
	`DEBUG_ETH
("FailedÅoÑemoveÅhe header.\n");

86  
rc
;

89 i‡(
	`¡ohs
(
hódî
.
ty≥
) <= 1500) {

91 
	`TODO_P
(
PROJECT_RAW_ETHERNET
,

95 
Ethî√t_Di•©ch_E¡ry
 *
cuº
;

96 
cuº
 = 
	`Gë_Fr⁄t_Of_Ethî√t_Di•©ch_TabÀ
(&
s_ëhDi•©chTabÀ
);

97 
cuº
 !
NULL
 && cuº->
ty≥
 !
	`¡ohs
(
hódî
.type);

98 
cuº
 = 
	`Gë_Next_In_Ethî√t_Di•©ch_TabÀ
(curr));

99 i‡(
cuº
) {

100 
	`DEBUG_ETH
("Ethernet dispatchingÖacketÅo %dÖrotocol\n",

101 
	`¡ohs
(
hódî
.
ty≥
));

102 
cuº
->
	`di•©chî
(
devi˚
, 
nBuf
);

106 
	`Pröt
("DestroyingÇetbuf inÉthernetÜayer\n");

107 
	`Në_Buf_De°roy
(
nBuf
);

112 
	}
}

116 
	$Eth_Re˚ive
(
Në_Devi˚
 *
devi˚
, 
Në_Buf
 **
nBuf
) {

118 
	`TODO_P
(
PROJECT_RAW_ETHERNET
,

121 
	}
}

123 
Eth_Di•©ch_TabÀ_Add
(
ush‹t_t
 
ty≥
,

124 (*
di•©chî
Ë(
Në_Devi˚
 *,

125 
Në_Buf
 *)) {

126 
Ethî√t_Di•©ch_E¡ry
 *
ëhTy≥
 =

127 
	`MÆloc
((
Ethî√t_Di•©ch_E¡ry
));

129 i‡(
ëhTy≥
 =
NULL
)

130  
ENOMEM
;

132 
ëhTy≥
->
ty≥
 =Åype;

133 
ëhTy≥
->
di•©chî
 = dispatcher;

135 
	`Add_To_Back_Of_Ethî√t_Di•©ch_TabÀ
(&
s_ëhDi•©chTabÀ
, 
ëhTy≥
);

137 
	}
}

139 
	$Inô_Ethî√t
() {

140 
	`TODO_P
(
PROJECT_RAW_ETHERNET
, "initialization");

141 
	}
}

	@src/geekos/net/ip.c

9 
	~<gìkos/√t/ù.h
>

10 
	~<gìkos/°rög.h
>

11 
	~<gìkos/î∫o.h
>

12 
	~<gìkos/kas£π.h
>

13 
	~<gìkos/mÆloc.h
>

14 
	~<gìkos/√t/¨p.h
>

15 
	~<gìkos/√t/routög.h
>

16 
	~<gìkos/√t/ëhî√t.h
>

17 
	~<gìkos/öt.h
>

18 
	~<gìkos/√t/udp.h
>

19 
	~<gìkos/√t/t˝.h
>

20 
	~<gìkos/√t/sockë.h
>

21 
	~<gìkos/√t/√t.h
>

23 
	~<gìkos/¥oje˘s.h
>

25 
uch¨_t
 
	gs_ba£IpAddªss
[] = { 169, 254, 0, 0 };

26 
uch¨_t
 
	gs_ba£Sub√t
[] = { 255, 255, 255, 0 };

28 
IP_Addªss
 
	gs_öaddrAny
 = {.
addªss
 = 
INADDR_ANY
 };

29 
IP_Addªss
 
	gs_öaddrBrﬂdˇ°
 = {.
addªss
 = 
INADDR_BROADCAST
 };

31 
IP_Devi˚_Gë_By_IP
(
IP_Devi˚
 **
devi˚
,

32 
IP_Addªss
 * 
addªss
);

35 
	gIP_Di•©ch_TabÀ_E¡ry
;

36 
DEFINE_LIST
(
IP_Di•©ch_TabÀ
, 
IP_Di•©ch_TabÀ_E¡ry
);

37 
	sIP_Di•©ch_TabÀ_E¡ry
 {

38 
ush‹t_t
 
	mty≥
;

39 (*
	mdi•©chî
Ë(
	mIP_Devi˚
 *,

40 
	mIP_Addªss
 *, IP_Addªs†*, 
	mNë_Buf
 *);

41 
DEFINE_LINK
(
IP_Di•©ch_TabÀ
, 
IP_Di•©ch_TabÀ_E¡ry
);

43 
IMPLEMENT_LIST
(
IP_Di•©ch_TabÀ
, 
IP_Di•©ch_TabÀ_E¡ry
);

44 
IP_Di•©ch_TabÀ
 
	gs_ùDi•©chTabÀ
;

47 
IP_Devi˚_Li°
 
	gs_ùDevi˚Li°
;

50 
IP_Di•©ch_TabÀ_Add
(
ush‹t_t
 
ty≥
,

51 (*
di•©chî
Ë(
IP_Devi˚
 *, 
IP_Addªss
 *,

52 
IP_Addªss
 *,

53 
Në_Buf
 *)) {

54 
IP_Di•©ch_TabÀ_E¡ry
 *
ùTy≥
 =

55 
	`MÆloc
((
IP_Di•©ch_TabÀ_E¡ry
));

56 i‡(
ùTy≥
 =
NULL
)

57  
ENOMEM
;

59 
ùTy≥
->
ty≥
 =Åype;

60 
ùTy≥
->
di•©chî
 = dispatcher;

62 
	`Add_To_Back_Of_IP_Di•©ch_TabÀ
(&
s_ùDi•©chTabÀ
, 
ùTy≥
);

65 
	}
}

67 
	$IP_Dñivî
(
IP_Devi˚
 *
devi˚
, 
ush‹t_t
 
¥Ÿocﬁ
,

68 
IP_Addªss
 * 
de°Addªss
, IP_Addªs†* 
§cAddªss
,

69 
Në_Buf
 *
nBuf
) {

70 
IP_Di•©ch_TabÀ_E¡ry
 *
cuº
;

71 
cuº
 = 
	`Gë_Fr⁄t_Of_IP_Di•©ch_TabÀ
(&
s_ùDi•©chTabÀ
);

72 
cuº
 !
NULL
 && cuº->
ty≥
 !
¥Ÿocﬁ
;

73 
cuº
 = 
	`Gë_Next_In_IP_Di•©ch_TabÀ
(curr));

74 i‡(
cuº
) {

75 
cuº
->
	`di•©chî
(
devi˚
, 
de°Addªss
, 
§cAddªss
, 
nBuf
);

78 
	`Pröt
("IPÖacketÑeceived - DestroyingÇetbuf in ipÜayer\n");

80 
	}
}

83 
	$IP_Gë_Addªss
(
Në_Devi˚
 *
devi˚
, 
IP_Addªss
 * 
ùAddªss
) {

85 
ùAddªss
->
±r
[0] = 
s_ba£IpAddªss
[0];

86 
ùAddªss
->
±r
[1] = 
s_ba£IpAddªss
[1];

87 
ùAddªss
->
±r
[2] = 
devi˚
->
devAddr
[devi˚->
addrLígth
 - 2];

88 
ùAddªss
->
±r
[3] = 
devi˚
->
devAddr
[devi˚->
addrLígth
 - 1];

90 
	}
}

92 
	$IP_Brﬂdˇ°
(
IP_Hódî
 *
ùHódî
, 
Në_Buf
 *
nBuf
) {

96 
	`TODO_P
(
PROJECT_IP
,

99 
	}
}

104 
F‹w¨dög_Thªad
(
ul⁄g_t
 
¨g
 
__©åibuã__
 ((
unu£d
))) {

105 
TODO_P
(
PROJECT_IP
,

110 
	$IP_Devi˚_Regi°î
(
Në_Devi˚
 *
devi˚
, 
IP_Addªss
 * 
addªss
,

111 
Nëmask
 * 
sub√t
) {

112 
IP_Devi˚
 *
ùDevi˚
 = 
NULL
;

113 
ùDevi˚
 = 
	`MÆloc
((
IP_Devi˚
));

114 i‡(
ùDevi˚
 =
NULL
)

115  
ENOMEM
;

117 
ùDevi˚
->
√tDevi˚
 = 
devi˚
;

118 
ùDevi˚
->
ùAddªss
 = *
addªss
;

119 
ùDevi˚
->
sub√t
 = *subnet;

121 
	`Add_To_Back_Of_IP_Devi˚_Li°
(&
s_ùDevi˚Li°
, 
ùDevi˚
);

123 
	}
}

126 
	$IP_Devi˚_Gë_By_Name
(
IP_Devi˚
 **
devi˚
, *
«me
) {

127 
IP_Devi˚
 *
cuº
;

128 
cuº
 = 
	`Gë_Fr⁄t_Of_IP_Devi˚_Li°
(&
s_ùDevi˚Li°
);

129 
cuº
 !
NULL
 && 
	`°rcmp
(cuº->
√tDevi˚
->
devName
, 
«me
);

130 
cuº
 = 
	`Gë_Next_In_IP_Devi˚_Li°
(curr));

131 i‡(
cuº
) {

132 *
devi˚
 = 
cuº
;

136 
	}
}

138 
	$IP_Devi˚_Gë_By_IP
(
IP_Devi˚
 **
devi˚
,

139 
IP_Addªss
 * 
addªss
) {

140 
IP_Devi˚
 *
cuº
;

141 
cuº
 = 
	`Gë_Fr⁄t_Of_IP_Devi˚_Li°
(&
s_ùDevi˚Li°
);

142 
cuº
 !
NULL
 && cuº->
ùAddªss
.
addªss
 !=áddress->address;

143 
cuº
 = 
	`Gë_Next_In_IP_Devi˚_Li°
(curr));

144 i‡(
cuº
) {

145 *
devi˚
 = 
cuº
;

149 
	}
}

151 
	$IP_Devi˚_C⁄figuª
(*
«me
, 
IP_Addªss
 * 
ùAddªss
, 
Nëmask
 * 
√tmask
) {

152 
IP_Devi˚
 *
devi˚
 = 
NULL
;

153 
rc
 = 
	`IP_Devi˚_Gë_By_Name
(&
devi˚
, 
«me
);

154 i‡(
rc
 != 0) {

155  
rc
;

158 
	`KASSERT
(
devi˚
 !
NULL
);

160 i‡(
ùAddªss
 !
NULL
) {

161 
devi˚
->
ùAddªss
 = *ipAddress;

164 i‡(
√tmask
 !
NULL
) {

165 
devi˚
->
sub√t
 = *
√tmask
;

169 
	}
}

171 
	$IP_Devi˚_Sèt
(
IP_Devi˚_Info
 *
öfo
, 
ul⁄g_t
 
devi˚Cou¡
,

172 *
«me
) {

173 
cou¡î
 = 0;

174 
	`TODO_P
(
PROJECT_IP
, "ifconfig device statistics");

175  
cou¡î
;

176 
	}
}

178 
	$Inô_IP
() {

179 
Në_Devi˚
 *
cuº
 = 
NULL
;

180 
rc
 = 0;

182 
cuº
 = 
	`Gë_Fr⁄t_Of_Në_Devi˚_Li°
(
	`Gë_Në_Devi˚_Li°
());

183 
cuº
 !
NULL
; cuº = 
	`Gë_Next_In_Në_Devi˚_Li°
(curr)) {

184 
IP_Addªss
 
ùAddªss
;

185 
Nëmask
 
sub√t
;

187 
	`IP_Gë_Addªss
(
cuº
, &
ùAddªss
);

188 
	`mem˝y
(
sub√t
.
±r
, 
s_ba£Sub√t
, 4);

190 
rc
 = 
	`IP_Devi˚_Regi°î
(
cuº
, &
ùAddªss
, &
sub√t
);

191 
	`KASSERT0
(
rc
 == 0, "unableÅoÑegister IP device");

194 
	`TODO_P
(
PROJECT_IP
, "addÅoÉthernet dispatchÅable");

196 
	`TODO_P
(
PROJECT_UDP
, "add UDPÅo IP dispatchÅable, if doing UDP");

197 
	`TODO_P
(
PROJECT_TCP
, "add TCPÅo IP dispatchÅable, if doing TCP");

199 
	`Sèπ_Kî√l_Thªad
(
F‹w¨dög_Thªad
, 0, 
PRIORITY_NORMAL
, 
Ál£
,

202 
	}
}

	@src/geekos/net/ne2000.c

11 
	~<gìkos/√t/√2000.h
>

12 
	~<gìkos/io.h
>

13 
	~<gìkos/úq.h
>

14 
	~<gìkos/√t/√t.h
>

15 
	~<gìkos/mÆloc.h
>

16 
	~<gìkos/idt.h
>

17 
	~<gìkos/√t/√t.h
>

20 
	#DEBUG_NE2K
(
x
...)

	)

23 
	$NE2000_Do_Re˚ive
(
Në_Devi˚
 *
devi˚
) {

24 
uch¨_t
 
cuºítBuf„r
;

25 
ul⁄g_t
 
ba£Addr
 = 
devi˚
->baseAddr;

26 
ush‹t_t
 
rögBuf„rPage
;

29 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 
NE2K_CR_PAGE1
 + 
NE2K_CR_NODMA
 + 
NE2K_CR_STA
);

30 
cuºítBuf„r
 = 
	`In_Byã
(
ba£Addr
 + 
NE2K1W_CURR
);

31 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 
NE2K_CR_PAGE0
 + 
NE2K_CR_NODMA
 + 
NE2K_CR_STA
);

33 
cuºítBuf„r
 !
	`In_Byã
(
ba£Addr
 + 
NE2K0R_BNRY
)) {

34 
rögBuf„rPage
 = 
	`In_Byã
(
ba£Addr
 + 
NE2K0R_BNRY
) << 8;

37 
	`Në_Devi˚_Re˚ive
(
devi˚
, 
rögBuf„rPage
);

40 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
,

41 
NE2K_CR_PAGE1
 + 
NE2K_CR_NODMA
 + 
NE2K_CR_STA
);

42 
cuºítBuf„r
 = 
	`In_Byã
(
ba£Addr
 + 
NE2K1W_CURR
);

43 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
,

44 
NE2K_CR_PAGE0
 + 
NE2K_CR_NODMA
 + 
NE2K_CR_STA
);

49 
	}
}

51 
	$NE2000_I¡îru±_H™dÀr
(
I¡îru±_Sèã
 *
°©e
) {

52 
Në_Devi˚
 *
devi˚
;

53 
ul⁄g_t
 
ba£Addr
;

54 
i§Mask
;

55 
rc
;

57 
	`Begö_IRQ
(
°©e
);

58 
	`DEBUG_NE2K
("Handling NE2000 interrupt\n");

60 
rc
 = 
	`Gë_Në_Devi˚_By_IRQ
(
°©e
->
ötNum
 - 
FIRST_EXTERNAL_INT
, &
devi˚
);

61 i‡(
rc
 != 0) {

62 
	`Pröt
("NE2000: CouldÇot identify interruptÇumber %d\n",

63 
°©e
->
ötNum
);

64 
Áû
;

67 
ba£Addr
 = 
devi˚
->baseAddr;

68 
i§Mask
 = 
	`In_Byã
(
NE2K0R_ISR
 + 
ba£Addr
);

72 i‡(
i§Mask
 & 
NE2K_ISR_RXE
) {

74 ++
devi˚
->
rxPackëEº‹s
;

77 i‡(
i§Mask
 & 
NE2K_ISR_TXE
) {

79 ++
devi˚
->
txPackëEº‹s
;

82 i‡(
i§Mask
 & 
NE2K_ISR_OVW
) {

84 
	`NE2000_H™dÀ_Rög_Buf„r_OvîÊow
(
devi˚
);

87 i‡(
i§Mask
 & 
NE2K_ISR_PRX
) {

88 
	`DEBUG_NE2K
("ReceivingÖacket\n");

89 
	`NE2000_Do_Re˚ive
(
devi˚
);

90 ++
devi˚
->
rxPackës
;

93 i‡(
i§Mask
 & 
NE2K_ISR_PTX
) {

95 
	`DEBUG_NE2K
("Transmitted.\n");

97 ++
devi˚
->
txPackës
;

100 
Áû
:

102 
	`Out_Byã
(
ba£Addr
 + 
NE2K0R_ISR
, 
i§Mask
);

104 
	`End_IRQ
(
°©e
);

105 
	}
}

107 
	$Inô_NE2000
(
Në_Devi˚
 *
devi˚
) {

109 
ßProm
[32];

110 
i
;

111 
ul⁄g_t
 
ba£Addr
 = 
devi˚
->baseAddr;

113 
	`Pröt
("InitializingÇe2000Çic...\n");

116 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 0x21);

117 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_DCR
, 0x49);

118 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RBCR0
, 0x00);

119 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RBCR1
, 0x00);

120 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_IMR
, 0x00);

121 
	`Out_Byã
(
ba£Addr
 + 
NE2K0R_ISR
, 0xFF);

122 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RCR
, 0x20);

123 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_TCR
, 0x02);

124 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RBCR0
, 32);

125 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RBCR1
, 0x00);

126 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RSAR0
, 0x00);

127 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RSAR1
, 0x00);

128 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 
NE2K_CR_STA
 + 
NE2K_CR_DMA_RREAD
);

130 
i
 = 0; i < 32; ++i) {

131 
ßProm
[
i
] = ()
	`In_W‹d
(
ba£Addr
 + 
NE2K_IO_PORT
);

136 i‡(
ßProm
[0x0e] != 0x57 || saProm[0x0f] != 0x57) {

141 
devi˚
->
addrLígth
 = 6;

142 
	`Pröt
("Macáddress: ");

143 
i
 = 0; i < 6; ++i) {

144 
devi˚
->
devAddr
[
i
] = 
ßProm
[i];

145 
	`Pröt
("%02x", 
ßProm
[
i
]);

146 i‡(
i
 < 5)

147 
	`Pröt
(":");

150 
	`Pröt
("\n");

153 
	`In°Æl_IRQ
(
devi˚
->
úq
, 
NE2000_I¡îru±_H™dÀr
);

156 
	`E«bÀ_IRQ
(
devi˚
->
úq
);

159 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 0x21);

162 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_DCR
, 0x49);

165 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RBCR0
, 0x00);

166 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RBCR1
, 0x00);

169 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RCR
, 0x0C);

172 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_TCR
, 0x02);

175 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_TPSR
, 
NE2K_TRANSMIT_PAGE
);

178 
	`Out_Byã
(
ba£Addr
 + 
NE2K0R_ISR
, 0xFF);

181 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_IMR
, 0x0F + 
NE2K_ISR_OVW
);

184 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_PSTART
, 
NE2K_RB_START
);

185 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_BNRY
, 
NE2K_RB_START
);

186 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_PSTOP
, 
NE2K_RB_STOP
);

189 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 0x61);

192 
	`Out_Byã
(
ba£Addr
 + 
NE2K1W_PAR0
, 
ßProm
[0]);

193 
	`Out_Byã
(
ba£Addr
 + 
NE2K1W_PAR1
, 
ßProm
[1]);

194 
	`Out_Byã
(
ba£Addr
 + 
NE2K1W_PAR2
, 
ßProm
[2]);

195 
	`Out_Byã
(
ba£Addr
 + 
NE2K1W_PAR3
, 
ßProm
[3]);

196 
	`Out_Byã
(
ba£Addr
 + 
NE2K1W_PAR4
, 
ßProm
[4]);

197 
	`Out_Byã
(
ba£Addr
 + 
NE2K1W_PAR5
, 
ßProm
[5]);

200 
	`Out_Byã
(
ba£Addr
 + 
NE2K1W_MAR0
, 0xFF);

201 
	`Out_Byã
(
ba£Addr
 + 
NE2K1W_MAR1
, 0xFF);

202 
	`Out_Byã
(
ba£Addr
 + 
NE2K1W_MAR2
, 0xFF);

203 
	`Out_Byã
(
ba£Addr
 + 
NE2K1W_MAR3
, 0xFF);

204 
	`Out_Byã
(
ba£Addr
 + 
NE2K1W_MAR4
, 0xFF);

205 
	`Out_Byã
(
ba£Addr
 + 
NE2K1W_MAR5
, 0xFF);

206 
	`Out_Byã
(
ba£Addr
 + 
NE2K1W_MAR6
, 0xFF);

207 
	`Out_Byã
(
ba£Addr
 + 
NE2K1W_MAR7
, 0xFF);

210 
	`Out_Byã
(
ba£Addr
 + 
NE2K1W_CURR
, 
NE2K_RB_START
);

211 
	`Pröt
("Cuºíàbuf„∏Addªss: %x\n", 
	`In_Byã
(
ba£Addr
 + 
NE2K1W_CURR
));

214 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 0x22);

217 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_TCR
, 0x00);

221 
	}
}

223 
	$NE2000_Tønsmô
(
Në_Devi˚
 *
devi˚
, *
buf„r
, 
ul⁄g_t
 
Àngth
) {

225 
ul⁄g_t
 
ba£Addr
 = 
devi˚
->baseAddr;

227 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

229 
i
;

230 
√wLígth
 = 
Àngth
 >> 1;

231 *
√wBuf„r
 = (*)
buf„r
;

234 i‡(
	`In_Byã
(
ba£Addr
 + 
NE2K_CR
Ë& 
NE2K_CR_TXP
) {

235 
	`Pröt
("ERROR - CurrentlyÅransmitting\n");

240 
	`NE2000_Re£t
(
devi˚
);

243 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 0x22);

246 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RBCR0
, 0x42);

247 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RBCR1
, 0x00);

248 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RSAR0
, 0x42);

249 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RSAR1
, 0x00);

250 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 
NE2K_CR_DMA_RREAD
 + 
NE2K_CR_STA
);

251 
	`Out_Byã
(
ba£Addr
 + 
NE2K0R_ISR
, 
NE2K_ISR_RDC
);

254 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RBCR0
, 
Àngth
 & 0xFF);

255 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RBCR1
, 
Àngth
 >> 8);

258 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RSAR0
, 0x00);

259 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RSAR1
, 
NE2K_TRANSMIT_PAGE
);

262 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 
NE2K_CR_DMA_RWRITE
 | 
NE2K_CR_STA
);

265 
i
 = 0; i < 
√wLígth
; ++i) {

266 
	`Out_W‹d
(
ba£Addr
 + 
NE2K_IO_PORT
, 
√wBuf„r
[
i
]);

270 i‡(
Àngth
 & 0x1) {

271 
	`Out_W‹d
(
ba£Addr
 + 
NE2K_IO_PORT
, ((
uch¨_t
 *Ë
buf„r
)[
Àngth
 - 1]);

276 (
	`In_Byã
(
ba£Addr
 + 
NE2K0R_ISR
Ë& 
NE2K_ISR_RDC
) == 0) {

277 
	`Pröt
("Waiting onÑemote DMA forÅransmit \n");

281 
	`Out_Byã
(
ba£Addr
 + 
NE2K0R_ISR
, 
NE2K_ISR_RDC
);

286 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_TPSR
, 
NE2K_TRANSMIT_PAGE
);

289 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_TBCR0
, 
Àngth
 & 0xFF);

290 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_TBCR1
, 
Àngth
 >> 8);

293 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 
NE2K_CR_NODMA
 | 
NE2K_CR_STA
 | 
NE2K_CR_TXP
);

295 
devi˚
->
txByãs
 +
Àngth
;

296 
	}
}

299 
	$NE2000_Re˚ive
(
Në_Devi˚
 *
devi˚
, *
buf„r
, 
ul⁄g_t
 
Àngth
,

300 
ul⁄g_t
 
∑geOff£t
) {

301 
ul⁄g_t
 
ba£Addr
 = 
devi˚
->baseAddr;

303 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

305 
i
;

306 
√wLígth
 = 
Àngth
 >> 1;

307 *
√wBuf„r
 = (*)
buf„r
;

310 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 0x22);

312 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RCR
, 0x0C);

315 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RBCR0
, 
Àngth
 & 0xFF);

316 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RBCR1
, 
Àngth
 >> 8);

319 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RSAR0
, 
∑geOff£t
 & 0xFF);

320 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RSAR1
, 
∑geOff£t
 >> 8);

323 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 
NE2K_CR_DMA_RREAD
 | 
NE2K_CR_STA
);

326 
i
 = 0; i < 
√wLígth
; ++i) {

327 
√wBuf„r
[
i
] = 
	`In_W‹d
(
ba£Addr
 + 
NE2K_IO_PORT
);

331 i‡(
Àngth
 & 0x1) {

332 ((
uch¨_t
 *Ë
buf„r
)[
Àngth
 - 1] = 
	`In_Byã
(
ba£Addr
 + 
NE2K_IO_PORT
);

336 
	`Out_Byã
(
ba£Addr
 + 
NE2K0R_ISR
, 
NE2K_ISR_RDC
);

338 
devi˚
->
rxByãs
 +
Àngth
;

339 
	}
}

341 
	$NE2000_Com∂ëe_Re˚ive
(
Në_Devi˚
 *
devi˚
,

342 
Në_Devi˚_Hódî
 *
hdr
) {

344 
	`Out_Byã
(
devi˚
->
ba£Addr
 + 
NE2K0W_BNRY
, 
hdr
->
√xt
);

345 
	}
}

347 
	$NE2000_Re£t
(
Në_Devi˚
 *
devi˚
) {

348 
ul⁄g_t
 
ba£Addr
 = 
devi˚
->baseAddr;

350 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

352 
	`Out_Byã
(
ba£Addr
 + 
NE2K_RESET_PORT
, 
	`In_Byã
(NE2K_RESET_PORT));

354 
	`In_Byã
(
ba£Addr
 + 
NE2K0R_ISR
Ë& 
NE2K_ISR_RST
) {

355 
	`Pröt
("NIC hasÇotÑeset yet\n");

357 
	}
}

359 
	$NE2000_Gë_Dev_Hdr
(
Në_Devi˚
 *
devi˚
,

360 
Në_Devi˚_Hódî
 *
hdr
, 
ul⁄g_t
 
∑geOff£t
) {

361 
i
;

362 
ul⁄g_t
 
ba£Addr
 = 
devi˚
->baseAddr;

363 
ul⁄g_t
 
size
 = (
Në_Devi˚_Hódî
) >> 1;

364 
ush‹t_t
 *
buf„r
 = (ush‹t_à*Ë
hdr
;

367 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 0x22);

370 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RBCR0
, (
Në_Devi˚_Hódî
));

371 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RBCR1
, 0);

374 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RSAR0
, 0x00);

375 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RSAR1
, 
∑geOff£t
);

378 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 
NE2K_CR_DMA_RREAD
 | 
NE2K_CR_STA
);

381 
i
 = 0; i < 
size
; ++i) {

382 
buf„r
[
i
] = 
	`In_W‹d
(
ba£Addr
 + 
NE2K_IO_PORT
);

385 
	}
}

387 
	$NE2000_H™dÀ_Rög_Buf„r_OvîÊow
(
Në_Devi˚
 *
devi˚
) {

388 
txp
, 
ª£nd
;

389 
ul⁄g_t
 
ba£Addr
 = 
devi˚
->baseAddr;

391 
txp
 = 
	`In_Byã
(
ba£Addr
 + 
NE2K_CR
Ë& 
NE2K_CR_TXP
;

394 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 0x21);

397 
	`IO_Dñay
();

400 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RBCR0
, 0x00);

401 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_RBCR1
, 0x00);

404 i‡(!
txp
) {

405 
ª£nd
 = 0;

407 
i§
 = 
	`In_Byã
(
ba£Addr
 + 
NE2K0R_ISR
);

408 i‡((
i§
 & 
NE2K_ISR_PTX
Ë|| (i§ & 
NE2K_ISR_TXE
)) {

409 
ª£nd
 = 0;

411 
ª£nd
 = 1;

416 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_TCR
, 0x02);

419 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 0x22);

422 
	`NE2000_Do_Re˚ive
(
devi˚
);

425 
	`Out_Byã
(
ba£Addr
 + 
NE2K0R_ISR
, 
NE2K_ISR_OVW
);

428 
	`Out_Byã
(
ba£Addr
 + 
NE2K0W_TCR
, 0x00);

431 i‡(
ª£nd
) {

432 
	`Out_Byã
(
ba£Addr
 + 
NE2K_CR
, 0x26);

434 
	}
}

437 
Në_Devi˚_C≠abûôõs
 
	gg_√2000C≠abûôõs
 = {

439 
Inô_NE2000
,

440 
NE2000_Tønsmô
,

441 
NE2000_Re˚ive
,

442 
NE2000_Re£t
,

443 
NE2000_Gë_Dev_Hdr
,

444 
NE2000_Com∂ëe_Re˚ive


	@src/geekos/net/net.c

10 
	~<gìkos/√t/√t.h
>

11 
	~<gìkos/°rög.h
>

12 
	~<gìkos/s¸ìn.h
>

13 
	~<gìkos/kas£π.h
>

14 
	~<gìkos/mÆloc.h
>

15 
	~<gìkos/öt.h
>

16 
	~<gìkos/√t/√2000.h
>

17 
	~<gìkos/io.h
>

18 
	~<gìkos/î∫o.h
>

19 
	~<gìkos/√t/ëhî√t.h
>

20 
	~<gìkos/sysˇŒ.h
>

21 
	~<gìkos/sys_√t.h
>

24 
Në_Devi˚_Li°
 
	gs_devi˚Li°
;

27 
Në_Devi˚_Re˚ive_Packë_Queue
 
	gs_ª˚ivePackëQueue
;

30 
Thªad_Queue
 
	gs_ª˚iveThªadQueue
;

33 
Në_Devi˚
 *
	$AŒoˇã_Në_Devi˚
() {

34 
Në_Devi˚
 *
devi˚
 = 
	`MÆloc
((Net_Device));

36 
	`KASSERT
(
devi˚
 != 0);

38 
	`mem£t
(
devi˚
, '\0', (
Në_Devi˚
));

39  
devi˚
;

40 
	}
}

43 
	$De°roy_Në_Devi˚
(
Në_Devi˚
 *
dev
) {

44 
	`Fªe
(
dev
);

45 
	}
}

48 
Gë_Next_Devi˚_Numbî
(c⁄° *
«meBa£


49 
__©åibuã__
 ((
unu£d
))) {

50 
	gs_√xtDevi˚Numbî
;

52  
	gs_√xtDevi˚Numbî
++;

55 
Në_Devi˚_Re˚ive_Thªad
(
ul⁄g_t
 
¨g
 
__©åibuã__
 ((
unu£d
))) {

57 
DißbÀ_I¡îru±s
();

58 i‡(!
Is_Në_Devi˚_Re˚ive_Packë_Queue_Em±y
(&
s_ª˚ivePackëQueue
)) {

59 
Në_Buf
 *
	gnBuf
;

60 
Në_Devi˚_Packë
 *
	g∑ckë
;

62 
	g∑ckë
 =

63 
Remove_From_Fr⁄t_Of_Në_Devi˚_Re˚ive_Packë_Queue


64 (&
s_ª˚ivePackëQueue
);

65 
E«bÀ_I¡îru±s
();

67 
Në_Buf_Cª©e
(&
nBuf
);

68 
Në_Buf_Pª≥nd
(
nBuf
, 
∑ckë
->
buf„r
,Öackë->
buf„rLí
,

69 
NET_BUF_ALLOC_OWN
);

71 
Eth_Di•©ch
(
∑ckë
->
devi˚
, 
nBuf
);

73 
Fªe
(
∑ckë
);

75 
Waô
(&
s_ª˚iveThªadQueue
);

76 
E«bÀ_I¡îru±s
();

81 
	$Inô_Nëw‹k_Devi˚s
() {

82 
	`KASSERT0
(
g_sysˇŒTabÀ
[
SYS_ETHPACKETSEND
] =
Sys_EthPackëSíd
,

84 
	`KASSERT0
(
g_sysˇŒTabÀ
[
SYS_CLOSESOCKET
] =
Sys_Clo£Sockë
,

88 
	`Regi°î_Në_Devi˚
(&
g_√2000C≠abûôõs
, 0x300, 9, "eth");

89 
	`Regi°î_Në_Devi˚
(&
g_√2000C≠abûôõs
, 0x320, 10, "eth");

90 
	`Regi°î_Në_Devi˚
(&
g_√2000C≠abûôõs
, 0x340, 3, "eth");

93 
	`Sèπ_Kî√l_Thªad
(
Në_Devi˚_Re˚ive_Thªad
, 0, 
PRIORITY_NORMAL
, 
Ál£
,

95 
	}
}

99 
	$Regi°î_Në_Devi˚
(
Në_Devi˚_C≠abûôõs
 *
ˇps
,

100 
ul⁄g_t
 
ba£Addr
, ul⁄g_à
úq
, c⁄° *
«meBa£
) {

101 
devNumbî
;

102 
rc
;

103 
Në_Devi˚
 *
devi˚
 = 
NULL
;

105 
devi˚
 = 
	`AŒoˇã_Në_Devi˚
();

106 
devNumbî
 = 
	`Gë_Next_Devi˚_Numbî
(
«meBa£
);

109 
	`°r˝y
(
devi˚
->
«me
, 
ˇps
->name);

110 
	`¢¥ötf
(
devi˚
->
devName
, 
NET_NAME_SIZE
, "%s%d", 
«meBa£
, 
devNumbî
);

113 
devi˚
->
ba£Addr
 = baseAddr;

114 
devi˚
->
úq
 = irq;

117 
devi˚
->
öô
 = 
ˇps
->init;

118 
devi˚
->
å™smô
 = 
ˇps
->transmit;

119 
devi˚
->
ª˚ive
 = 
ˇps
->receive;

120 
devi˚
->
ª£t
 = 
ˇps
->reset;

121 
devi˚
->
gëHódî
 = 
ˇps
->getHeader;

122 
devi˚
->
com∂ëeRe˚ive
 = 
ˇps
->completeReceive;

125 
	`Add_To_Back_Of_Në_Devi˚_Li°
(&
s_devi˚Li°
, 
devi˚
);

127 
	`DißbÀ_I¡îru±s
();

130 
rc
 = 
devi˚
->
	`öô
(device);

132 
	`E«bÀ_I¡îru±s
();

134 i‡(
rc
 != 0) {

135 
	`Remove_From_Në_Devi˚_Li°
(&
s_devi˚Li°
, 
devi˚
);

136 
	`De°roy_Në_Devi˚
(
devi˚
);

137  
rc
;

141 
	}
}

143 
	$Uƒegi°î_Në_Devi˚
(
Në_Devi˚
 *
dev
) {

146 
	`Remove_From_Në_Devi˚_Li°
(&
s_devi˚Li°
, 
dev
);

149 
	`De°roy_Në_Devi˚
(
dev
);

152 
	}
}

154 
	$Gë_Në_Devi˚_By_Name
(c⁄° *
«me
, 
Në_Devi˚
 **
devi˚
) {

155 
Në_Devi˚
 *
dev
;

157 
dev
 = 
	`Gë_Fr⁄t_Of_Në_Devi˚_Li°
(&
s_devi˚Li°
);

158 
dev
 !0; dev = 
	`Gë_Next_In_Në_Devi˚_Li°
(dev)) {

159 i‡(
	`°rcmp
(
«me
, 
dev
->
devName
) == 0) {

160 *
devi˚
 = 
dev
;

166 
	}
}

168 
Në_Devi˚_Li°
 *
	$Gë_Në_Devi˚_Li°
() {

169  &
s_devi˚Li°
;

170 
	}
}

172 
	$Gë_Në_Devi˚_By_IRQ
(
úq
,

173 
Në_Devi˚
 **
devi˚
) {

174 
Në_Devi˚
 *
dev
;

175 
dev
 = 
	`Gë_Fr⁄t_Of_Në_Devi˚_Li°
(&
s_devi˚Li°
);

176 
dev
 !0; dev = 
	`Gë_Next_In_Në_Devi˚_Li°
(dev)) {

177 i‡(
dev
->
úq
 == irq) {

178 *
devi˚
 = 
dev
;

183 
	}
}

186 
	$Në_Devi˚_Re˚ive
(
Në_Devi˚
 *
devi˚
, 
ush‹t_t
 
rögBuf„rPage
) {

187 
Në_Devi˚_Packë
 *
∑ckë
;

188 
Në_Devi˚_Hódî
 
hdr
;

189 
ush‹t_t
 
rögBuf„rOff£t
;

190 
ul⁄g_t
 
ba£Addr
 = 
devi˚
->baseAddr;

191 
rc
 = 0;

193 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

197 
devi˚
->
	`gëHódî
(devi˚, &
hdr
, 
rögBuf„rPage
 >> 8);

199 
∑ckë
 = 
	`MÆloc
((
Në_Devi˚_Packë
));

200 i‡(
∑ckë
 == 0)

201 
Áû
;

203 
	`mem£t
(
∑ckë
, '\0', (
Në_Devi˚_Packë
));

207 
∑ckë
->
devi˚
 = device;

208 
∑ckë
->
buf„rLí
 = 
hdr
.
cou¡
 - (
Në_Devi˚_Hódî
);

209 
∑ckë
->
buf„r
 = 
	`MÆloc
’ackë->
buf„rLí
);

210 i‡(
∑ckë
->
buf„r
 == 0)

211 
Áû
;

213 
rögBuf„rOff£t
 = 
rögBuf„rPage
 + (
Në_Devi˚_Hódî
);

215 
devi˚
->
	`ª˚ive
(devi˚, 
∑ckë
->
buf„r
,Öackë->
buf„rLí
,

216 
rögBuf„rOff£t
);

219 
	`Add_To_Back_Of_Në_Devi˚_Re˚ive_Packë_Queue
(&
s_ª˚ivePackëQueue
,

220 
∑ckë
);

221 
	`Wake_Up
(&
s_ª˚iveThªadQueue
);

223 
devi˚
->
	`com∂ëeRe˚ive
(devi˚, &
hdr
);

224 
Áû
:

225  
rc
;

226 
	}
}

	@src/geekos/net/netbuf.c

10 
	~<gìkos/√t/√tbuf.h
>

11 
	~<gìkos/î∫o.h
>

12 
	~<gìkos/mÆloc.h
>

13 
	~<gìkos/kty≥s.h
>

17 
Mesßge_Buf„r
 *
	$Föd_Buf„r_At_Off£t
(
Në_Buf
 *
nBuf
,

18 
ul⁄g_t
 
off£t
,

19 
ul⁄g_t
 * 
bufOff£t
) {

21 
Mesßge_Buf„r
 *
cuº
;

22 
ul⁄g_t
 
£íByãs
 = 0;

24 i‡(
	`NET_BUF_SIZE
(
nBuf
Ë<
off£t
) {

25 
	`Pröt
("bufferÅoo small for offset\n");

26  
NULL
;

29 
cuº
 = 
	`Gë_Fr⁄t_Of_Mesßge_Buf„r_Li°
(&
nBuf
->
buf„rs
);

30 
cuº
 !0; cuº = 
	`Gë_Next_In_Mesßge_Buf„r_Li°
(curr)) {

33 
cuº
 && !cuº->
vÆid
) {

34 
cuº
 = 
	`Gë_Next_In_Mesßge_Buf„r_Li°
(curr);

36 i‡(!
cuº
)

37  
NULL
;

39 i‡(
off£t
 < 
£íByãs
 + 
cuº
->
Àngth
) {

40 i‡(
bufOff£t
 !
NULL
) {

41 *
bufOff£t
 = 
off£t
 - 
£íByãs
;

43  
cuº
;

46 
£íByãs
 +
cuº
->
Àngth
;

48 
	`Pröt
("bufferát offsetÇot found?");

49  
NULL
;

50 
	}
}

59 
	$S∂ô_Buf„r
(
Në_Buf
 *
nBuf
, 
ul⁄g_t
 
•lô
) {

61 
Mesßge_Buf„r
 *
cuº
, *
buf1
, *
buf2
;

62 
ul⁄g_t
 
off£t
 = 0, 
buf1Size
, 
buf2Size
;

64 i‡(
•lô
 =
	`NET_BUF_SIZE
(
nBuf
))

67 i‡(
•lô
 > 
	`NET_BUF_SIZE
(
nBuf
)) {

68 
	`Pröt
("Split out ofÑange");

72 
cuº
 = 
	`Föd_Buf„r_At_Off£t
(
nBuf
, 
•lô
, &
off£t
);

73 i‡(
cuº
 =
NULL
) {

74 
	`Pröt
("didn'àföd buf„∏© %lu\n", 
•lô
);

77 i‡(
off£t
 == 0)

87 
buf1
 = 
	`MÆloc
((
Mesßge_Buf„r
));

88 i‡(
buf1
 == 0)

89  
ENOMEM
;

91 #i‚de‡
NDEBUG


92 
nBuf
->
mÆlocCou¡
++;

95 
buf2
 = 
	`MÆloc
((
Mesßge_Buf„r
));

96 i‡(
buf2
 == 0)

97  
ENOMEM
;

99 #i‚de‡
NDEBUG


100 
nBuf
->
mÆlocCou¡
++;

105 
buf1Size
 = 
off£t
;

106 
buf1
->
buf„r
 = 
cuº
->buffer;

107 
buf1
->
Àngth
 = 
buf1Size
;

108 
buf1
->
vÆid
 = 1;

109 
buf1
->
mu°Fªe
 = 
cuº
->mustFree;

112 
buf2Size
 = (
cuº
->
Àngth
 - 
off£t
);

113 
buf2
->
buf„r
 = 
cuº
->buf„∏+ 
buf1Size
;

114 
buf2
->
Àngth
 = 
buf2Size
;

115 
buf2
->
vÆid
 = 1;

116 
buf2
->
mu°Fªe
 = 0;

118 
cuº
->
vÆid
 = 0;

119 
cuº
->
mu°Fªe
 = 0;

122 
	`In£π_I¡o_Mesßge_Buf„r_Li°
(&
nBuf
->
buf„rs
, 
cuº
, 
buf1
);

123 
	`In£π_I¡o_Mesßge_Buf„r_Li°
(&
nBuf
->
buf„rs
, 
buf1
, 
buf2
);

127 
	}
}

131 
	$Në_Buf_Cª©e
(
Në_Buf
 **
nBuf
) {

132 
Në_Buf
 *
buf„r
 = 
	`MÆloc
((Net_Buf));

133 i‡(
buf„r
 == 0)

134  
ENOMEM
;

136 
	`mem£t
(
buf„r
, '\0', (
Në_Buf
));

140 *
nBuf
 = 
buf„r
;

143 
	}
}

145 
	$Në_Buf_De°roy
(
Në_Buf
 *
nBuf
) {

147 
	`Në_Buf_Remove_AŒ
(
nBuf
);

148 
	`Fªe
(
nBuf
);

151 
	}
}

153 
	$Cª©e_Mesßge_Buf„r
(
Në_Buf
 *
nBuf
,

154 
Mesßge_Buf„r
 **
mBufPå
,

155 *
buf„r
, 
ul⁄g_t
 
size
,

156 
uch¨_t
 
ÆlocScheme
) {

158 
Mesßge_Buf„r
 *
mBuf
;

160 
mBuf
 = 
	`MÆloc
((
Mesßge_Buf„r
));

161 i‡(
mBuf
 == 0)

162  
ENOMEM
;

164 #i‚de‡
NDEBUG


165 
nBuf
->
mÆlocCou¡
++;

168 
	`mem£t
(
mBuf
, '\0', (
Mesßge_Buf„r
));

171 i‡(
ÆlocScheme
 =
NET_BUF_ALLOC_COPY
) {

172 *
buf„rC›y
 = 
	`MÆloc
(
size
);

173 i‡(
buf„rC›y
 == 0)

174  
ENOMEM
;

176 #i‚de‡
NDEBUG


177 
nBuf
->
mÆlocCou¡
++;

181 
	`mem˝y
(
buf„rC›y
, 
buf„r
, 
size
);

183 
mBuf
->
Àngth
 = 
size
;

184 
mBuf
->
buf„r
 = 
buf„rC›y
;

185 
mBuf
->
mu°Fªe
 = 1;

186 
mBuf
->
vÆid
 = 1;

187 } i‡(
ÆlocScheme
 =
NET_BUF_ALLOC_OWN
) {

188 
mBuf
->
Àngth
 = 
size
;

189 
mBuf
->
buf„r
 = buffer;

190 
mBuf
->
mu°Fªe
 = 1;

191 
mBuf
->
vÆid
 = 1;

193 #i‚de‡
NDEBUG


194 
nBuf
->
mÆlocCou¡
++;

196 } i‡(
ÆlocScheme
 =
NET_BUF_ALLOC_LEND
) {

197 
mBuf
->
Àngth
 = 
size
;

198 
mBuf
->
buf„r
 = buffer;

199 
mBuf
->
mu°Fªe
 = 0;

200 
mBuf
->
vÆid
 = 1;

203 
	`KASSERT
(
Ál£
);

206 *
mBufPå
 = 
mBuf
;

208 
	}
}

210 
	$Në_Buf_Pª≥nd
(
Në_Buf
 *
nBuf
, *
buf„r
, 
ul⁄g_t
 
size
,

211 
uch¨_t
 
ÆlocScheme
) {

213 
Mesßge_Buf„r
 *
mBuf
;

214 
rc
 = 0;

216 
	`KASSERT0
(
size
 > 0, "size ofÖrepended buffer should beÇonzero");

218 
rc
 = 
	`Cª©e_Mesßge_Buf„r
(
nBuf
, &
mBuf
, 
buf„r
, 
size
, 
ÆlocScheme
);

219 i‡(
rc
 != 0)

220  
rc
;

222 
	`Add_To_Fr⁄t_Of_Mesßge_Buf„r_Li°
(&
nBuf
->
buf„rs
, 
mBuf
);

224 
nBuf
->
Àngth
 +
size
;

226  
rc
;

227 
	}
}

229 
	$Në_Buf_Aµíd
(
Në_Buf
 *
nBuf
, *
buf„r
, 
ul⁄g_t
 
size
,

230 
uch¨_t
 
ÆlocScheme
) {

231 
Mesßge_Buf„r
 *
mBuf
;

232 
rc
 = 0;

234 
	`KASSERT0
(
size
 > 0, "size ofáppended buffer should beÇonzero");

236 
rc
 = 
	`Cª©e_Mesßge_Buf„r
(
nBuf
, &
mBuf
, 
buf„r
, 
size
, 
ÆlocScheme
);

237 i‡(
rc
 != 0)

238  
rc
;

240 
	`Add_To_Back_Of_Mesßge_Buf„r_Li°
(&
nBuf
->
buf„rs
, 
mBuf
);

242 
nBuf
->
Àngth
 +
size
;

245 
	}
}

247 
	$Në_Buf_Exåa˘
(
Në_Buf
 *
nBuf
, 
ul⁄g_t
 
°¨t
, *
de°
,

248 
ul⁄g_t
 
size
) {

249 
ul⁄g_t
 
byãsLe·
 = 
size
;

250 
ul⁄g_t
 
bufOff£t
;

251 
ul⁄g_t
 
de°Off£t
 = 0;

252 
ul⁄g_t
 
numByãs
;

254 
Mesßge_Buf„r
 *
°¨tBuf
, *
cuºBuf
;

256 i‡(
°¨t
 + 
size
 > 
	`NET_BUF_SIZE
(
nBuf
))

260 
°¨tBuf
 = 
	`Föd_Buf„r_At_Off£t
(
nBuf
, 
°¨t
, &
bufOff£t
);

263 
numByãs
 = 
	`MIN
(
byãsLe·
, 
°¨tBuf
->
Àngth
 - 
bufOff£t
);

264 
	`mem˝y
(
de°
, 
°¨tBuf
->
buf„r
 + 
bufOff£t
, 
numByãs
);

265 
byãsLe·
 -
numByãs
;

266 
de°Off£t
 +
numByãs
;

268 i‡(
byãsLe·
 == 0)

273 
cuºBuf
 = 
	`Gë_Next_In_Mesßge_Buf„r_Li°
(
°¨tBuf
);

275 
byãsLe·
 != 0) {

276 i‡(!
cuºBuf
->
vÆid
) {

277 
cuºBuf
 = 
	`Gë_Next_In_Mesßge_Buf„r_Li°
(currBuf);

281 
	`KASSERT
(
cuºBuf
 !
NULL
);

283 
numByãs
 = 
	`MIN
(
byãsLe·
, 
cuºBuf
->
Àngth
);

284 
	`mem˝y
(
de°
 + 
de°Off£t
, 
cuºBuf
->
buf„r
, 
numByãs
);

285 
byãsLe·
 -
numByãs
;

286 
de°Off£t
 +
numByãs
;

288 
cuºBuf
 = 
	`Gë_Next_In_Mesßge_Buf„r_Li°
(currBuf);

292 
	}
}

294 
	$Në_Buf_Exåa˘_AŒ
(
Në_Buf
 *
nBuf
, *
de°
) {

295  
	`Në_Buf_Exåa˘
(
nBuf
, 0, 
de°
, 
	`NET_BUF_SIZE
(nBuf));

296 
	}
}

298 
	$Në_Buf_Remove
(
Në_Buf
 *
nBuf
, 
ul⁄g_t
 
°¨t
, ul⁄g_à
Àngth
) {

300 
Mesßge_Buf„r
 *
•lôBegö
, *
•lôEnd
, *
√xt
;

302 
rc
 = 0;

304 
	`KASSERT0
(
nBuf
, "askedÅoÑemove fromÇullÇBuf");

306 i‡(
Àngth
 == 0)

310 
rc
 = 
	`S∂ô_Buf„r
(
nBuf
, 
°¨t
);

311 i‡(
rc
 != 0) {

312 
	`Pröt
("ÁûedÅÿ•lô buf„∏© sèπ o‡ªmovÆ segmít: %d\n", 
rc
);

313  
rc
;

316 
rc
 = 
	`S∂ô_Buf„r
(
nBuf
, 
°¨t
 + 
Àngth
);

317 i‡(
rc
 != 0) {

318 
	`Pröt
("ÁûedÅÿ•lô buf„∏©Énd o‡ªmovÆ segmít: %d\n", 
rc
);

319  
rc
;

322 
•lôBegö
 = 
	`Föd_Buf„r_At_Off£t
(
nBuf
, 
°¨t
, 
NULL
);

323 
•lôEnd
 = 
	`Föd_Buf„r_At_Off£t
(
nBuf
, 
°¨t
 + 
Àngth
, 
NULL
);

329 
•lôBegö
 !
•lôEnd
) {

330 
√xt
 = 
	`Gë_Next_In_Mesßge_Buf„r_Li°
(
•lôBegö
);

331 
•lôBegö
->
vÆid
 = 0;

332 
•lôBegö
 = 
√xt
;

336 
nBuf
->
Àngth
 -=Üength;

340 
	}
}

342 
	$Në_Buf_Remove_AŒ
(
Në_Buf
 *
nBuf
) {

343 
Mesßge_Buf„r
 *
cuº
, *
√xt
;

345 #i‚de‡
NDEBUG


346 
ul⁄g_t
 
‰ìCou¡
 = 0;

349 
cuº
 = 
	`Gë_Fr⁄t_Of_Mesßge_Buf„r_Li°
(&
nBuf
->
buf„rs
);

350 
cuº
 != 0) {

351 
√xt
 = 
	`Gë_Next_In_Mesßge_Buf„r_Li°
(
cuº
);

353 i‡(
cuº
->
mu°Fªe
) {

354 
	`Fªe
(
cuº
->
buf„r
);

355 #i‚de‡
NDEBUG


356 
‰ìCou¡
++;

360 
	`Fªe
(
cuº
);

362 #i‚de‡
NDEBUG


363 
‰ìCou¡
++;

366 
cuº
 = 
√xt
;

369 
	`CÀ¨_Mesßge_Buf„r_Li°
(&
nBuf
->
buf„rs
);

371 #i‚de‡
NDEBUG


372 
	`KASSERT
(
‰ìCou¡
 =
nBuf
->
mÆlocCou¡
);

377 
	}
}

	@src/geekos/net/rip.c

10 
	~<gìkos/√t/rù.h
>

11 
	~<gìkos/Æ¨m.h
>

12 
	~<gìkos/√t/routög.h
>

13 
	~<gìkos/kthªad.h
>

14 
	~<gìkos/synch.h
>

15 
	~<gìkos/s¸ìn.h
>

16 
	~<gìkos/√t/ùdefs.h
>

18 
	~<gìkos/¥oje˘s.h
>

20 
	#DEBUG_RIP
(
x
...Ë
	`Pröt
("RIP: " x)

	)

23 
	$Inô_RIP
() {

24 
	`TODO_P
(
PROJECT_RIP
,

26 
	}
}

	@src/geekos/net/routing.c

1 
	~<gìkos/√t/routög.h
>

2 
	~<gìkos/kas£π.h
>

3 
	~<gìkos/s¸ìn.h
>

4 
	~<gìkos/mÆloc.h
>

5 
	~<gìkos/î∫o.h
>

6 
	~<gìkos/√t/ùdefs.h
>

7 
	~<gìkos/kthªad.h
>

8 
	~<gìkos/√t/ù.h
>

9 
	~<gìkos/öt.h
>

10 
	~<gìkos/synch.h
>

11 
	~<gìkos/timî.h
>

13 
	~<gìkos/¥oje˘s.h
>

15 
Routög_TabÀ
 
	gs_routögTabÀ
;

16 
Muãx
 
	gs_routögTabÀMuãx
;

19 
	$Inô_Routög
() {

21 
IP_Devi˚
 *
ùDevi˚
;

22 
rc
;

24 
	`Muãx_Inô
(&
s_routögTabÀMuãx
);

26 
	`TODO_P
(
PROJECT_ROUTING
,

28 
	}
}

30 
	$Në_Add_Rouã
(
IP_Addªss
 * 
de°ö©i⁄
, 
Nëmask
 * 
mask
,

31 
IP_Addªss
 * 
g©eway
, 
mëric
, *
öãrÁ˚
) {

34 
	`Muãx_Lock
(&
s_routögTabÀMuãx
);

36 
	`TODO_P
(
PROJECT_ROUTING
, "addÑouteÅoÅheÅable");

38 
	`Muãx_U∆ock
(&
s_routögTabÀMuãx
);

41 
	}
}

43 
	$Në_Dñëe_Rouã
(
IP_Addªss
 * 
de°ö©i⁄
, 
Nëmask
 * 
√tmask
) {

45 
	`Muãx_Lock
(&
s_routögTabÀMuãx
);

46 
	`TODO_P
(
PROJECT_ROUTING
, "deleteÅhisÑoute");

48 
	`Muãx_U∆ock
(&
s_routögTabÀMuãx
);

51 
	}
}

56 
	$Në_CÀ™_Rouãs
(
ul⁄g_t
 
m£cs
) {

57 
˛ó√dRouãs
 = 0;

58 
	`Muãx_Lock
(&
s_routögTabÀMuãx
);

60 
	`TODO_P
(
PROJECT_ROUTING
, "remove staleÑoutes");

61 
	`Muãx_U∆ock
(&
s_routögTabÀMuãx
);

63  
˛ó√dRouãs
;

64 
	}
}

	@src/geekos/net/socket.c

10 
	~<gìkos/√t/sockë.h
>

11 
	~<gìkos/kas£π.h
>

12 
	~<gìkos/mÆloc.h
>

13 
	~<gìkos/î∫o.h
>

14 
	~<gìkos/°rög.h
>

15 
	~<gìkos/√t/√tbuf.h
>

16 
	~<gìkos/√t/udp.h
>

17 
	~<gìkos/√t/t˝.h
>

18 
	~<gìkos/Æ¨m.h
>

19 
	~<gìkos/s¸ìn.h
>

20 
	~<gìkos/kas£π.h
>

22 
	~<gìkos/¥oje˘s.h
>

25 
Sockë_Cª©e
(
uch¨_t
 
ty≥
, 
Êags
 
__©åibuã__
 ((
unu£d
))) {

26 
TODO_P
(
PROJECT_SOCKETS
, "Create");

31 
	$Sockë_C⁄√˘
(
ul⁄g_t
 
id
, 
ush‹t_t
 
p‹t
, 
IP_Addªss
 * 
ùAddªss
) {

32 
rc
 = 0;

33 
	`TODO_P
(
PROJECT_SOCKETS
, "Connect");

34  
rc
;

35 
	}
}

37 
	$Sockë_Böd
(
ul⁄g_t
 
id
, 
ush‹t_t
 
p‹t
, 
IP_Addªss
 * 
ùAddªss
) {

38 
	`TODO_P
(
PROJECT_SOCKETS
, "Bind");

40 
	}
}

42 
	$Sockë_Li°í
(
ul⁄g_t
 
id
, ul⁄g_à
backlog
) {

43 
rc
 = 0;

44 
	`TODO_P
(
PROJECT_SOCKETS
, "Listen");

45  
rc
;

46 
	}
}

49 
	$Sockë_Ac˚±
(
ul⁄g_t
 
id
, 
IP_Addªss
 * 
˛õ¡IpAddªss
,

50 
ush‹t_t
 * 
˛õ¡P‹t
) {

51 
fd
 = -1;

52 
	`TODO_P
(
PROJECT_SOCKETS
, "Accept (returnsá socket!)");

53  
fd
;

54 
	}
}

56 
	$Sockë_Re˚ive
(
ul⁄g_t
 
id
, 
uch¨_t
 * 
buf„r
, ul⁄g_à
buf„rSize
) {

57 
	`TODO_P
(
PROJECT_SOCKETS
, "Receive");

59 
	}
}

61 
	$Sockë_Síd
(
ul⁄g_t
 
id
, 
uch¨_t
 * 
buf„r
, ul⁄g_à
buf„rSize
) {

62 
	`TODO_P
(
PROJECT_SOCKETS
, "Send");

64 
	}
}

66 
	$Sockë_Síd_To
(
ul⁄g_t
 
id
, 
uch¨_t
 * 
buf„r
, ul⁄g_à
buf„rSize
,

67 
ush‹t_t
 
p‹t
, 
IP_Addªss
 * 
ùAddªss
) {

68 
	`TODO_P
(
PROJECT_SOCKETS
, "SendTo");

70 
	}
}

72 
	$Sockë_Re˚ive_From
(
ul⁄g_t
 
id
, 
uch¨_t
 * 
buf„r
, ul⁄g_à
buf„rSize
,

73 
ush‹t_t
 * 
p‹t
, 
IP_Addªss
 * 
ùAddªss
) {

74 
	`TODO_P
(
PROJECT_SOCKETS
, "ReceiveFrom");

76 
	}
}

78 
	$Sockë_De°roy
(
ul⁄g_t
 
id
) {

79 
	`TODO_P
(
PROJECT_SOCKETS
, "Socket Destroy");

81 
	}
}

85 
	$Sockë_Clo£
(
ul⁄g_t
 
id
) {

86 
	`TODO_P
(
PROJECT_SOCKETS
, "Socket Close");

87  
EUNSUPPORTED
;

88 
	}
}

92 
	$Sockë_Di•©ch
(
IP_Devi˚
 *
devi˚
, 
uch¨_t
 
ty≥
, 
ush‹t_t
 
de°P‹t
,

93 
ush‹t_t
 
§cP‹t
, 
IP_Addªss
 * 
de°Addªss
,

94 
IP_Addªss
 * 
§cAddªss
, 
Në_Buf
 *
nBuf
,

95 *
d©a
) {

96 
rc
 = 0;

97 
	`TODO_P
(
PROJECT_SOCKETS
, "socket dispatch (receivedÖacket)");

98  
rc
;

99 
	}
}

102 
	$Inô_Sockës
() {

103 
	`TODO_P
(
PROJECT_SOCKETS
, "initialization");

104 
	}
}

	@src/geekos/net/sys_net.c

1 
	~<gìkos/sysˇŒ.h
>

2 
	~<gìkos/î∫o.h
>

3 
	~<gìkos/kthªad.h
>

4 
	~<gìkos/öt.h
>

5 
	~<gìkos/ñf.h
>

6 
	~<gìkos/mÆloc.h
>

7 
	~<gìkos/s¸ìn.h
>

8 
	~<gìkos/keybﬂrd.h
>

9 
	~<gìkos/°rög.h
>

10 
	~<gìkos/u£r.h
>

11 
	~<gìkos/timî.h
>

12 
	~<gìkos/vfs.h
>

13 
	~<gìkos/sig«l.h
>

14 
	~<gìkos/£m.h
>

16 
	~<gìkos/sys_√t.h
>

17 
	~<gìkos/¥oje˘s.h
>

19 
	~<gìkos/√t/ëhî√t.h
>

20 
	~<gìkos/√t/√tbuf.h
>

21 
	~<gìkos/√t/√t.h
>

22 
	~<gìkos/√t/¨p.h
>

23 
	~<gìkos/√t/ù.h
>

24 
	~<gìkos/√t/routög.h
>

25 
	~<gìkos/√t/sockë.h
>

28 
C›y_U£r_Såög
(
ul⁄g_t
 
uaddr
, ul⁄g_à
Àn
, ul⁄g_à
maxLí
,

29 **
pSå
);

40 
	$Sys_EthPackëSíd
(
I¡îru±_Sèã
 *
°©e
) {

41 
uch¨_t
 
de°Addªss
[6];

42 
Në_Devi˚
 *
devi˚
;

43 
rc
 = 0;

44 
Në_Buf
 *
nBuf
;

46 
ul⁄g_t
 
bufLígth
 = 
	`MAX
(
°©e
->
ecx
, 
ETH_MIN_DATA
);

47 i‡(
bufLígth
 > 
ETH_MAX_DATA
) {

48 
rc
 = -1;

49 
Áû
;

52 *
buf„r
 = 
	`MÆloc
(
bufLígth
);

53 i‡(
buf„r
 == 0)

54  
ENOMEM
;

56 
	`mem£t
(
buf„r
, '\0', 
bufLígth
);

58 
	`C›y_From_U£r
(
de°Addªss
, 
°©e
->
edx
, 6);

59 
	`C›y_From_U£r
(
buf„r
, 
°©e
->
ebx
, sèã->
ecx
);

61 *
devi˚_«me
;

62 
	`C›y_U£r_Såög
(
°©e
->
esi
, sèã->
edi
, 10, &
devi˚_«me
);

63 
rc
 = 
	`Gë_Në_Devi˚_By_Name
(
devi˚_«me
, &
devi˚
);

64 
	`Fªe
(
devi˚_«me
);

65 i‡(
rc
 != 0)

66 
Áû
;

68 
rc
 = 
	`Në_Buf_Cª©e
(&
nBuf
);

69 i‡(
rc
 != 0)

70 
Áû
;

72 
rc
 = 
	`Në_Buf_Pª≥nd
(
nBuf
, 
buf„r
, 
bufLígth
, 
NET_BUF_ALLOC_COPY
);

73 i‡(
rc
 != 0)

74 
Áû
;

76 
	`E«bÀ_I¡îru±s
();

78 
rc
 = 
	`Eth_Tønsmô
(
devi˚
, 
nBuf
, 
de°Addªss
, 
bufLígth
);

79 i‡(
rc
 != 0)

80 
Áû
;

82 
	`Në_Buf_De°roy
(
nBuf
);

84 
	`DißbÀ_I¡îru±s
();

86 
Áû
:

87 
	`Fªe
(
buf„r
);

89  
rc
;

90 
	}
}

99 
	$Sys_EthPackëRe˚ive
(
I¡îru±_Sèã
 *
°©e
) {

100 
Në_Devi˚
 *
devi˚
;

101 
Në_Buf
 *
nBuf
;

102 *
buf„r
;

103 
rc
 = 0;

105 
rc
 = 
	`Gë_Në_Devi˚_By_Name
("ëh0", &
devi˚
);

106 i‡(
rc
 != 0)

107 
Áû
;

109 
	`E«bÀ_I¡îru±s
();

111 
rc
 = 
	`Eth_Re˚ive
(
devi˚
, &
nBuf
);

113 
	`DißbÀ_I¡îru±s
();

115 i‡(
rc
 != 0)

116 
Áû
;

118 
buf„r
 = 
	`MÆloc
(
	`NET_BUF_SIZE
(
nBuf
));

119 i‡(
buf„r
 == 0) {

120 
rc
 = 
ENOMEM
;

121 
Áû
;

124 
rc
 = 
	`Në_Buf_Exåa˘_AŒ
(
nBuf
, 
buf„r
);

125 i‡(
rc
 != 0) {

126 
	`Fªe
(
buf„r
);

127 
Áû
;

130 
	`C›y_To_U£r
(
°©e
->
ebx
, 
buf„r
, sèã->
ecx
);

132 
	`Në_Buf_De°roy
(
nBuf
);

134 
	`Fªe
(
buf„r
);

136 
Áû
:

138 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

139  
rc
;

140 
	}
}

149 
	$Sys_AΩ
(
I¡îru±_Sèã
 *
°©e
) {

150 
IP_Addªss
 
ùAddªss
;

151 
MAC_Addªss
 
macAddªss
;

152 
Në_Devi˚
 *
devi˚
;

153 
rc
 = 0;

155 
rc
 = 
	`Gë_Në_Devi˚_By_Name
("ëh0", &
devi˚
);

156 i‡(
rc
 != 0)

157 
Áû
;

160 
	`C›y_From_U£r
(
ùAddªss
.
±r
, 
°©e
->
ebx
, (
IP_Addªss
));

162 
	`E«bÀ_I¡îru±s
();

165 
rc
 = 
	`ARP_Resﬁve_Addªss
(
devi˚
, 
ARP_HTYPE_ETH
, 
ARP_PTYPE_IPV4
,

166 
ùAddªss
.
±r
, 
macAddªss
);

168 
	`DißbÀ_I¡îru±s
();

170 i‡(
rc
 != 0)

171 
Áû
;

173 
	`C›y_To_U£r
(
°©e
->
ecx
, 
macAddªss
, (macAddress));

175 
Áû
:

176  
rc
;

177 
	}
}

189 
	$Sys_RouãAdd
(
I¡îru±_Sèã
 *
°©e
) {

190 
IP_Addªss
 
ùAddªss
;

191 
Nëmask
 
√tmask
;

192 
IP_Addªss
 
g©eway
;

193 *
öãrÁ˚
;

194 
rc
 = 0;

196 
rc
 = 
	`C›y_U£r_Såög
(
°©e
->
esi
, sèã->
edi
, 1023, &
öãrÁ˚
);

197 i‡(
rc
 != 0)

198  
rc
;

200 i‡(!
	`C›y_From_U£r
(
ùAddªss
.
±r
, 
°©e
->
ebx
, 4)) {

201 
rc
 = 
EINVALID
;

202 
Áû
;

205 i‡(!
	`C›y_From_U£r
(
√tmask
.
±r
, 
°©e
->
ecx
, 4)) {

206 
rc
 = 
EINVALID
;

207 
Áû
;

210 i‡(
°©e
->
edx
 != 0) {

211 i‡(!
	`C›y_From_U£r
(
g©eway
.
±r
, 
°©e
->
edx
, 4)) {

212 
rc
 = 
EINVALID
;

213 
Áû
;

216 
	`E«bÀ_I¡îru±s
();

217 
rc
 = 
	`Në_Add_Rouã
(&
ùAddªss
, &
√tmask
, &
g©eway
, 0, 
öãrÁ˚
);

221 
	`E«bÀ_I¡îru±s
();

222 
rc
 = 
	`Në_Add_Rouã
(&
ùAddªss
, &
√tmask
, 
NULL
, 0, 
öãrÁ˚
);

225 
	`DißbÀ_I¡îru±s
();

227 i‡(
rc
 != 0) {

228 
Áû
;

231 
Áû
:

232 
	`Fªe
(
öãrÁ˚
);

233  
rc
;

234 
	}
}

242 
	$Sys_RouãDñ
(
I¡îru±_Sèã
 *
°©e
) {

243 
IP_Addªss
 
ùAddªss
;

244 
Nëmask
 
√tmask
;

245 
rc
;

247 i‡(!
	`C›y_From_U£r
(
ùAddªss
.
±r
, 
°©e
->
ebx
, 4)) {

248 
rc
 = 
EINVALID
;

249 
Áû
;

252 i‡(!
	`C›y_From_U£r
(
√tmask
.
±r
, 
°©e
->
ecx
, 4)) {

253 
rc
 = 
EINVALID
;

254 
Áû
;

257 
	`E«bÀ_I¡îru±s
();

258 
rc
 = 
	`Në_Dñëe_Rouã
(&
ùAddªss
, &
√tmask
);

259 
	`DißbÀ_I¡îru±s
();

261 i‡(
rc
 != 0)

262  
rc
;

264 
Áû
:

265  
rc
;

266 
	}
}

274 
	$Sys_RouãGë
(
I¡îru±_Sèã
 *
°©e
) {

275 
IP_Rouã
 *
rouãs
;

276 
rc
 = 0;

277 
rouãs
 = 
	`MÆloc
((
IP_Rouã
Ë* 
°©e
->
ecx
);

278 i‡(
rouãs
 =
NULL
)

279  
ENOMEM
;

281 
	`E«bÀ_I¡îru±s
();

282 
	`TODO_P
(
PROJECT_ROUTING
, "collectÑouteÅable intoÑoutes");

283 
	`DißbÀ_I¡îru±s
();

285 i‡(
rc
 < 0)

286 
Áû
;

288 i‡(!
	`C›y_To_U£r
(
°©e
->
ebx
, 
rouãs
, (
IP_Rouã
Ë* 
rc
)) {

289 
rc
 = 
EINVALID
;

292 
Áû
:

294 
	`Fªe
(
rouãs
);

295  
rc
;

296 
	}
}

306 
	$Sys_IPC⁄figuª
(
I¡îru±_Sèã
 *
°©e
) {

307 *
öãrÁ˚
;

308 
IP_Addªss
 
ùAddªss
;

309 
Nëmask
 
√tmask
;

310 
boﬁ
 
fIpAddªss
 = 
Ál£
;

311 
boﬁ
 
fNëmask
 = 
Ál£
;

313 
rc
 = 0;

315 
rc
 = 
	`C›y_U£r_Såög
(
°©e
->
ebx
, sèã->
ecx
, 1023, &
öãrÁ˚
);

316 i‡(
rc
 != 0)

317  
rc
;

319 i‡(
°©e
->
edx
 != 0) {

320 i‡(!
	`C›y_From_U£r
(
ùAddªss
.
±r
, 
°©e
->
edx
, 4)) {

321 
rc
 = 
EINVALID
;

322 
Áû
;

324 
fIpAddªss
 = 
åue
;

327 i‡(
°©e
->
esi
 != 0) {

328 i‡(!
	`C›y_From_U£r
(
√tmask
.
±r
, 
°©e
->
esi
, 4)) {

329 
rc
 = 
EINVALID
;

330 
Áû
;

332 
fNëmask
 = 
åue
;

335 
rc
 = 
	`IP_Devi˚_C⁄figuª
(
öãrÁ˚
,

336 
fIpAddªss
 ? &
ùAddªss
 : 
NULL
,

337 
fNëmask
 ? &
√tmask
 : 
NULL
);

339 
Áû
:

340 
	`Fªe
(
öãrÁ˚
);

341  
rc
;

342 
	}
}

352 
	$Sys_IPGë
(
I¡îru±_Sèã
 *
°©e
) {

354 *
öãrÁ˚
 = 
NULL
;

355 
rc
 = 0;

356 
IP_Devi˚_Info
 *
devInfo
;

358 i‡(
°©e
->
edx
 != 0) {

359 
rc
 = 
	`C›y_U£r_Såög
(
°©e
->
edx
, sèã->
esi
, 1023, &
öãrÁ˚
);

360 i‡(
rc
 != 0) {

361  
rc
;

365 
devInfo
 = 
	`MÆloc
((
IP_Devi˚_Info
Ë* 
°©e
->
ecx
);

366 i‡(
devInfo
 =
NULL
)

367  
ENOMEM
;

369 
rc
 = 
	`IP_Devi˚_Sèt
(
devInfo
, 
°©e
->
ecx
, 
öãrÁ˚
);

370 i‡(
rc
 < 0)

371 
Áû
;

373 i‡(!
C›y_To_U£r


374 (
°©e
->
ebx
, 
devInfo
, (
IP_Devi˚_Info
Ë* 
rc
)) {

375 
rc
 = 
EINVALID
;

378 
Áû
:

379 
	`Fªe
(
devInfo
);

381 i‡(
öãrÁ˚
 != 0)

382 
	`Fªe
(
öãrÁ˚
);

384  
rc
;

385 
	}
}

394 
	$Sys_IPSíd
(
I¡îru±_Sèã
 *
°©e
) {

395 
IP_Addªss
 
ùAddªss
;

396 
rc
 = 0;

397 *
°rög
 = 
NULL
;

398 
Në_Buf
 *
nBuf
;

400 i‡(!
	`C›y_From_U£r
(
ùAddªss
.
±r
, 
°©e
->
ebx
, 4)) {

401 
rc
 = 
EINVALID
;

402 
Áû
;

405 
rc
 = 
	`C›y_U£r_Såög
(
°©e
->
ecx
, sèã->
edx
, 1500, &
°rög
);

406 i‡(
rc
 != 0) {

407 
Áû
;

410 
	`E«bÀ_I¡îru±s
();

412 
	`TODO_P
(
PROJECT_IP
, "constructá buffer withÅhe ip frameándÅransmit");

414 
Áû
:

415 
	`Fªe
(
°rög
);

417 
	`DißbÀ_I¡îru±s
();

419  
rc
;

420 
	}
}

428 
	$Sys_Sockë
(
I¡îru±_Sèã
 *
°©e
) {

429 
rc
;

430 
	`E«bÀ_I¡îru±s
();

431 
rc
 = 
	`Sockë_Cª©e
((
uch¨_t
Ë
°©e
->
ebx
, ()°©e->
ecx
);

432 
	`DißbÀ_I¡îru±s
();

433  
rc
;

434 
	}
}

443 
	$Sys_Böd
(
I¡îru±_Sèã
 *
°©e
) {

444 
IP_Addªss
 
addªss
;

445 
rc
;

447 
	`C›y_From_U£r
(
addªss
.
±r
, 
°©e
->
edx
, 4);

449 
	`E«bÀ_I¡îru±s
();

450 
rc
 = 
	`Sockë_Böd
(
°©e
->
ebx
, (
ush‹t_t
Ë°©e->
ecx
, &
addªss
);

451 
	`DißbÀ_I¡îru±s
();

453  
rc
;

454 
	}
}

462 
	$Sys_Li°í
(
I¡îru±_Sèã
 *
°©e
) {

463 
rc
;

465 
	`E«bÀ_I¡îru±s
();

466 
rc
 = 
	`Sockë_Li°í
(
°©e
->
ebx
, sèã->
ecx
);

467 
	`DißbÀ_I¡îru±s
();

469  
rc
;

470 
	}
}

479 
	$Sys_Ac˚±
(
I¡îru±_Sèã
 *
°©e
) {

480 
IP_Addªss
 
ù
;

481 
ush‹t_t
 
p‹t
;

482 
rc
;

484 
	`E«bÀ_I¡îru±s
();

485 
rc
 = 
	`Sockë_Ac˚±
(
°©e
->
ebx
, &
ù
, &
p‹t
);

486 
	`DißbÀ_I¡îru±s
();

488 i‡(
rc
 >= 0) {

489 
	`C›y_To_U£r
(
°©e
->
esi
, 
ù
.
±r
, 4);

490 
	`C›y_To_U£r
(
°©e
->
ecx
, &
p‹t
, (port));

493  
rc
;

494 
	}
}

503 
	$Sys_C⁄√˘
(
I¡îru±_Sèã
 *
°©e
) {

504 
IP_Addªss
 
addªss
;

505 
rc
;

507 
	`C›y_From_U£r
(
addªss
.
±r
, 
°©e
->
edx
, 4);

509 
	`E«bÀ_I¡îru±s
();

510 
rc
 = 
	`Sockë_C⁄√˘
(
°©e
->
ebx
, (
ush‹t_t
Ë°©e->
ecx
, &
addªss
);

511 
	`DißbÀ_I¡îru±s
();

512  
rc
;

513 
	}
}

524 
	$Sys_Síd
(
I¡îru±_Sèã
 *
°©e
) {

525 
rc
;

527 
uch¨_t
 *
buf„r
 = 
	`MÆloc
(
°©e
->
edx
);

528 i‡(
buf„r
 == 0)

529  
ENOMEM
;

531 
	`C›y_From_U£r
(
buf„r
, 
°©e
->
ecx
, sèã->
edx
);

533 
	`E«bÀ_I¡îru±s
();

534 
rc
 = 
	`Sockë_Síd
(
°©e
->
ebx
, 
buf„r
, sèã->
edx
);

535 
	`DißbÀ_I¡îru±s
();

537 
	`Fªe
(
buf„r
);

539  
rc
;

540 
	}
}

551 
	$Sys_Re˚ive
(
I¡îru±_Sèã
 *
°©e
) {

552 
rc
;

554 
uch¨_t
 *
buf„r
 = 
	`MÆloc
(
°©e
->
edx
);

555 i‡(
buf„r
 == 0)

556  
ENOMEM
;

558 
	`E«bÀ_I¡îru±s
();

559 
rc
 = 
	`Sockë_Re˚ive
(
°©e
->
ebx
, 
buf„r
, sèã->
edx
);

560 
	`DißbÀ_I¡îru±s
();

562 i‡(
rc
 > 0) {

563 
	`C›y_To_U£r
(
°©e
->
ecx
, 
buf„r
, 
rc
);

566 
	`Fªe
(
buf„r
);

568  
rc
;

569 
	}
}

580 
	$Sys_SídTo
(
I¡îru±_Sèã
 *
°©e
) {

581 
	`TODO_P
(
PROJECT_SOCKETS
, "sendto system call");

583 
	}
}

594 
	$Sys_Re˚iveFrom
(
I¡îru±_Sèã
 *
°©e
) {

595 
	`TODO_P
(
PROJECT_SOCKETS
, "recvfrom system call");

597 
	}
}

608 
	$Sys_Clo£Sockë
(
I¡îru±_Sèã
 *
°©e
) {

609 
rc
;

611 
	`E«bÀ_I¡îru±s
();

612 
rc
 = 
	`Sockë_Clo£
(
°©e
->
ebx
);

613 
	`DißbÀ_I¡îru±s
();

615  
rc
;

616 
	}
}

	@src/geekos/net/tcp.c

10 
	~<gìkos/√t/t˝.h
>

11 
	~<gìkos/mÆloc.h
>

12 
	~<gìkos/î∫o.h
>

13 
	~<gìkos/s¸ìn.h
>

14 
	~<gìkos/√t/sockë.h
>

15 
	~<gìkos/¥oje˘s.h
>

17 
	$TCP_Di•©ch
(
IP_Devi˚
 *
devi˚
, 
IP_Addªss
 * 
de°Addªss
,

18 
IP_Addªss
 * 
§cAddªss
, 
Në_Buf
 *
nBuf
) {

19 
TCP_Hódî
 
hódî
;

20 
rc
;

21 
	`TODO_P
(
PROJECT_TCP
, "dispatchÅhisÖacket's contentsÅo socket");

24 
	}
}

26 
	$TCP_Tønsmô
(
IP_Addªss
 * 
§cAddªss
, IP_Addªs†* 
de°Addªss
,

27 
ush‹t_t
 
§cP‹t
, ush‹t_à
de°P‹t
, 
uch¨_t
 
Êags
,

28 
ul⁄g_t
 
£qNum
, ul⁄g_à
ackNum
, ul⁄g_à
advîti£dWödow
,

29 
Në_Buf
 *
nBuf
) {

30 
rc
 = 0;

31 
	`TODO_P
(
PROJECT_TCP
, "transmit withÅheseÖarams");

32  
rc
;

33 
	}
}

	@src/geekos/net/udp.c

10 
	~<gìkos/√t/udp.h
>

11 
	~<gìkos/kas£π.h
>

12 
	~<gìkos/mÆloc.h
>

13 
	~<gìkos/î∫o.h
>

14 
	~<gìkos/¥oje˘s.h
>

16 
	$UDP_Tønsmô
(
IP_Addªss
 * 
§c
,

17 
IP_Addªss
 * 
de°ö©i⁄
,

18 
ush‹t_t
 
§cP‹t
, ush‹t_à
de°P‹t
, 
Në_Buf
 *
nBuf
) {

19 
rc
 = 0;

20 
	`TODO_P
(
PROJECT_TCP
, "transmit withÅheseÖarams");

21  
rc
;

22 
	}
}

25 
	$UDP_Di•©ch
(
IP_Devi˚
 *
devi˚
, 
IP_Addªss
 * 
de°Addªss
,

26 
IP_Addªss
 * 
§cAddªss
, 
Në_Buf
 *
nBuf
) {

27 
rc
 = 0;

28 
	`TODO_P
(
PROJECT_UDP
, "dispatchÅhisÖacket's contentsÅo socket");

30  
rc
;

31 
	}
}

	@src/geekos/paging.c

18 
	~<gìkos/°rög.h
>

19 
	~<gìkos/öt.h
>

20 
	~<gìkos/idt.h
>

21 
	~<gìkos/kthªad.h
>

22 
	~<gìkos/kas£π.h
>

23 
	~<gìkos/s¸ìn.h
>

24 
	~<gìkos/mem.h
>

25 
	~<gìkos/mÆloc.h
>

26 
	~<gìkos/gdt.h
>

27 
	~<gìkos/£gmít.h
>

28 
	~<gìkos/u£r.h
>

29 
	~<gìkos/vfs.h
>

30 
	~<gìkos/¸c32.h
>

31 
	~<gìkos/∑gög.h
>

32 
	~<gìkos/î∫o.h
>

33 
	~<gìkos/¥oje˘s.h
>

34 
	~<gìkos/smp.h
>

36 
	~<libc/mm≠.h
>

46 
	#SECTORS_PER_PAGE
 (
PAGE_SIZE
 / 
SECTOR_SIZE
)

	)

51 
	gdebugFau…s
 = 0;

52 
	#Debug
(
¨gs
...Ëi‡(
debugFau…s
Ë
	`Pröt
◊rgs)

	)

55 c⁄° 
pde_t
 *
	$Kî√l_Page_Dú
() {

56 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_A
,

58  
NULL
;

59 
	}
}

66 
	$Pröt_Fau…_Info
(
uöt_t
 
addªss
, 
Áu…code_t
 
Áu…Code
) {

67 
uöt_t
 
g_‰ìPageCou¡
;

69 
	`Pröt
("Pid %d: ", 
CURRENT_THREAD
->
pid
);

70 
	`Pröt
("\n Page FaultÑeceived,átáddress %p (%dÖages free)\n",

71 (*)
addªss
, 
g_‰ìPageCou¡
);

72 i‡(
Áu…Code
.
¥Ÿe˘i⁄Viﬁ©i⁄
)

73 
	`Pröt
(" Protection Violation, ");

75 
	`Pröt
(" Non-presentÖage, ");

76 i‡(
Áu…Code
.
wrôeFau…
)

77 
	`Pröt
("Write Fault, ");

79 
	`Pröt
("Read Fault, ");

80 i‡(
Áu…Code
.
u£rModeFau…
)

81 
	`Pröt
("in User Mode\n");

83 
	`Pröt
("in Supervisor Mode\n");

84 
	}
}

92  
	$Page_Fau…_H™dÀr
(
I¡îru±_Sèã
 *
°©e
) {

93 
ul⁄g_t
 
addªss
;

94 
Áu…code_t
 
Áu…Code
;

96 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

99 
addªss
 = 
	`Gë_Page_Fau…_Addªss
();

100 
	`Debug
("PagêÁu… @%lx\n", 
addªss
);

102 i‡(
addªss
 < 0xfec01000 &&áddress > 0xf0000000) {

103 
	`KASSERT0
(0, "page faultáddress in APIC/IOAPICÑange\n");

107 
Áu…Code
 = *((
Áu…code_t
 *Ë& (
°©e
->
îr‹Code
));

110 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_B
, "handleÖage faults");

112 
	`TODO_P
(
PROJECT_MMAP
, "handle mmap'dÖage faults");

115 
îr‹
:

116 
	`Pröt
("Unexpected Page FaultÑeceived\n");

117 
	`Pröt_Fau…_Info
(
addªss
, 
Áu…Code
);

118 
	`Dump_I¡îru±_Sèã
(
°©e
);

120 i‡(!
Áu…Code
.
u£rModeFau…
)

121 
	`KASSERT0
(0, "unhandled kernel-modeÖage fault.");

124 
	`Exô
(-1);

125 
	}
}

127 
	$Idíôy_M≠_Page
(
pde_t
 * 
cuºítPageDú
, 
addªss
, 
Êags
) {

128 
	}
}

139 
	$Inô_VM
(
BoŸ_Info
 *
boŸInfo
) {

149 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_A
,

151 
	}
}

153 
	$Inô_Sec⁄d¨y_VM
() {

154 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_A
, "enableÖaging on secondary cores");

155 
	}
}

162 
	$Inô_Pagög
() {

163 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_B
,

165 
	}
}

173 
	$Föd_S∑˚_On_Pagög_Fûe
() {

174 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

175 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_B
, "Find freeÖage inÖaging file");

176  
EUNSUPPORTED
;

177 
	}
}

184 
	$Fªe_S∑˚_On_Pagög_Fûe
(
∑gefûeIndex
) {

185 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

186 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_B
, "FreeÖage inÖaging file");

187 
	}
}

197 
	$Wrôe_To_Pagög_Fûe
(*
∑ddr
, 
ul⁄g_t
 
vaddr
, 
∑gefûeIndex
) {

198 
Page
 *
∑ge
 = 
	`Gë_Page
((
ul⁄g_t
Ë
∑ddr
);

199 
	`KASSERT
(!(
∑ge
->
Êags
 & 
PAGE_PAGEABLE
));

200 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_B
, "WriteÖage dataÅoÖaging file");

201 
	}
}

212 
	$Ród_From_Pagög_Fûe
(*
∑ddr
, 
ul⁄g_t
 
vaddr
, 
∑gefûeIndex
) {

213 
Page
 *
∑ge
 = 
	`Gë_Page
((
ul⁄g_t
Ë
∑ddr
);

214 
	`KASSERT
(!(
∑ge
->
Êags
 & 
PAGE_PAGEABLE
));

215 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_B
, "ReadÖage data fromÖaging file");

216 
	}
}

219 *
	$Mm≠_Im∂
(*
±r
, 
Àngth
, 
¥Ÿ
, 
Êags
, 
fd
) {

220 
	`TODO_P
(
PROJECT_MMAP
, "Mmap setup mapping");

221  
NULL
;

222 
	}
}

224 
boﬁ
 
	$Is_Mm≠ed_Page
(
U£r_C⁄ãxt
 * 
c⁄ãxt
, 
ul⁄g_t
 
vaddr
) {

225 
	`TODO_P
(
PROJECT_MMAP
,

227  
Ál£
;

228 
	}
}

230 
	$Wrôe_Out_Mm≠ed_Page
(
U£r_C⁄ãxt
 *
c⁄ãxt
, 
ul⁄g_t
 
vaddr
) {

231 
	`TODO_P
(
PROJECT_MMAP
, "Mmap write back dirty mmap'dÖage");

232 
	}
}

234 
	$Munm≠_Im∂
(
ul⁄g_t
 
±r
) {

235 
	`TODO_P
(
PROJECT_MMAP
, "unmappÅheÖages");

236 
	}
}

	@src/geekos/pfat.c

16 
	~<limôs.h
>

17 
	~<gìkos/î∫o.h
>

18 
	~<gìkos/s¸ìn.h
>

19 
	~<gìkos/°rög.h
>

20 
	~<gìkos/mÆloc.h
>

21 
	~<gìkos/ide.h
>

22 
	~<gìkos/blockdev.h
>

23 
	~<gìkos/bô£t.h
>

24 
	~<gìkos/vfs.h
>

25 
	~<gìkos/li°.h
>

26 
	~<gìkos/synch.h
>

27 
	~<gìkos/pÁt.h
>

28 
	~<gìkos/¥oje˘s.h
>

47 
	#PAGEFILE_FILENAME
 "/∑gefûe.bö"

	)

49 
	gdebugPFAT
 = 0;

50 
	#Debug
(
¨gs
...Ëi‡(
debugPFAT
Ë
	`Pröt
("PFAT: "árgs)

	)

52 
	gPFAT_Fûe
;

53 
DEFINE_LIST
(
PFAT_Fûe_Li°
, 
PFAT_Fûe
);

59 
	sPFAT_In°™˚
 {

60 
boŸSe˘‹
 
	mfsöfo
;

61 *
	mÁt
;

62 
dúe˘‹yE¡ry
 *
	mroŸDú
;

63 
dúe˘‹yE¡ry
 
	mroŸDúE¡ry
;

64 
Muãx
 
	mlock
;

65 
PFAT_Fûe_Li°
 
	mfûeLi°
;

74 
	sPFAT_Fûe
 {

75 
dúe˘‹yE¡ry
 *
	míåy
;

76 
ul⁄g_t
 
	mnumBlocks
;

77 
	mcuºBlock
;

78 *
	mfûeD©aCache
;

79 
Muãx
 
	mlock
;

80 
DEFINE_LINK
(
PFAT_Fûe_Li°
, 
PFAT_Fûe
);

82 
IMPLEMENT_LIST
(
PFAT_Fûe_Li°
, 
PFAT_Fûe
);

88 
	$C›y_Sèt
(
VFS_Fûe_Sèt
 *
°©
, 
dúe˘‹yE¡ry
 * 
íåy
) {

89 
°©
->
size
 = 
íåy
->
fûeSize
;

90 
°©
->
isDúe˘‹y
 = 
íåy
->
dúe˘‹y
;

92 
°©
->
isSëuid
 = 
íåy
->
isSëUid
;

93 
	`mem˝y
(
°©
->
a˛s
, 
íåy
->acls, (stat->acls));

94 
	}
}

99 
	$PFAT_FSèt
(
Fûe
 *
fûe
, 
VFS_Fûe_Sèt
 *
°©
) {

100 
PFAT_Fûe
 *
pÁtFûe
 = (PFAT_Fûê*)
fûe
->
fsD©a
;

101 
	`C›y_Sèt
(
°©
, 
pÁtFûe
->
íåy
);

103 
	}
}

108 
	$PFAT_Ród
(
Fûe
 *
fûe
, *
buf
, 
ul⁄g_t
 
numByãs
) {

109 
PFAT_Fûe
 *
pÁtFûe
 = (PFAT_Fûê*)
fûe
->
fsD©a
;

110 
PFAT_In°™˚
 *
ö°™˚
 =

111 (
PFAT_In°™˚
 *)
fûe
->
mou¡Poöt
->
fsD©a
;

112 
ul⁄g_t
 
°¨t
 = 
fûe
->
fûePos
;

113 
ul⁄g_t
 
íd
 = 
fûe
->
fûePos
 + 
numByãs
;

115 i‡(
pÁtFûe
->
íåy
->
dúe˘‹y
)

116  
EINVALID
;

118 i‡(
íd
 > 
fûe
->
ídPos
) {

119 
numByãs
 = 
fûe
->
ídPos
 - fûe->
fûePos
;

120 
íd
 = 
fûe
->
ídPos
;

124 
ul⁄g_t
 
°¨tBlock
, 
ídBlock
, 
curBlock
;

125 
ul⁄g_t
 
i
;

128 i‡(
numByãs
 > 
INT_MAX
)

129  
EINVALID
;

134 i‡(
°¨t
 =
fûe
->
ídPos
) {

139 i‡(
°¨t
 >
fûe
->
ídPos
 || 
íd
 > file->endPos ||Énd < start) {

140 
Debug


142 
fûe
->
fûePos
, 
numByãs
, fûe->
ídPos
);

143  
EINVALID
;

150 
°¨tBlock
 = 
°¨t
 / 
SECTOR_SIZE
;

151 
ídBlock
 = 
	`Round_Up_To_Block
(
íd
Ë/ 
SECTOR_SIZE
;

154 
ul⁄g_t
 
°¨tOff£t
 = 
°¨t
 - (
°¨tBlock
 * 
SECTOR_SIZE
);

161 
	`KASSERT
(
pÁtFûe
->
íåy
);

162 
curBlock
 = 
pÁtFûe
->
cuºBlock
;

163 
ul⁄g_t
 
cuºOff£t
;

164 
ul⁄g_t
 
fú°Block
;

166 
i
 = 
°¨tBlock
; i < 
ídBlock
; ++i) {

168 i‡(
curBlock
 =
FAT_ENTRY_FREE
 || curBlock =
FAT_ENTRY_EOF
) {

169 
	`Pröt
("U√x≥˘edÉnd o‡fûêö FATáàfûêblock %lu\n", 
i
);

170  
EIO
;

174 i‡(
i
 >
°¨tBlock
) {

175 
rc
 = 0;

178 
	`Muãx_Lock
(&
pÁtFûe
->
lock
);

180 
rc
 = 
	`Block_Ród
(
fûe
->
mou¡Poöt
->
dev
, 
curBlock
,

181 
pÁtFûe
->
fûeD©aCache
);

183 i‡(
i
 =
°¨tBlock
) {

185 
sh¨e
;

186 i‡(
numByãs
 < 
SECTOR_SIZE
 - 
°¨tOff£t
) {

188 
	`mem˝y
(
buf
, 
pÁtFûe
->
fûeD©aCache
 + 
°¨tOff£t
,

189 
numByãs
);

190 
cuºOff£t
 = 
numByãs
;

192 
	`mem˝y
(
buf
, 
pÁtFûe
->
fûeD©aCache
 + 
°¨tOff£t
,

193 
SECTOR_SIZE
 - 
°¨tOff£t
);

194 
cuºOff£t
 = 
SECTOR_SIZE
 - 
°¨tOff£t
;

196 
curBlock
 = 
ö°™˚
->
Át
[curBlock];

198 } i‡(
i
 =
ídBlock
 - 1) {

199 
	`mem˝y
(
buf
 + 
cuºOff£t
, 
pÁtFûe
->
fûeD©aCache
,

200 
numByãs
 - 
cuºOff£t
);

201 i‡(
numByãs
 - 
cuºOff£t
 =
SECTOR_SIZE
) {

202 
curBlock
 = 
ö°™˚
->
Át
[curBlock];

204 
cuºOff£t
 +
numByãs
 - currOffset;

206 
	`mem˝y
(
buf
 + 
cuºOff£t
, 
pÁtFûe
->
fûeD©aCache
,

207 
SECTOR_SIZE
);

208 
cuºOff£t
 +
SECTOR_SIZE
;

210 
curBlock
 = 
ö°™˚
->
Át
[curBlock];

214 
	`Muãx_U∆ock
(&
pÁtFûe
->
lock
);

219 
fûe
->
fûePos
 +
numByãs
;

220 
pÁtFûe
->
cuºBlock
 = 
curBlock
;

222 
	`KASSERT
(
cuºOff£t
 =
numByãs
);

223 
	`Debug
("Read satisfied!\n");

225  
numByãs
;

226 
	}
}

231 
	$PFAT_Wrôe
(
Fûe
 *
fûe
, *
±r
, 
ul⁄g_t
 
numByãs
) {

232 *
buf
 = (*)
±r
;

233 
PFAT_Fûe
 *
pÁtFûe
 = (PFAT_Fûê*)
fûe
->
fsD©a
;

234 
PFAT_In°™˚
 *
ö°™˚
 =

235 (
PFAT_In°™˚
 *)
fûe
->
mou¡Poöt
->
fsD©a
;

236 
ul⁄g_t
 
°¨t
 = 
fûe
->
fûePos
;

237 
ul⁄g_t
 
íd
 = 
fûe
->
fûePos
 + 
numByãs
;

239 i‡(
pÁtFûe
->
íåy
->
dúe˘‹y
)

240  
EINVALID
;

242 i‡(!(
fûe
->
mode
 & 
O_WRITE
)) {

243  
EINVALID
;

246 i‡(
numByãs
 % 
SECTOR_SIZE
) {

248  
EINVALID
;

251 i‡(
fûe
->
fûePos
 % 
SECTOR_SIZE
) {

253  
EINVALID
;

256 
	`KASSERT
(
fûe
->
fûePos
 <fûe->
ídPos
);

258 i‡(
fûe
->
fûePos
 + 
numByãs
 > fûe->
ídPos
) {

259 
numByãs
 = 
fûe
->
ídPos
 - fûe->
fûePos
;

265 
ul⁄g_t
 
°¨tBlock
 = 
°¨t
 / 
SECTOR_SIZE
;

266 
ul⁄g_t
 
ídBlock
 = 
	`Round_Up_To_Block
(
íd
Ë/ 
SECTOR_SIZE
;

269 
°¨tOff£t
 = 
°¨t
 - (
°¨tBlock
 * 
SECTOR_SIZE
);

275 
	`KASSERT
(
pÁtFûe
->
íåy
);

276 
ul⁄g_t
 
curBlock
 = 
pÁtFûe
->
íåy
->
fú°Block
;

277 
ul⁄g_t
 
cuºOff£t
 = 0;

278 
ul⁄g_t
 
i
;

279 
i
 = 0; i < 
ídBlock
; ++i) {

281 i‡(
curBlock
 =
FAT_ENTRY_FREE
 || curBlock =
FAT_ENTRY_EOF
) {

282 
	`Pröt
("U√x≥˘edÉnd o‡fûêö FATáàfûêblock %lu\n", 
i
);

283  
EIO
;

287 i‡(
i
 >
°¨tBlock
) {

288 
rc
 = 0;

291 
	`Muãx_Lock
(&
pÁtFûe
->
lock
);

293 
rc
 = 
	`Block_Wrôe
(
fûe
->
mou¡Poöt
->
dev
, 
curBlock
,

294 &
buf
[
cuºOff£t
]);

296 
cuºOff£t
 +
SECTOR_SIZE
;

299 
	`Muãx_U∆ock
(&
pÁtFûe
->
lock
);

301 i‡(
rc
 != 0)

302  
rc
;

306 
ul⁄g_t
 
√xtBlock
 = 
ö°™˚
->
Át
[
curBlock
];

307 
curBlock
 = 
√xtBlock
;

311 
fûe
->
fûePos
 +
numByãs
;

312 
pÁtFûe
->
cuºBlock
 = 
curBlock
;

314  
numByãs
;

315 
	}
}

320 
	$PFAT_Sìk
(
Fûe
 *
fûe
, 
ul⁄g_t
 
pos
) {

321 
PFAT_Fûe
 *
pÁtFûe
 = (PFAT_Fûê*)
fûe
->
fsD©a
;

322 
PFAT_In°™˚
 *
ö°™˚
 =

323 (
PFAT_In°™˚
 *)
fûe
->
mou¡Poöt
->
fsD©a
;

325 i‡(
pos
 >
fûe
->
ídPos
)

326  
EINVALID
;

327 i‡(
fûe
->
fûePos
 !
pos
) {

329 
fûe
->
fûePos
 = 
pos
;

330 
	`KASSERT
(
pÁtFûe
->
íåy
);

331 
ul⁄g_t
 
curBlock
 = 
pÁtFûe
->
íåy
->
fú°Block
;

332 
uöt_t
 
i
;

333 
i
 = 0; i < 
pos
; i += 512) {

334 
curBlock
 = 
ö°™˚
->
Át
[curBlock];

336 
pÁtFûe
->
cuºBlock
 = 
curBlock
;

339 
	}
}

344 
PFAT_Clo£
(
Fûe
 *
fûe
 
__©åibuã__
 ((
unu£d
))) {

356 
Fûe_Ops
 
	gs_pÁtFûeOps
 = {

357 &
PFAT_FSèt
,

358 &
PFAT_Ród
,

359 &
PFAT_Wrôe
,

360 &
PFAT_Sìk
,

361 &
PFAT_Clo£
,

365 
	$PFAT_FSèt_Dú
(
Fûe
 *
dú
, 
VFS_Fûe_Sèt
 *
°©
) {

367 
PFAT_In°™˚
 *
ö°™˚
 =

368 (
PFAT_In°™˚
 *)
dú
->
mou¡Poöt
->
fsD©a
;

369 
	`C›y_Sèt
(
°©
, &
ö°™˚
->
roŸDúE¡ry
);

371 
	}
}

376 
PFAT_Clo£_Dú
(
Fûe
 *
dú
 
__©åibuã__
 ((
unu£d
))) {

384 
	$PFAT_Ród_E¡ry
(
Fûe
 *
dú
, 
VFS_Dú_E¡ry
 *
íåy
) {

385 
dúe˘‹yE¡ry
 *
dúe˘‹y
;

386 
dúe˘‹yE¡ry
 *
pÁtDúE¡ry
;

387 
PFAT_In°™˚
 *
ö°™˚
 =

388 (
PFAT_In°™˚
 *)
dú
->
mou¡Poöt
->
fsD©a
;

390 i‡(
dú
->
fûePos
 >dú->
ídPos
)

391  
VFS_NO_MORE_DIR_ENTRIES
;

393 
dúe˘‹y
 = (
dúe˘‹yE¡ry
 *Ë
dú
->
fsD©a
;

394 
pÁtDúE¡ry
 = &
dúe˘‹y
[
dú
->
fûePos
++];

401 
	`°∫˝y
(
íåy
->
«me
, 
pÁtDúE¡ry
->
fûeName
,

402 (
pÁtDúE¡ry
->
fûeName
));

403 
íåy
->
«me
[(
pÁtDúE¡ry
->
fûeName
)] = '\0';

405 
	`C›y_Sèt
(&
íåy
->
°©s
, 
pÁtDúE¡ry
);

408 
	}
}

413 
Fûe_Ops
 
	gs_pÁtDúOps
 = {

414 &
PFAT_FSèt_Dú
,

418 &
PFAT_Clo£_Dú
,

419 &
PFAT_Ród_E¡ry
,

425 
dúe˘‹yE¡ry
 *
	$PFAT_Lookup
(
Mou¡_Poöt
 *
mou¡Poöt
,

426 
PFAT_In°™˚
 *
ö°™˚
,

427 c⁄° *
∑th
) {

428 
dúe˘‹yE¡ry
 *
roŸDú
 = 
ö°™˚
->rootDir;

429 
boŸSe˘‹
 *
fsöfo
 = &
ö°™˚
->fsinfo;

430 
i
;

432 
	`KASSERT
(*
∑th
 == '/');

435 i‡(
	`°rcmp
(
∑th
, "/") == 0)

436  &
ö°™˚
->
roŸDúE¡ry
;

439 ++
∑th
;

441 
dúe˘‹yE¡ry
 *
cuºDú
 = 
roŸDú
;

442 
dúSize
 = 
fsöfo
->
roŸDúe˘‹yCou¡
;

443 
∑th
) {

444 *
ª°
 = 
	`°rchr
(
∑th
, '/');

445 i‡(
ª°
) {

446 *
ª°
 = '\0';

447 
ª°
++;

449 
found
 = 0;

450 
i
 = 0; i < 
dúSize
; ++i) {

451 
dúe˘‹yE¡ry
 *
íåy
 = &
cuºDú
[
i
];

452 i‡(
	`°rcmp
(
íåy
->
fûeName
, 
∑th
) == 0) {

454 
found
 = 1;

455 i‡(!
ª°
) {

456 
	`Debug
("Found m©chög dúÉ¡ry f‹ %s\n", 
∑th
);

457  
íåy
;

460 
cuºDú
 = 
	`MÆloc
(512);

462 
dúSize
 = 
íåy
->
fûeSize
 / (
dúe˘‹yE¡ry
);

463 
	`Block_Ród
(
mou¡Poöt
->
dev
, 
íåy
->
fú°Block
, 
cuºDú
);

464 
∑th
 = 
ª°
;

469 i‡(!
found
)

475 
	}
}

481 
PFAT_Fûe
 *
	$Gë_PFAT_Fûe
(
PFAT_In°™˚
 *
ö°™˚
,

482 
dúe˘‹yE¡ry
 * 
íåy
) {

483 
ul⁄g_t
 
numBlocks
;

484 
PFAT_Fûe
 *
pÁtFûe
 = 0;

485 *
fûeD©aCache
 = 0;

487 
	`KASSERT
(
íåy
 != 0);

488 
	`KASSERT
(
ö°™˚
 != 0);

490 
	`Muãx_Lock
(&
ö°™˚
->
lock
);

496 
pÁtFûe
 = 
	`Gë_Fr⁄t_Of_PFAT_Fûe_Li°
(&
ö°™˚
->
fûeLi°
);

497 
pÁtFûe
 !0;ÖÁtFûê
	`Gë_Next_In_PFAT_Fûe_Li°
(pfatFile)) {

498 i‡(
pÁtFûe
->
íåy
 ==Éntry)

502 i‡(
pÁtFûe
 == 0) {

504 
numBlocks
 = 
	`Round_Up_To_Block
(
íåy
->
fûeSize
Ë/ 
SECTOR_SIZE
;

510 i‡((
pÁtFûe
 = (
PFAT_Fûe
 *)
	`MÆloc
((*pfatFile))) == 0 ||

511 (
fûeD©aCache
 = 
	`MÆloc
(
SECTOR_SIZE
)) == 0) {

512 
memÁû
;

516 
pÁtFûe
->
íåy
 =Éntry;

517 
pÁtFûe
->
numBlocks
 =ÇumBlocks;

518 
pÁtFûe
->
fûeD©aCache
 = fileDataCache;

519 
	`Muãx_Inô
(&
pÁtFûe
->
lock
);

522 
	`Add_To_Back_Of_PFAT_Fûe_Li°
(&
ö°™˚
->
fûeLi°
, 
pÁtFûe
);

523 
	`KASSERT
(
pÁtFûe
->
√xtPFAT_Fûe_Li°
 == 0);

527 
d⁄e
;

529 
memÁû
:

530 i‡(
pÁtFûe
 != 0)

531 
	`Fªe
(
pÁtFûe
);

532 i‡(
fûeD©aCache
 != 0)

533 
	`Fªe
(
fûeD©aCache
);

534 
pÁtFûe
 = 
NULL
;

536 
d⁄e
:

537 
	`Muãx_U∆ock
(&
ö°™˚
->
lock
);

538  
pÁtFûe
;

539 
	}
}

541 
GëUid
();

547 
	$PFAT_O≥n
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

548 
mode
, 
Fûe
 **
pFûe
) {

549 
rc
 = 0;

550 
PFAT_In°™˚
 *
ö°™˚
 =

551 (
PFAT_In°™˚
 *)
mou¡Poöt
->
fsD©a
;

552 
dúe˘‹yE¡ry
 *
íåy
;

553 
PFAT_Fûe
 *
pÁtFûe
 = 0;

554 
Fûe
 *
fûe
 = 0;

557 i‡((
mode
 & 
O_CREATE
) != 0)

558  
EACCESS
;

561 
íåy
 = 
	`PFAT_Lookup
(
mou¡Poöt
, 
ö°™˚
, 
∑th
);

562 i‡(
íåy
 == 0)

563  
ENOTFOUND
;

567 
pÁtFûe
 = 
	`Gë_PFAT_Fûe
(
ö°™˚
, 
íåy
);

568 i‡(
pÁtFûe
 == 0) {

569 *
pFûe
 = 
NULL
;

570 
rc
 = 
ENOMEM
;

571 
d⁄e
;

574 
pÁtFûe
->
cuºBlock
 =ÖÁtFûe->
íåy
->
fú°Block
;

577 
fûe
 =

578 
	`AŒoˇã_Fûe
(&
s_pÁtFûeOps
, 0, 
íåy
->
fûeSize
, 
pÁtFûe
, 
mode
, 0);

579 i‡(
fûe
 == 0) {

580 
rc
 = 
ENOMEM
;

581 
d⁄e
;

585 *
pFûe
 = 
fûe
;

587 
d⁄e
:

588  
rc
;

589 
	}
}

594 
	$PFAT_O≥n_Dúe˘‹y
(
Mou¡_Poöt
 *
mou¡Poöt
,

595 c⁄° *
∑th
, 
Fûe
 **
pDú
) {

601 
PFAT_In°™˚
 *
ö°™˚
 =

602 (
PFAT_In°™˚
 *)
mou¡Poöt
->
fsD©a
;

603 
Fûe
 *
dú
;

605 i‡(
	`°rcmp
(
∑th
, "/") == 0) {

606 
dú
 = (
Fûe
 *)
	`MÆloc
((*dir));

607 i‡(
dú
 == 0)

608  
ENOMEM
;

610 
dú
->
›s
 = &
s_pÁtDúOps
;

611 
dú
->
fûePos
 = 0;

612 
dú
->
ídPos
 = 
ö°™˚
->
fsöfo
.
roŸDúe˘‹yCou¡
;

613 
dú
->
fsD©a
 = (*)
ö°™˚
->
roŸDú
;

614 *
pDú
 = 
dú
;

617 
dúe˘‹yE¡ry
 *
íåy
;

618 
íåy
 = 
	`PFAT_Lookup
(
mou¡Poöt
, 
ö°™˚
, 
∑th
);

619 i‡(!
íåy
) {

620  
ENOTFOUND
;

622 i‡(!
íåy
->
dúe˘‹y
) {

623  
ENOTFOUND
;

626 
dú
 = (
Fûe
 *)
	`MÆloc
((*dir));

627 i‡(
dú
 == 0)

628  
ENOMEM
;

630 
dú
->
›s
 = &
s_pÁtDúOps
;

631 
dú
->
fûePos
 = 0;

634 
dúe˘‹yE¡ry
 *
ôems
 = (dúe˘‹yE¡ry *Ë
	`MÆloc
(
íåy
->
fûeSize
);

635 i‡(
	`Block_Ród
(
mou¡Poöt
->
dev
, 
íåy
->
fú°Block
, 
ôems
) < 0) {

636 
	`Pröt
("blockÑódáà%d se˘‹ faûed\n", 
íåy
->
fú°Block
);

637  
ENOMEM
;

639 
dú
->
fsD©a
 = (*)
ôems
;

640 
i
;

641 
i
 = 0; i < 
íåy
->
fûeSize
 / (
dúe˘‹yE¡ry
); i++) {

642 i‡(
ôems
[
i
].
fûeName
[0] == '\0')

645 
dú
->
ídPos
 = 
i
;

646 *
pDú
 = 
dú
;

649 
	}
}

654 
	$PFAT_Sèt
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

655 
VFS_Fûe_Sèt
 *
°©
) {

656 
PFAT_In°™˚
 *
ö°™˚
 =

657 (
PFAT_In°™˚
 *)
mou¡Poöt
->
fsD©a
;

658 
dúe˘‹yE¡ry
 *
íåy
;

660 
	`KASSERT
(
∑th
 != 0);

661 
	`KASSERT
(
°©
 != 0);

663 
	`Debug
("PFAT_Sèt(%s)\n", 
∑th
);

665 
íåy
 = 
	`PFAT_Lookup
(
mou¡Poöt
, 
ö°™˚
, 
∑th
);

666 i‡(
íåy
 == 0)

667  
ENOTFOUND
;

669 
	`C›y_Sèt
(
°©
, 
íåy
);

672 
	}
}

677 
PFAT_Sync
(
Mou¡_Poöt
 *
mou¡Poöt
 
__©åibuã__
 ((
unu£d
))) {

682 
	$PFAT_SëSëUid
(
Mou¡_Poöt
 *
mp
, c⁄° *
fûe
,

683 
£tuid
) {

684 
	`TODO_P
(
PROJECT_USER
, "pfat file system SetSetUID operation");

685  
EUNSUPPORTED
;

686 
	}
}

688 
	$PFAT_SëA˛
(
Mou¡_Poöt
 *
mp
, c⁄° *
fûe
, 
uid
,

689 
≥rmissi⁄s
) {

690 
	`TODO_P
(
PROJECT_USER
, "pfat file system SetAcl operation");

691  
EUNSUPPORTED
;

692 
	}
}

697 
Mou¡_Poöt_Ops
 
	gs_pÁtMou¡PoötOps
 = {

698 
PFAT_O≥n
,

700 
PFAT_O≥n_Dúe˘‹y
,

701 
PFAT_Sèt
,

702 
PFAT_Sync
,

707 
PFAT_SëSëUid
,

708 
PFAT_SëA˛
,

717 
	$PFAT_Regi°î_Pagög_Fûe
(
Mou¡_Poöt
 *
mou¡Poöt
,

718 
PFAT_In°™˚
 *
ö°™˚
) {

719 
dúe˘‹yE¡ry
 *
∑gefûeE¡ry
;

720 
Pagög_Devi˚
 *
∑gedev
 = 0;

721 
size_t
 
«meLí
;

722 *
fûeName
 = 0;

724 i‡(
	`Gë_Pagög_Devi˚
() != 0)

727 
∑gefûeE¡ry
 = 
	`PFAT_Lookup
(
mou¡Poöt
, 
ö°™˚
, 
PAGEFILE_FILENAME
);

728 i‡(
∑gefûeE¡ry
 == 0)

734 
∑gedev
 = (
Pagög_Devi˚
 *)
	`MÆloc
((*pagedev));

735 i‡(
∑gedev
 == 0)

736 
memÁû
;

737 
«meLí
 = 
	`°æí
(
mou¡Poöt
->
∑thPªfix
Ë+ såÀn(
PAGEFILE_FILENAME
) + 3;

738 
fûeName
 = (*)
	`MÆloc
(
«meLí
);

739 i‡(
fûeName
 == 0)

740 
memÁû
;

743 
	`¢¥ötf
(
fûeName
, 
«meLí
, "/%s%s", 
mou¡Poöt
->
∑thPªfix
,

744 
PAGEFILE_FILENAME
);

747 
∑gedev
->
fûeName
 = fileName;

748 
∑gedev
->
dev
 = 
mou¡Poöt
->dev;

749 
∑gedev
->
°¨tSe˘‹
 = 
∑gefûeE¡ry
->
fú°Block
;

750 
∑gedev
->
numSe˘‹s
 = 
∑gefûeE¡ry
->
fûeSize
 / 
SECTOR_SIZE
;

753 
	`Regi°î_Pagög_Devi˚
(
∑gedev
);

756 
memÁû
:

757 
	`Pröt
(" Error: couldÇot createÖaging device forÖfat on %s (%s)\n",

758 
mou¡Poöt
->
∑thPªfix
, mou¡Poöt->
dev
->
«me
);

759 i‡(
∑gedev
 != 0)

760 
	`Fªe
(
∑gedev
);

761 i‡(
fûeName
 != 0)

762 
	`Fªe
(
fûeName
);

763 
	}
}

768 
	$PFAT_Mou¡
(
Mou¡_Poöt
 *
mou¡Poöt
) {

769 
PFAT_In°™˚
 *
ö°™˚
 = 0;

770 
boŸSe˘‹
 *
fsöfo
;

771 *
boŸSe˘
 = 0;

772 
roŸDúSize
;

773 
rc
;

774 
i
;

777 
ö°™˚
 = (
PFAT_In°™˚
 *)
	`MÆloc
((*instance));

778 i‡(
ö°™˚
 == 0)

779 
memÁû
;

780 
	`mem£t
(
ö°™˚
, '\0', (*instance));

781 
fsöfo
 = &
ö°™˚
->fsinfo;

782 
	`Debug
("Created instance object\n");

788 
boŸSe˘
 = 
	`MÆloc
(
SECTOR_SIZE
);

789 i‡(
boŸSe˘
 == 0)

790 
memÁû
;

793 i‡((
rc
 = 
	`Block_Ród
(
mou¡Poöt
->
dev
, 0, 
boŸSe˘
)) < 0)

794 
Áû
;

795 
	`Debug
("Read boot sector\n");

798 
	`mem˝y
(&
ö°™˚
->
fsöfo
, ((*)
boŸSe˘
Ë+ 
PFAT_BOOT_RECORD_OFFSET
,

799 (
boŸSe˘‹
));

800 
	`Debug
("Copied bootÑecord\n");

803 i‡(
fsöfo
->
magic
 !
PFAT_MAGIC
) {

804 
	`Pröt
("Bad magi¯numbî (%xËf‹ PFAT fûesy°em\n", 
fsöfo
->
magic
);

805 
övÆidfs
;

807 
	`Debug
("MagicÇumber is good!\n");

810 i‡(
fsöfo
->
fûeAŒoˇti⁄Off£t
 <= 0 ||

811 
fsöfo
->
fûeAŒoˇti⁄Lígth
 <= 0 ||

812 
fsöfo
->
roŸDúe˘‹yCou¡
 < 0 || fsöfo->
roŸDúe˘‹yOff£t
 <= 0) {

813 
	`Pröt
("InvalidÖarameters for PFAT filesystem\n");

814 
övÆidfs
;

816 
	`Debug
("PFAT filesystemÖarametersáppearÅo be good!\n");

819 
ö°™˚
->
Át
 = (*)
	`MÆloc
(
fsöfo
->
fûeAŒoˇti⁄Lígth
 * 
SECTOR_SIZE
);

820 i‡(
ö°™˚
->
Át
 == 0)

821 
memÁû
;

824 
i
 = 0; i < 
fsöfo
->
fûeAŒoˇti⁄Lígth
; ++i) {

825 
blockNum
 = 
fsöfo
->
fûeAŒoˇti⁄Off£t
 + 
i
;

826 *
p
 = ((*)
ö°™˚
->
Át
Ë+ (
i
 * 
SECTOR_SIZE
);

827 i‡((
rc
 = 
	`Block_Ród
(
mou¡Poöt
->
dev
, 
blockNum
, 
p
)) < 0)

828 
Áû
;

830 
	`Debug
("Read FAT successfully!\n");

832 i‡(
fsöfo
->
roŸDúe˘‹yCou¡
 > 0) {

834 
roŸDúSize
 =

835 
	`Round_Up_To_Block
((
dúe˘‹yE¡ry
) *

836 
fsöfo
->
roŸDúe˘‹yCou¡
);

837 
ö°™˚
->
roŸDú
 = (
dúe˘‹yE¡ry
 *Ë
	`MÆloc
(
roŸDúSize
);

840 
	`Debug
("RoŸ dúe˘‹y sizê%d\n", 
roŸDúSize
);

841 
i
 = 0; i < 
roŸDúSize
; i +
SECTOR_SIZE
) {

842 
blockNum
 = 
fsöfo
->
roŸDúe˘‹yOff£t
 + 
i
 / 
SECTOR_SIZE
;

843 i‡((
rc
 =

844 
	`Block_Ród
(
mou¡Poöt
->
dev
, 
blockNum
,

845 (*)(()
ö°™˚
->
roŸDú
 + 
i
))) < 0)

846 
Áû
;

848 
	`Debug
("ReadÑoot directory successfully!\n");

850 
	`Pröt
("Warning: missingÑoot directory in PFAT");

851 
ö°™˚
->
roŸDú
 = 
NULL
;

855 
	`mem£t
(&
ö°™˚
->
roŸDúE¡ry
, '\0', (
dúe˘‹yE¡ry
));

856 
ö°™˚
->
roŸDúE¡ry
.
ªadO∆y
 = 1;

857 
ö°™˚
->
roŸDúE¡ry
.
dúe˘‹y
 = 1;

858 
ö°™˚
->
roŸDúE¡ry
.
fûeSize
 =

859 
ö°™˚
->
fsöfo
.
roŸDúe˘‹yCou¡
 * (
dúe˘‹yE¡ry
);

862 
	`Muãx_Inô
(&
ö°™˚
->
lock
);

863 
	`CÀ¨_PFAT_Fûe_Li°
(&
ö°™˚
->
fûeLi°
);

866 
	`PFAT_Regi°î_Pagög_Fûe
(
mou¡Poöt
, 
ö°™˚
);

873 
mou¡Poöt
->
›s
 = &
s_pÁtMou¡PoötOps
;

874 
mou¡Poöt
->
fsD©a
 = 
ö°™˚
;

877 
memÁû
:

878 
rc
 = 
ENOMEM
;

879 
Áû
;

880 
övÆidfs
:

881 
rc
 = 
EINVALIDFS
;

882 
Áû
;

883 
Áû
:

884 i‡(
ö°™˚
 != 0) {

885 i‡(
ö°™˚
->
Át
 != 0)

886 
	`Fªe
(
ö°™˚
->
Át
);

887 i‡(
ö°™˚
->
roŸDú
 != 0)

888 
	`Fªe
(
ö°™˚
->
roŸDú
);

889 
	`Fªe
(
ö°™˚
);

891 i‡(
boŸSe˘
 != 0)

892 
	`Fªe
(
boŸSe˘
);

893  
rc
;

894 
	}
}

896 
Fûesy°em_Ops
 
	gs_pÁtFûesy°emOps
 = {

898 &
PFAT_Mou¡
,

905 
	$Inô_PFAT
() {

906 
	`Regi°î_Fûesy°em
("pÁt", &
s_pÁtFûesy°emOps
);

907 
	}
}

	@src/geekos/pipe.c

13 
	~<gìkos/pùe.h
>

14 
	~<gìkos/mÆloc.h
>

15 
	~<gìkos/°rög.h
>

16 
	~<gìkos/î∫o.h
>

17 
	~<gìkos/¥oje˘s.h
>

18 
	~<gìkos/öt.h
>

21 
Fûe_Ops
 
	gPùe_Ród_Ops
 =

22 { 
NULL
, 
Pùe_Ród
, NULL, NULL, 
Pùe_Clo£
, NULL };

23 
Fûe_Ops
 
	gPùe_Wrôe_Ops
 =

24 { 
NULL
, NULL, 
Pùe_Wrôe
, NULL, 
Pùe_Clo£
, NULL };

26 
	$Pùe_Cª©e
(
Fûe
 **
ªad_fûe
, Fûê**
wrôe_fûe
) {

27 
	`TODO_P
(
PROJECT_PIPE
, "CreateáÖipe");

28 
	}
}

30 
	$Pùe_Ród
(
Fûe
 *
f
, *
buf
, 
ul⁄g_t
 
numByãs
) {

31 
	`TODO_P
(
PROJECT_PIPE
, "PipeÑead");

32 
	}
}

34 
	$Pùe_Wrôe
(
Fûe
 *
f
, *
buf
, 
ul⁄g_t
 
numByãs
) {

35 
	`TODO_P
(
PROJECT_PIPE
, "Pipe write");

36 
	}
}

38 
	$Pùe_Clo£
(
Fûe
 *
f
) {

39 
	`TODO_P
(
PROJECT_PIPE
, "Pipe close");

41 
	}
}

	@src/geekos/screen.c

10 
	~<°d¨g.h
>

11 
	~<gìkos/kas£π.h
>

12 
	~<gìkos/kty≥s.h
>

13 
	~<gìkos/io.h
>

14 
	~<gìkos/öt.h
>

15 
	~<gìkos/fmtout.h
>

16 
	~<gìkos/s¸ìn.h
>

17 
	~<gìkos/lock.h
>

29 
	#ESC
 ((Ë0x1B)

	)

30 
	#DEFAULT_ATTRIBUTE
 
	`ATTRIB
(
BLACK
, 
GRAY
)

	)

32 
	eSèã
 {

33 
	mS_NORMAL
,

34 
	mS_ESC
,

35 
	mS_ESC2
,

36 
	mS_ARG
,

37 
	mS_CMD
,

40 
	#MAXARGS
 8

	)

42 
	sC⁄sﬁe_Sèã
 {

44 
	mrow
, 
	mcﬁ
;

45 
	mßveRow
, 
	mßveCﬁ
;

46 
uch¨_t
 
	mcuºítAâr
;

49 
Sèã
 
	m°©e
;

50 
	m¨gLi°
[
MAXARGS
];

51 
	mnumArgs
;

54 
C⁄sﬁe_Sèã
 
	gs_c⁄s
;

56 
	#NUM_SCREEN_DWORDS
 ((
NUMROWS
 * 
NUMCOLS
 * 2Ë/ 4)

	)

57 
	#NUM_SCROLL_DWORDS
 (((
NUMROWS
-1Ë* 
NUMCOLS
 * 2Ë/ 4)

	)

58 
	#NUM_DWORDS_PER_LINE
 ((
NUMCOLS
*2)/4)

	)

59 
	#FILL_DWORD
 (0x00200020 | (
s_c⁄s
.
cuºítAâr
<<24Ë| (s_c⁄s.cuºítAâr<<8))

	)

65 
	$S¸ﬁl
() {

66 
uöt_t
 *
v
;

67 
i
, 
n
 = 
NUM_SCROLL_DWORDS
;

68 
uöt_t
 
fûl
 = 
FILL_DWORD
;

71 
v
 = (
uöt_t
 *Ë
VIDMEM
, 
i
 = 0; i < 
n
; ++i) {

72 *
v
 = *(v + 
NUM_DWORDS_PER_LINE
);

73 ++
v
;

77 
v
 = (
uöt_t
 *Ë
VIDMEM
 + 
n
, 
i
 = 0; i < 
NUM_DWORDS_PER_LINE
; ++i)

78 *
v
++ = 
fûl
;

79 
	}
}

85 
	$CÀ¨_To_EOL
() {

86 
n
 = (
NUMCOLS
 - 
s_c⁄s
.
cﬁ
);

87 
uch¨_t
 *
v
 = 
VIDMEM
 + 
s_c⁄s
.
row
 * (
NUMCOLS
 * 2Ë+ s_c⁄s.
cﬁ
 * 2;

88 
n
-- > 0) {

89 *
v
++ = ' ';

90 *
v
++ = 
s_c⁄s
.
cuºítAâr
;

92 
	}
}

98 
	$Newlöe
() {

99 ++
s_c⁄s
.
row
;

100 
s_c⁄s
.
cﬁ
 = 0;

101 i‡(
s_c⁄s
.
row
 =
NUMROWS
) {

102 
	`S¸ﬁl
();

103 
s_c⁄s
.
row
 = 
NUMROWS
 - 1;

105 
	}
}

112 
	$Put_Gøphic_Ch¨
(
c
) {

113 
uch¨_t
 *
v
 = 
VIDMEM
 + 
s_c⁄s
.
row
 * (
NUMCOLS
 * 2Ë+ s_c⁄s.
cﬁ
 * 2;

116 *
v
++ = (
uch¨_t
Ë
c
;

117 *
v
 = 
s_c⁄s
.
cuºítAâr
;

119 i‡(
s_c⁄s
.
cﬁ
 < 
NUMCOLS
 - 1)

120 ++
s_c⁄s
.
cﬁ
;

122 
	`Newlöe
();

123 
	}
}

130 
	$Ouçut_LôîÆ_Ch¨a˘î
(
c
) {

131 
numS∑˚s
;

133 
c
) {

135 
	`CÀ¨_To_EOL
();

136 
	`Newlöe
();

140 
numS∑˚s
 = 
TABWIDTH
 - (
s_c⁄s
.
cﬁ
 % TABWIDTH);

141 
numS∑˚s
-- > 0)

142 
	`Put_Gøphic_Ch¨
(' ');

146 
	`Put_Gøphic_Ch¨
(
c
);

150 #i‚de‡
NDEBUG


157 
	`Out_Byã
(0xE9, 
c
);

159 
	}
}

164 
	$Move_Curs‹
(
row
, 
cﬁ
) {

165 i‡(
row
 < 0)

166 
row
 = 0;

167 i‡(
row
 >
NUMROWS
)

168 
row
 = 
NUMROWS
 - 1;

170 i‡(
cﬁ
 < 0)

171 
cﬁ
 = 0;

172 i‡(
cﬁ
 >
NUMCOLS
)

173 
cﬁ
 = 
NUMCOLS
 - 1;

175 
s_c⁄s
.
row
 =Ñow;

176 
s_c⁄s
.
cﬁ
 = col;

177 
	}
}

182 c⁄° 
uch¨_t
 
	gs_™siToVgaCﬁ‹
[] = {

183 
BLACK
, 
RED
, 
GREEN
, 
AMBER
, 
BLUE
, 
MAGENTA
, 
CYAN
, 
GRAY


190 
	$Upd©e_Aâribuãs
() {

191 
i
;

192 
©å
 = 
s_c⁄s
.
cuºítAâr
 & ~(
BRIGHT
);

194 
i
 = 0; i < 
s_c⁄s
.
numArgs
; ++i) {

195 
vÆue
 = 
s_c⁄s
.
¨gLi°
[
i
];

196 i‡(
vÆue
 == 0)

197 
©å
 = 
DEFAULT_ATTRIBUTE
;

198 i‡(
vÆue
 == 1)

199 
©å
 |
BRIGHT
;

200 i‡(
vÆue
 >= 30 && value <= 37)

201 
©å
 = (©å & ~0x7Ë| 
s_™siToVgaCﬁ‹
[
vÆue
 - 30];

202 i‡(
vÆue
 >= 40 && value <= 47)

203 
©å
 = (©å & ~(0x7 << 4)Ë| (
s_™siToVgaCﬁ‹
[
vÆue
 - 40] << 4);

205 
s_c⁄s
.
cuºítAâr
 = 
©å
;

206 
	}
}

209 
	$Re£t
() {

210 
s_c⁄s
.
°©e
 = 
S_NORMAL
;

211 
s_c⁄s
.
numArgs
 = 0;

212 
	}
}

215 
	$Sèπ_Esˇ≥
() {

216 
s_c⁄s
.
°©e
 = 
S_ESC
;

217 
s_c⁄s
.
numArgs
 = 0;

218 
	}
}

221 
	$Sèπ_Arg
(
¨gNum
) {

222 
	`KASSERT
(
s_c⁄s
.
numArgs
 =
¨gNum
);

223 
s_c⁄s
.
numArgs
++;

224 
s_c⁄s
.
°©e
 = 
S_ARG
;

225 i‡(
¨gNum
 < 
MAXARGS
)

226 
s_c⁄s
.
¨gLi°
[
¨gNum
] = 0;

227 
	}
}

230 
	$Save_Curs‹
() {

231 
s_c⁄s
.
ßveRow
 = s_c⁄s.
row
;

232 
s_c⁄s
.
ßveCﬁ
 = s_c⁄s.
cﬁ
;

233 
	}
}

236 
	$Re°‹e_Curs‹
() {

237 
s_c⁄s
.
row
 = s_c⁄s.
ßveRow
;

238 
s_c⁄s
.
cﬁ
 = s_c⁄s.
ßveCﬁ
;

239 
	}
}

242 
	$Add_Digô
(
c
) {

243 
	`KASSERT
(
	`ISDIGIT
(
c
));

244 i‡(
s_c⁄s
.
numArgs
 < 
MAXARGS
) {

245 
¨gNum
 = 
s_c⁄s
.
numArgs
 - 1;

246 
s_c⁄s
.
¨gLi°
[
¨gNum
] *= 10;

247 
s_c⁄s
.
¨gLi°
[
¨gNum
] +(
c
 - '0');

249 
	}
}

255 
	$Gë_Arg
(
¨gNum
) {

256  
¨gNum
 < 
s_c⁄s
.
numArgs
 ? s_c⁄s.
¨gLi°
[argNum] : 0;

257 
	}
}

265 
	$Put_Ch¨_Imp
(
c
) {

266 
agaö
:

267 
s_c⁄s
.
°©e
) {

268 
S_NORMAL
:

269 i‡(
c
 =
ESC
)

270 
	`Sèπ_Esˇ≥
();

272 
	`Ouçut_LôîÆ_Ch¨a˘î
(
c
);

275 
S_ESC
:

276 i‡(
c
 == '[')

277 
s_c⁄s
.
°©e
 = 
S_ESC2
;

279 
	`Re£t
();

282 
S_ESC2
:

283 i‡(
	`ISDIGIT
(
c
)) {

284 
	`Sèπ_Arg
(0);

285 
agaö
;

286 } i‡(
c
 == ';') {

288 
	`Sèπ_Arg
(0);

289 
	`Add_Digô
('1');

290 
	`Sèπ_Arg
(1);

292 
s_c⁄s
.
°©e
 = 
S_CMD
;

293 
agaö
;

297 
S_ARG
:

298 i‡(
	`ISDIGIT
(
c
))

299 
	`Add_Digô
(
c
);

300 i‡(
c
 == ';')

301 
	`Sèπ_Arg
(
s_c⁄s
.
numArgs
);

303 
s_c⁄s
.
°©e
 = 
S_CMD
;

304 
agaö
;

308 
S_CMD
:

309 
c
) {

311 
	`CÀ¨_To_EOL
();

314 
	`Save_Curs‹
();

317 
	`Re°‹e_Curs‹
();

320 
	`Move_Curs‹
(
s_c⁄s
.
row
 - 
	`Gë_Arg
(0), s_c⁄s.
cﬁ
);

323 
	`Move_Curs‹
(
s_c⁄s
.
row
 + 
	`Gë_Arg
(0), s_c⁄s.
cﬁ
);

326 
	`Move_Curs‹
(
s_c⁄s
.
row
, s_c⁄s.
cﬁ
 + 
	`Gë_Arg
(0));

329 
	`Move_Curs‹
(
s_c⁄s
.
row
, s_c⁄s.
cﬁ
 - 
	`Gë_Arg
(0));

332 
	`Upd©e_Aâribuãs
();

336 i‡(
s_c⁄s
.
numArgs
 == 2)

337 
	`Move_Curs‹
(
	`Gë_Arg
(0) - 1, Get_Arg(1) - 1);

340 i‡(
s_c⁄s
.
numArgs
 =1 && 
	`Gë_Arg
(0) == 2) {

341 
	`CÀ¨_S¸ìn
();

342 
	`Put_Curs‹
(0, 0);

348 
	`Re£t
();

352 
	`KASSERT
(
Ál£
);

354 
	}
}

359 
	$Upd©e_Curs‹
() {

364 
uöt_t
 
ch¨a˘îPos
 = (
s_c⁄s
.
row
 * 
NUMCOLS
Ë+ s_c⁄s.
cﬁ
;

365 
uch¨_t
 
‹igAddr
;

372 
‹igAddr
 = 
	`In_Byã
(
CRT_ADDR_REG
);

373 
	`IO_Dñay
();

376 
	`Out_Byã
(
CRT_ADDR_REG
, 
CRT_CURSOR_LOC_HIGH_REG
);

377 
	`IO_Dñay
();

378 
	`Out_Byã
(
CRT_DATA_REG
, (
ch¨a˘îPos
 >> 8) & 0xff);

379 
	`IO_Dñay
();

382 
	`Out_Byã
(
CRT_ADDR_REG
, 
CRT_CURSOR_LOC_LOW_REG
);

383 
	`IO_Dñay
();

384 
	`Out_Byã
(
CRT_DATA_REG
, 
ch¨a˘îPos
 & 0xff);

385 
	`IO_Dñay
();

388 
	`Out_Byã
(
CRT_ADDR_REG
, 
‹igAddr
);

389 
	}
}

398 
	$Inô_S¸ìn
() {

399 
boﬁ
 
iÊag
 = 
	`Begö_I¡_Atomic
();

401 
s_c⁄s
.
row
 = s_c⁄s.
cﬁ
 = 0;

402 
s_c⁄s
.
cuºítAâr
 = 
DEFAULT_ATTRIBUTE
;

403 
	`CÀ¨_S¸ìn
();

405 
	`End_I¡_Atomic
(
iÊag
);

406 
	}
}

411 
	$CÀ¨_S¸ìn
() {

412 
uöt_t
 *
v
 = (uöt_à*Ë
VIDMEM
;

413 
i
;

414 
uöt_t
 
fûl
 = 
FILL_DWORD
;

416 
boﬁ
 
iÊag
 = 
	`Begö_I¡_Atomic
();

418 
i
 = 0; i < 
NUM_SCREEN_DWORDS
; ++i)

419 *
v
++ = 
fûl
;

421 
	`End_I¡_Atomic
(
iÊag
);

422 
	}
}

427 
	$Gë_Curs‹
(*
row
, *
cﬁ
) {

428 
boﬁ
 
iÊag
 = 
	`Begö_I¡_Atomic
();

429 *
row
 = 
s_c⁄s
.row;

430 *
cﬁ
 = 
s_c⁄s
.col;

431 
	`End_I¡_Atomic
(
iÊag
);

432 
	}
}

439 
boﬁ
 
	$Put_Curs‹
(
row
, 
cﬁ
) {

440 
boﬁ
 
iÊag
;

442 i‡(
row
 < 0 ||Ñow >
NUMROWS
 || 
cﬁ
 < 0 || cﬁ >
NUMCOLS
)

443  
Ál£
;

445 
iÊag
 = 
	`Begö_I¡_Atomic
();

446 
s_c⁄s
.
row
 =Ñow;

447 
s_c⁄s
.
cﬁ
 = col;

448 
	`Upd©e_Curs‹
();

449 
	`End_I¡_Atomic
(
iÊag
);

451  
åue
;

452 
	}
}

457 
uch¨_t
 
	$Gë_Cuºít_Aâr
() {

458  
s_c⁄s
.
cuºítAâr
;

459 
	}
}

464 
	$Së_Cuºít_Aâr
(
uch¨_t
 
©åib
) {

465 
boﬁ
 
iÊag
 = 
	`Begö_I¡_Atomic
();

466 
s_c⁄s
.
cuºítAâr
 = 
©åib
;

467 
	`End_I¡_Atomic
(
iÊag
);

468 
	}
}

474 
	$Put_Ch¨
(
c
) {

475 
boﬁ
 
iÊag
 = 
	`Begö_I¡_Atomic
();

476 
	`Put_Ch¨_Imp
(
c
);

477 
	`Upd©e_Curs‹
();

478 
	`End_I¡_Atomic
(
iÊag
);

479 
	}
}

485 
	$Put_Såög
(c⁄° *
s
) {

486 
boﬁ
 
iÊag
 = 
	`Begö_I¡_Atomic
();

487 *
s
 != '\0')

488 
	`Put_Ch¨_Imp
(*
s
++);

489 
	`Upd©e_Curs‹
();

490 
	`End_I¡_Atomic
(
iÊag
);

491 
	}
}

497 
	$Put_Buf
(c⁄° *
buf
, 
ul⁄g_t
 
Àngth
) {

498 
boﬁ
 
iÊag
 = 
	`Begö_I¡_Atomic
();

499 
Àngth
 > 0) {

500 
	`Put_Ch¨_Imp
(*
buf
++);

501 --
Àngth
;

503 
	`Upd©e_Curs‹
();

504 
	`End_I¡_Atomic
(
iÊag
);

505 
	}
}

508 
Pröt_Emô
(
Ouçut_Sök
 *
o
 
__©åibuã__
 ((
unu£d
)), 
ch
) {

509 
Put_Ch¨_Imp
(
ch
);

511 
Pröt_Föish
(
Ouçut_Sök
 *
o
 
__©åibuã__
 ((
unu£d
))) {

512 
Upd©e_Curs‹
();

514 
Ouçut_Sök
 
	gs_ouçutSök
 = { &
Pröt_Emô
, &
Pröt_Föish
 };

516 
Spö_Lock_t
 
	g¥ötLock
;

522 
	$Pröt
(c⁄° *
fmt
, ...) {

523 
va_li°
 
¨gs
;

527 
	`va_°¨t
(
¨gs
, 
fmt
);

528 
	`F‹m©_Ouçut
(&
s_ouçutSök
, 
fmt
, 
¨gs
);

529 
	`va_íd
(
¨gs
);

532 
	}
}

	@src/geekos/segment.c

20 
	~<gìkos/kas£π.h
>

21 
	~<gìkos/°rög.h
>

22 
	~<gìkos/tss.h
>

23 
	~<gìkos/£gmít.h
>

25 
__ölöe__
 
	$Së_Size_And_Ba£_Pages
(
Segmít_Des¸ùt‹


26 *
desc
, 
ul⁄g_t
 
ba£Addr
,

27 
ul⁄g_t
 
numPages
) {

35 
	`KASSERT
(
numPages
 > 0);

36 
numPages
 -= 1;

38 
desc
->
sizeLow
 = 
numPages
 & 0xFFFF;

39 
desc
->
sizeHigh
 = (
numPages
 >> 16) & 0x0F;

40 
desc
->
ba£Low
 = 
ba£Addr
 & 0xFFFFFF;

41 
desc
->
ba£High
 = (
ba£Addr
 >> 24) & 0xFF;

42 
desc
->
gønuœrôy
 = 1;

43 
	}
}

45 
__ölöe__
 
	$Së_Size_And_Ba£_Byãs
(
Segmít_Des¸ùt‹


46 *
desc
, 
ul⁄g_t
 
ba£Addr
,

47 
ul⁄g_t
 
numByãs
) {

48 
desc
->
sizeLow
 = 
numByãs
 & 0xFFFF;

49 
desc
->
sizeHigh
 = (
numByãs
 >> 16) & 0x0F;

50 
desc
->
ba£Low
 = 
ba£Addr
 & 0xFFFFFF;

51 
desc
->
ba£High
 = (
ba£Addr
 >> 24) & 0xFF;

52 
desc
->
gønuœrôy
 = 0;

53 
	}
}

58 
	$Inô_NuŒ_Segmít_Des¸ùt‹
(
Segmít_Des¸ùt‹
 *
desc
) {

59 
	`mem£t
(
desc
, '\0', (*desc));

60 
	}
}

65 
	$Inô_Code_Segmít_Des¸ùt‹
(
Segmít_Des¸ùt‹
 *
desc
,

66 
ul⁄g_t
 
ba£Addr
,

67 
ul⁄g_t
 
numPages
, 
¥ivûegeLevñ
) {

68 
	`KASSERT
(
¥ivûegeLevñ
 >= 0 &&ÖrivilegeLevel <= 3);

70 
	`Së_Size_And_Ba£_Pages
(
desc
, 
ba£Addr
, 
numPages
);

71 
desc
->
ty≥
 = 0x0A;

72 
desc
->
sy°em
 = 1;

73 
desc
->
d∂
 = 
¥ivûegeLevñ
;

74 
desc
->
¥e£¡
 = 1;

75 
desc
->
ª£rved
 = 0;

76 
desc
->
dbBô
 = 1;

77 
	}
}

82 
	$Inô_D©a_Segmít_Des¸ùt‹
(
Segmít_Des¸ùt‹
 *
desc
,

83 
ul⁄g_t
 
ba£Addr
,

84 
ul⁄g_t
 
numPages
, 
¥ivûegeLevñ
) {

85 
	`KASSERT
(
¥ivûegeLevñ
 >= 0 &&ÖrivilegeLevel <= 3);

87 
	`Së_Size_And_Ba£_Pages
(
desc
, 
ba£Addr
, 
numPages
);

88 
desc
->
ty≥
 = 0x02;

89 
desc
->
sy°em
 = 1;

90 
desc
->
d∂
 = 
¥ivûegeLevñ
;

91 
desc
->
¥e£¡
 = 1;

92 
desc
->
ª£rved
 = 0;

93 
desc
->
dbBô
 = 1;

94 
	}
}

99 
	$Inô_TSS_Des¸ùt‹
(
Segmít_Des¸ùt‹
 *
desc
, 
TSS
 *
theTSS
) {

100 
	`Së_Size_And_Ba£_Byãs
(
desc
, (
ul⁄g_t
Ë
theTSS
, (
TSS
));

101 
desc
->
ty≥
 = 0x09;

102 
desc
->
sy°em
 = 0;

103 
desc
->
d∂
 = 0;

104 
desc
->
¥e£¡
 = 1;

105 
desc
->
ª£rved
 = 0;

106 
desc
->
dbBô
 = 0;

107 
	}
}

112 
	$Inô_LDT_Des¸ùt‹
(
Segmít_Des¸ùt‹
 *
desc
,

113 
Segmít_Des¸ùt‹
 
theLDT
[], 
numE¡rõs
) {

114 
	`Së_Size_And_Ba£_Byãs
(
desc
, (
ul⁄g_t
Ë
theLDT
,

115 (
Segmít_Des¸ùt‹
Ë* 
numE¡rõs
);

117 
desc
->
ty≥
 = 0x02;

118 
desc
->
sy°em
 = 0;

119 
desc
->
d∂
 = 0;

120 
desc
->
¥e£¡
 = 1;

121 
desc
->
ª£rved
 = 0;

122 
desc
->
dbBô
 = 0;

123 
	}
}

	@src/geekos/sem.c

13 
	~<gìkos/sysˇŒ.h
>

14 
	~<gìkos/î∫o.h
>

15 
	~<gìkos/kthªad.h
>

16 
	~<gìkos/öt.h
>

17 
	~<gìkos/ñf.h
>

18 
	~<gìkos/mÆloc.h
>

19 
	~<gìkos/s¸ìn.h
>

20 
	~<gìkos/keybﬂrd.h
>

21 
	~<gìkos/°rög.h
>

22 
	~<gìkos/u£r.h
>

23 
	~<gìkos/timî.h
>

24 
	~<gìkos/vfs.h
>

25 
	~<gìkos/sig«l.h
>

26 
	~<gìkos/£m.h
>

27 
	~<gìkos/¥oje˘s.h
>

38 
	$Sys_O≥n_Sem≠h‹e
(
I¡îru±_Sèã
 *
°©e
) {

39 
	`KASSERT
(
°©e
);

40 
	`TODO_P
(
PROJECT_SEMAPHORES
, "Open_Semaphore system call");

41  
EUNSUPPORTED
;

42 
	}
}

53 
	$Sys_P
(
I¡îru±_Sèã
 *
°©e
) {

54 
	`KASSERT
(
°©e
);

55 
	`TODO_P
(
PROJECT_SEMAPHORES
, "P (semaphoreácquire) system call");

56  
EUNSUPPORTED
;

57 
	}
}

66 
	$Sys_V
(
I¡îru±_Sèã
 *
°©e
) {

67 
	`KASSERT
(
°©e
);

68 
	`TODO_P
(
PROJECT_SEMAPHORES
, "V (semaphoreÑelease) system call");

69  
EUNSUPPORTED
;

70 
	}
}

79 
	$Sys_Clo£_Sem≠h‹e
(
I¡îru±_Sèã
 *
°©e
) {

80 
	`KASSERT
(
°©e
);

81 
	`TODO_P
(
PROJECT_SEMAPHORES
, "Close_Semaphore system call");

82  
EUNSUPPORTED
;

83 
	}
}

	@src/geekos/signal.c

24 
	~<gìkos/kas£π.h
>

25 
	~<gìkos/defs.h
>

26 
	~<gìkos/s¸ìn.h
>

27 
	~<gìkos/öt.h
>

28 
	~<gìkos/mem.h
>

29 
	~<gìkos/symbﬁ.h
>

30 
	~<gìkos/°rög.h
>

31 
	~<gìkos/kthªad.h
>

32 
	~<gìkos/mÆloc.h
>

33 
	~<gìkos/u£r.h
>

34 
	~<gìkos/sig«l.h
>

35 
	~<gìkos/¥oje˘s.h
>

36 
	~<gìkos/Æ¨m.h
>

40 
	$Com∂ëe_H™dÀr
(
Kî√l_Thªad
 *
kthªad
,

41 
I¡îru±_Sèã
 *
°©e
) {

42 
	`KASSERT
(
kthªad
);

43 
	`KASSERT
(
°©e
);

44 
	`TODO_P
(
PROJECT_SIGNALS
,

46 
	}
}

48 
	$Check_Pídög_Sig«l
(
Kî√l_Thªad
 *
kthªad
,

49 
I¡îru±_Sèã
 *
°©e
) {

50 
	`KASSERT
(
kthªad
);

51 
	`KASSERT
(
°©e
);

54 
	`TODO_P
(
PROJECT_SIGNALS
,

56 
	}
}

59 
	$Pröt_IS
(
I¡îru±_Sèã
 *
e•
) {

60 **
p
;

61 
	`Pröt
("e•=%x:\n", ()
e•
);

62 
	`Pröt
(" gs=%x\n", ()
e•
->
gs
);

63 
	`Pröt
(" fs=%x\n", ()
e•
->
fs
);

64 
	`Pröt
("És=%x\n", ()
e•
->
es
);

65 
	`Pröt
(" ds=%x\n", ()
e•
->
ds
);

66 
	`Pröt
("Ébp=%x\n", ()
e•
->
ebp
);

67 
	`Pröt
("Édi=%x\n", ()
e•
->
edi
);

68 
	`Pröt
("Ési=%x\n", ()
e•
->
esi
);

69 
	`Pröt
("Édx=%x\n", ()
e•
->
edx
);

70 
	`Pröt
("Écx=%x\n", ()
e•
->
ecx
);

71 
	`Pröt
("Ébx=%x\n", ()
e•
->
ebx
);

72 
	`Pröt
("Éax=%x\n", ()
e•
->
óx
);

73 
	`Pröt
(" i¡Num=%x\n", ()
e•
->
ötNum
);

74 
	`Pröt
("Éº‹Code=%x\n", ()
e•
->
îr‹Code
);

75 
	`Pröt
("Éù=%x\n", ()
e•
->
eù
);

76 
	`Pröt
(" cs=%x\n", ()
e•
->
cs
);

77 
	`Pröt
("ÉÊags=%x\n", ()
e•
->
eÊags
);

78 
p
 = (**)(((
I¡îru±_Sèã
 *)
e•
) + 1);

79 
	`Pröt
("e•+n=%x\n", ()
p
);

80 
	`Pröt
("e•+n[0]=%x\n", ()
p
[0]);

81 
	`Pröt
("e•+n[1]=%x\n", ()
p
[1]);

82 
	}
}

84 
	$dump_°ack
(*
e•
, 
ofs
) {

85 
i
;

86 
	`Pröt
("Setup_Frame: Stack dump\n");

87 
i
 = 0; i < 25; i++) {

88 
	`Pröt
("[%x]: %x\n", ()&
e•
[
i
] - 
ofs
,Ésp[i]);

90 
	}
}

93 
	$Sëup_Føme
(
Kî√l_Thªad
 *
kthªad
, 
I¡îru±_Sèã
 *
°©e
) {

94 
i
;

95 
	`KASSERT
(
kthªad
);

96 
	`KASSERT
(
°©e
);

98 
	`TODO_P
(
PROJECT_SIGNALS
, "Setup_Frame");

99 
	}
}

	@src/geekos/smp.c

13 
	~<gìkos/°rög.h
>

14 
	~<gìkos/s¸ìn.h
>

15 
	~<gìkos/kas£π.h
>

16 
	~<gìkos/≠ic.h
>

17 
	~<gìkos/smp.h
>

18 
	~<gìkos/li°.h
>

19 
	~<gìkos/öt.h
>

20 
	~<gìkos/idt.h
>

21 
	~<gìkos/mÆloc.h
>

22 
	~<gìkos/kthªad.h
>

23 
	~<gìkos/io.h
>

24 
	~<gìkos/timî.h
>

25 
	~<gìkos/tss.h
>

26 
	~<gìkos/å≠.h
>

27 
	~<gìkos/mem.h
>

28 
	~<gìkos/gdt.h
>

39 
	e˝uid_ªque°s
 {

40 
	mCPUID_GETVENDORSTRING
,

41 
	mCPUID_GETFEATURES
,

42 
	mCPUID_GETTLB
,

43 
	mCPUID_GETSERIAL
,

45 
	mCPUID_INTELEXTENDED
 = 0x80000000,

46 
	mCPUID_INTELFEATURES
,

47 
	mCPUID_INTELBRANDSTRING
,

48 
	mCPUID_INTELBRANDSTRINGMORE
,

49 
	mCPUID_INTELBRANDSTRINGEND
,

57 
ölöe
 
	$˝uid
(
code
, *
a
, *
d
) {

58 
asm
 vﬁ©ûê("˝uid":"˜" (*
a
), "=d"(*
d
):"a"(
code
):"ecx", "ebx");

59 
	}
}

62 *
	gAPIC_Addr
 = (*)0xFEE00000;

65 vﬁ©ûê*
	gIO_APIC_Addr
 =

73 
	sMP_C⁄fig_TabÀ
 {

74 
	msig«tuª
[4];

75 
	mÀngth
;

76 
	mªv
;

77 
	mchecksum
;

78 
	mOEM_Low
;

79 
	mOEM_High
;

80 
	m¥odu˘_ID
[12];

81 *
	mOEM_TabÀ_På
;

82 
	mOEM_TabÀ_Size
;

83 
	míåy_Cou¡
;

84 *
	mloˇl_APIC_Addr
;

85 
	mexãnded_TabÀ_Lígth
;

86 
	mexãnded_TabÀ_Checksum
;

87 } 
	tMP_C⁄fig_TabÀ
;

89 
	sMP_Flﬂtög_TabÀ
 {

90 
	msig«tuª
[4];

91 
MP_C⁄fig_TabÀ
 *
	mMP_C⁄fig_PTR
;

92 
	mÀngth
;

93 
	mvîsi⁄
;

94 
	mchecksum
;

95 
	mMP_Fótuªs1
;

96 
	mMP_Fótuªs2
;

97 
	mMP_Re£rved1
;

98 
	mMP_Re£rved2
;

99 
	mMP_Re£rved3
;

100 } 
	tMP_Flﬂtög_TabÀ
;

102 
	emp_èbÀ_ty≥s
 {

103 
	mMP_CONFIG_ENTRY_PROCESSOR
 = 0,

104 
	mMP_CONFIG_ENTRY_BUS
,

105 
	mMP_CONFIG_ENTRY_IO_APIC
,

106 
	mMP_CONFIG_ENTRY_IO_INTERRUPT_ASSIGNMENT
,

107 
	mMP_CONFIG_ENTRY_LOCAL_INTERRUPT_ASSIGNMENT


110 
	sMP_Pro˚ss‹
 {

111 
	mty≥
;

112 
	mAPIC_Id
;

113 
	mAPIC_Vîsi⁄
;

114 
	mCPU_E«bÀd
:1;

115 
	mIs_BoŸ°øp_CPU
:1;

116 
	mCPU_Sig«tuª
;

117 
	mCPU_Fœgs
;

118 
	mª£rved1
;

119 
	mª£rved2
;

120 } 
	tMP_Pro˚ss‹
;

122 
	sMP_IO_APIC
 {

123 
	mty≥
;

124 
	mAPIC_Id
;

125 
	mAPIC_Vîsi⁄
;

126 
	míabÀd
:1;

127 *
	maddªss
;

128 } 
	tMP_IO_APIC
;

130 
	sMP_IO_I¡îru±
 {

131 
	míåy_Ty≥
;

132 
	möãºu±_Ty≥
;

133 
	mÊag_PO
:1;

134 
	mÊag_EL
:1;

135 
	mª£rved
:14;

136 
	mbus_ID
;

137 
	m§c_Bus_IRQ
;

138 
	mde°IO_APIC
;

139 
	mde°IO_APIC_IRQ
;

140 } 
	tMP_IO_I¡îru±
;

142 
	gCPU_Cou¡
;

143 
MP_Pro˚ss‹
 *
	gPro˚ss‹
;

146 
	$MP_Checksum
(*
°¨t
, 
Àngth
) {

147 
i
;

148 
tŸÆ
;

150 
tŸÆ
 = 0;

151 
i
 = 0; i < 
Àngth
; i++)

152 
tŸÆ
 +
°¨t
[
i
];

154  
tŸÆ
 & 0xff;

155 
	}
}

157 
MP_Flﬂtög_TabÀ
 *
	$Sˇn_F‹_Flﬂtög_TabÀ
(*
°¨t
, *
íd
) {

158 *
cuº
;

159 
MP_Flﬂtög_TabÀ
 *
åy
;

160 
cuº
 = 
°¨t
; cuº < 
íd
; curr++) {

161 
åy
 = (
MP_Flﬂtög_TabÀ
 *Ë
cuº
;

162 i‡(!
	`°∫cmp
(
åy
->
sig«tuª
, "_MP_", 4) &&

163 !
	`MP_Checksum
((*)
cuº
, (
MP_Flﬂtög_TabÀ
))) {

164  
åy
;

168 
	}
}

170 
	$Gë_MP_TabÀs
() {

172 
MP_C⁄fig_TabÀ
 *
˘
;

173 
MP_Flﬂtög_TabÀ
 *
·
;

176 
·
 = 
	`Sˇn_F‹_Flﬂtög_TabÀ
((*)0xEBDA, (*)0xEBDA + 1024);

177 i‡(!
·
) {

179 
·
 = 
	`Sˇn_F‹_Flﬂtög_TabÀ
((*)(639 * 1024),

182 i‡(!
·
) {

184 
·
 = 
	`Sˇn_F‹_Flﬂtög_TabÀ
((*)0xF0000, (*)0x100000);

187 i‡(!
·
 || !·->
MP_C⁄fig_PTR
) {

192 
˘
 = 
·
->
MP_C⁄fig_PTR
;

193 i‡(
	`°∫cmp
(
˘
->
sig«tuª
, "PCMP", 4) ||

194 
	`MP_Checksum
((*)
˘
 + ct->
Àngth
,

195 
˘
->
exãnded_TabÀ_Lígth
)) {

197 
	`Pröt
("MP Configuration TableÇot valid\n");

201 *
cuº
 = ((*)
˘
Ë+ (
MP_C⁄fig_TabÀ
);

202 
MP_Pro˚ss‹
 *
¥oc
;

203 
MP_IO_APIC
 *
ioAPIC
;

204 
MP_IO_I¡îru±
 *
ötAss
;

205 
i
;

206 
i
 = 0; i < 
˘
->
íåy_Cou¡
; i++) {

207 *
cuº
) {

208 
MP_CONFIG_ENTRY_PROCESSOR
:

209 
¥oc
 = (
MP_Pro˚ss‹
 *Ë
cuº
;

210 
	`Pröt
("found CPU#%d wôh APIC id #%d\n", 
CPU_Cou¡
,

211 
¥oc
->
APIC_Id
);

213 i‡(!
CPU_Cou¡
)

214 
Pro˚ss‹
 = 
¥oc
;

215 
CPU_Cou¡
++;

216 
cuº
 +(
MP_Pro˚ss‹
);

219 
MP_CONFIG_ENTRY_IO_APIC
:

220 
ioAPIC
 = (
MP_IO_APIC
 *Ë
cuº
;

221 
	`Pröt
("found IO APIC ID=%dáà%x\n", 
ioAPIC
->
APIC_Id
,

222 ()
ioAPIC
->
addªss
);

223 
IO_APIC_Addr
 = 
ioAPIC
->
addªss
;

224 
cuº
 +(
MP_IO_APIC
);

227 
MP_CONFIG_ENTRY_LOCAL_INTERRUPT_ASSIGNMENT
:

228 
MP_CONFIG_ENTRY_IO_INTERRUPT_ASSIGNMENT
:

229 
ötAss
 = (
MP_IO_I¡îru±
 *Ë
cuº
;

230 
cuº
 += 8;

233 
MP_CONFIG_ENTRY_BUS
:

235 
cuº
 += 8;

239 
	`Pröt
("Uknow¿íåyÅy≥ %d\n", *
cuº
);

243 
	}
}

245 
ölöe
 
	$APIC_Ród
(
ªg
) {

246 
ªt
;

248 
	`__asm
("pushfl");

249 
	`__asm
("cli");

250 
ªt
 = *((vﬁ©ûê*)(
APIC_Addr
 + 
ªg
));

251 
	`__asm
("popfl");

253  
ªt
;

254 
	}
}

256 
ölöe
 
	$APIC_Wrôe
(
ªg
, 
vÆue
) {

257 
	`__asm
("pushfl");

258 
	`__asm
("cli");

259 *((vﬁ©ûê*)(
APIC_Addr
 + 
ªg
)Ë
vÆue
;

260 
	`__asm
("popfl");

262 
	}
}

264 
ölöe
 
	$IOAPIC_Wrôe
(c⁄° 
off£t
, c⁄° 
vÆ
) {

265 
	`__asm
("pushfl");

266 
	`__asm
("cli");

268 *
IO_APIC_Addr
 = 
off£t
;

270 *(*)(
IO_APIC_Addr
 + 0x10 / 4Ë
vÆ
;

271 
	`__asm
("popfl");

272 
	}
}

274 
ölöe
 
	$IOAPIC_Ród
(c⁄° 
off£t
) {

275 
ªt
;

277 
	`__asm
("pushfl");

278 
	`__asm
("cli");

279 *(*)
IO_APIC_Addr
 = 
off£t
;

280 
ªt
 = *(*)(
IO_APIC_Addr
 + 0x10 / 4);

281 
	`__asm
("popfl");

283  (
ªt
);

284 
	}
}

290 
	$£nd_IPI
(
APIC_Id
, 
mask
) {

291 
åy
;

292 
°©us
 = 1;

294 
	`APIC_Wrôe
(
APIC_ICR
 + 0x10, (
APIC_Id
 << 24));

295 
	`APIC_Wrôe
(
APIC_ICR
, 
mask
);

297 
åy
 = 0;Åry < 100;Åry++) {

298 
	`Mi¸o_Dñay
(100);

299 
°©us
 = 
	`APIC_Ród
(
APIC_ICR
Ë& 
APIC_ICR_STATUS_PEND
;

300 i‡(!
°©us
)

304 
	`Pröt
("Send IPIÅimeout\n");

306 
	}
}

308 
	$£nd_INIT
(
APIC_Id
) {

310 
	`£nd_IPI
(
APIC_Id
,

311 
APIC_ICR_TM_LEVEL
 | 
APIC_ICR_LEVELASSERT
 | 
APIC_ICR_DM_INIT
);

313 
	`Mi¸o_Dñay
(10000);

316 
	`£nd_IPI
(
APIC_Id
, 
APIC_ICR_TM_LEVEL
 | 
APIC_ICR_DM_INIT
);

318 
	`Mi¸o_Dñay
(10000);

319 
	}
}

321 
	$Spurious_I¡îru±_H™dÀr
(
I¡îru±_Sèã
 *
°©e
) {

322 
CPUid
 = 
	`Gë_CPU_ID
();

323 
CPUs
[
CPUid
].
•uriousCou¡
++;

324 
	}
}

330 
	$Inô_Loˇl_APIC
(
˝u
) {

331 
≠icid
;

332 
˝ubus‰eq
;

333 
tmp
;

334 
qu™tum
 = 10;

335 
≠icInôülCou¡
 = 0;

337 
	`Timî_I¡îru±_H™dÀr
();

338 
	`In°Æl_I¡îru±_H™dÀr
(39, 
Spurious_I¡îru±_H™dÀr
);

340 
	`In°Æl_I¡îru±_H™dÀr
(32, 
Timî_I¡îru±_H™dÀr
);

343 
	`APIC_Wrôe
(
APIC_DFR
, 0xFFFFFFFF);

344 
	`APIC_Wrôe
(
APIC_LDR
, (
	`APIC_Ród
(APIC_LDR) & 0x00FFFFFF) | 1);

345 
	`APIC_Wrôe
(
APIC_LVTT
, 
APIC_DISABLE
);

346 
	`APIC_Wrôe
(
APIC_LVTPC
, 
APIC_ICR_DM_NMI
);

347 
	`APIC_Wrôe
(
APIC_LVT0
, 
APIC_DISABLE
);

348 
	`APIC_Wrôe
(
APIC_LVT1
, 
APIC_DISABLE
);

349 
	`APIC_Wrôe
(
APIC_TPR
, 0);

352 
	`asm
("movl $0x1b, %ecx");

353 
	`asm
("rdmsr");

354 
	`asm
("orl $0x800, %eax");

355 
	`asm
("wrmsr");

358 
≠icid
 = 
	`APIC_Ród
(
APIC_SPIV
);

359 
	`APIC_Wrôe
(
APIC_SPIV
, 
≠icid
 | 
APIC_SPIV_ENABLE_APIC
);

360 
≠icid
 = 
	`GET_APIC_ID
(
	`APIC_Ród
(
APIC_ID
));

363 
	`APIC_Wrôe
(
APIC_SPIV
, 39 | 
APIC_SW_ENABLE
);

365 i‡(!
˝u
) {

367 
	`APIC_Wrôe
(
APIC_LVTT
, 32);

369 
	`APIC_Wrôe
(
APIC_TDCR
, 0x03);

371 
	`Out_Byã
(0x61, (
	`In_Byã
(0x61) & 0xFD) | 1);

372 
	`Out_Byã
(0x43, 0xB2);

374 
	`Out_Byã
(0x42, 0x9B);

375 
	`In_Byã
(0x60);

376 
	`Out_Byã
(0x42, 0x2E);

379 
tmp
 = 
	`In_Byã
(0x61) & 0xFE;

380 
	`Out_Byã
(0x61, ()
tmp
);

381 
	`Out_Byã
(0x61, ()
tmp
 | 1);

384 
	`APIC_Wrôe
(
APIC_TICR
, 0xFFFFFFFF - 1);

387 !(
	`In_Byã
(0x61) & 0x20));

390 
	`APIC_Wrôe
(
APIC_LVTT
, 
APIC_DISABLE
);

393 
	`Pröt
("≠i¯cou¡ed dow¿tÿ%x\n", 
	`APIC_Ród
(
APIC_TCCR
));

394 
˝ubus‰eq
 = (0xFFFFFFFF - (
	`APIC_Ród
(
APIC_TCCR
) + 1)) * 16 * 100;

395 
	`Pröt
("˝u fªq = %d\n", 
˝ubus‰eq
);

396 
≠icInôülCou¡
 = 
˝ubus‰eq
 / 
qu™tum
 / 16;

401 
	`APIC_Wrôe
(
APIC_TICR
, 
≠icInôülCou¡
 < 16 ? 16 :ápicInitialCount);

404 
	`APIC_Wrôe
(
APIC_LVTT
, 32 | 
TMR_PERIODIC
);

408 
	`APIC_Wrôe
(
APIC_TDCR
, 0x03);

410  
≠icid
;

411 
	}
}

414 
	$Gë_CPU_ID
() {

415 
≠icid
;

417 
≠icid
 = 
	`GET_APIC_ID
(
	`APIC_Ród
(
APIC_ID
));

419  
≠icid
;

420 
	}
}

422 
CPU_Info
 
	gCPUs
[
MAX_CPUS
];

430 
	#START_SECONDARY_FUNC
 ((0x9020<<4Ë+ 4096)

	)

432 *
	gSec⁄d¨y_Sèck
;

434 
	$Inô_SMP
() {

435 
i
;

436 
úq
;

437 
cou¡
;

438 
≠icid
;

440 
	`Pröt
("Initializing SMP...\n");

442 
	`Gë_MP_TabÀs
();

443 
≠icid
 = 
	`Gë_CPU_ID
();

445 
	`KASSERT0
(
≠icid
 == 0,

448 
i
 = 0; i < 
CPU_Cou¡
; i++) {

449 i‡(!
Pro˚ss‹
[
i
].
Is_BoŸ°øp_CPU
) {

452 *
±r
;

453 
±r
 = 
	`AŒoc_Page
();

454 
CPUs
[
i
].
°ack
 = 
±r
;

455 
	`£nd_INIT
(
Pro˚ss‹
[
i
].
APIC_Id
);

458 
CPUs
[
i
].
öôD⁄e
 = 1;

461 
	`Mi¸o_Dñay
(10000);

463 
i
 = 0; i < 
CPU_Cou¡
; i++) {

464 i‡(!
Pro˚ss‹
[
i
].
Is_BoŸ°øp_CPU
) {

465 
Sec⁄d¨y_Sèck
 = 
CPUs
[
i
].
°ack
;

466 
	`£nd_IPI
(
i
,

467 
APIC_ICR_DM_SIPI
 |

468 (((()
START_SECONDARY_FUNC
) >> 12) & 0xFF));

469 
	`Mi¸o_Dñay
(10000);

470 !
CPUs
[
i
].
öôD⁄e
)

471 
	`Mi¸o_Dñay
(10000);

474 
	}
}

480 
	$Sec⁄d¨y_Sèπ
(
°ack
) {

481 
i
;

482 
CPUid
;

483 
APICid
;

485 
CPUid
 = 
	`Gë_CPU_ID
();

488 
CPUs
[
CPUid
].
öôD⁄e
 = 1;

491 !
CPUs
[
CPUid
].
ru¬ög
) {

492 
	`Mi¸o_Dñay
(1000);

495 
	`Inô_GDT
(
CPUid
);

497 
	`Inô_TSS
();

499 
	`lockKî√l
();

500 
	`Inô_I¡îru±s
(
CPUid
);

502 
	`Inô_Sec⁄d¨y_VM
();

503 
	`Inô_Sec⁄d¨y_VM
();

505 
	`Inô_ScheduÀr
(
CPUid
, 
CPUs
[CPUid].
°ack
);

507 
	`Inô_Tøps
();

509 
APICid
 = 
	`Inô_Loˇl_APIC
(
CPUid
);

511 
	`Inô_Timî_I¡îru±
();

513 
	`Pröt
("Init done\n");

516 
CPUs
[
CPUid
].
ru¬ög
 = 2;

518 
	`KASSERT0
(
APICid
 =
	`Gë_CPU_ID
(), "Apic id doesn't match cpuid");

520 
	`Síd_Timî_INT
();

523 
	`Exô
(0);

524 
	}
}

526 
	$Rñó£_SMP
() {

527 
i
;

528 
úq
;

530 
i
 = 0; i < 
CPU_Cou¡
; i++) {

531 
CPUs
[
i
].
ru¬ög
 = 1;

532 i‡(
i
)

533 
CPUs
[
i
].
ru¬ög
 != 2);

535 
	}
}

538 
Spö_Lock_t
 
	gli°Lock
;

540 
Spö_Lock_t
 
	gkthªadLock
;

542 
	$Is_Locked
(
Spö_Lock_t
 * 
lock
) {

543  
lock
->lock;

544 
	}
}

546 
	$Spö_Lock_Inô
(
Spö_Lock_t
 * 
lock
) {

547 
	`KASSERT
(
lock
);

549 
lock
->lock = 0;

550 
lock
->
œ°Lockî
 = 
NULL
;

551 
lock
->
lockî
 = 
NULL
;

552 
	}
}

554 
	$Spö_Lock
(
Spö_Lock_t
 * 
lock
) {

555 
	`Spö_Lock_INTERNAL
(
Spö_Lock_t
 * 
lock
);

556 
	`KASSERT
(
lock
);

557 
	`Spö_Lock_INTERNAL
(
lock
);

558 
lock
->
lockî
 = 
CURRENT_THREAD
;

559 
	}
}

561 
	$Spö_U∆ock
(
Spö_Lock_t
 * 
lock
) {

562 
	`Spö_U∆ock_INTERNAL
(
Spö_Lock_t
 * 
lock
);

563 
	`KASSERT
(
lock
);

564 
	`KASSERT
(
lock
->lock);

566 
lock
->
œ°Lockî
 =Üock->
lockî
;

567 
lock
->
lockî
 = 
NULL
;

568 
	`Spö_U∆ock_INTERNAL
(
lock
);

569 
	}
}

573 
	$M≠_IO_APIC_IRQ
(
úq
, *
h™dÀr
) {

575 
	`IOAPIC_Wrôe
(0x10 + 2 * 
úq
, 0x00000000 | irq);

576 
	`IOAPIC_Wrôe
(0x10 + 2 * 
úq
 + 1, 0x00000000);

578 
	`In°Æl_I¡îru±_H™dÀr
(
úq
, 
h™dÀr
);

579 
	}
}

585 
Spö_Lock_t
 
	gglobÆLock
;

587 
	$lockKî√l
() {

588 
	`Spö_Lock
(&
globÆLock
);

589 
	}
}

591 
	$u∆ockKî√l
() {

592 
	`Spö_U∆ock
(&
globÆLock
);

593 
	}
}

	@src/geekos/sound/sound.c

2 
	~<gìkos/io.h
>

3 
	~<gìkos/öt.h
>

4 
	~<gìkos/úq.h
>

5 
	~<gìkos/dma.h
>

6 
	~<gìkos/mÆloc.h
>

7 
	~<gìkos/î∫o.h
>

8 
	~<gìkos/kas£π.h
>

9 
	~<gìkos/kthªad.h
>

10 
	~<gìkos/li°.h
>

11 
	~<gìkos/timî.h
>

12 
	~<gìkos/Æ¨m.h
>

13 
	~<gìkos/mem.h
>

15 
	~<gìkos/vfs.h
>

17 
	~<gìkos/¥oje˘s.h
>

19 
	~<gìkos/°rög.h
>

20 
	~<gìkos/sound.h
>

24 
	$SB16_Pœy_Fûe
(c⁄° *
fûíame
) {

25 
	`TODO_P
(
PROJECT_SOUND
, "PlayáÇamed file");

26 
	}
}

28 
	$Inô_Sound_Devi˚s
() {

29 
	`TODO_P
(
PROJECT_SOUND
, "Initialize sound card");

30 
	}
}

	@src/geekos/synch.c

18 
	~<gìkos/kthªad.h
>

19 
	~<gìkos/öt.h
>

20 
	~<gìkos/kas£π.h
>

21 
	~<gìkos/s¸ìn.h
>

22 
	~<gìkos/synch.h
>

43 
	$Muãx_Waô
(
Muãx
 *
muãx
) {

44 
	`KASSERT
(
muãx
->
°©e
 =
MUTEX_LOCKED
);

45 
	`KASSERT
(
g_¥ìm±i⁄DißbÀd
[
	`Gë_CPU_ID
()]);

47 
	`DißbÀ_I¡îru±s
();

48 
g_¥ìm±i⁄DißbÀd
[
	`Gë_CPU_ID
()] = 
Ál£
;

49 
	`Waô
(&
muãx
->
waôQueue
);

50 
g_¥ìm±i⁄DißbÀd
[
	`Gë_CPU_ID
()] = 
åue
;

51 
	`E«bÀ_I¡îru±s
();

52 
	}
}

58 
__ölöe__
 
	$Muãx_Lock_Imp
(
Muãx
 *
muãx
) {

59 
	`KASSERT
(
g_¥ìm±i⁄DißbÀd
[
	`Gë_CPU_ID
()]);

62 
	`KASSERT
(!
	`IS_HELD
(
muãx
));

65 
muãx
->
°©e
 =
MUTEX_LOCKED
) {

66 
	`Muãx_Waô
(
muãx
);

70 
muãx
->
°©e
 = 
MUTEX_LOCKED
;

71 
muãx
->
ow√r
 = 
CURRENT_THREAD
;

72 
	}
}

78 
__ölöe__
 
	$Muãx_U∆ock_Imp
(
Muãx
 *
muãx
) {

79 
	`KASSERT
(
g_¥ìm±i⁄DißbÀd
[
	`Gë_CPU_ID
()]);

82 
	`KASSERT
(
	`IS_HELD
(
muãx
));

85 
muãx
->
°©e
 = 
MUTEX_UNLOCKED
;

86 
muãx
->
ow√r
 = 0;

95 i‡(!
	`Is_Thªad_Queue_Em±y
(&
muãx
->
waôQueue
)) {

96 
	`DißbÀ_I¡îru±s
();

97 
	`Wake_Up_O√
(&
muãx
->
waôQueue
);

98 
	`E«bÀ_I¡îru±s
();

100 
	}
}

109 
	$Muãx_Inô
(
Muãx
 *
muãx
) {

110 
muãx
->
°©e
 = 
MUTEX_UNLOCKED
;

111 
muãx
->
ow√r
 = 0;

112 
	`CÀ¨_Thªad_Queue
(&
muãx
->
waôQueue
);

113 
	}
}

118 
	$Muãx_Lock
(
Muãx
 *
muãx
) {

119 
	`KASSERT
(
	`I¡îru±s_E«bÀd
());

121 
g_¥ìm±i⁄DißbÀd
[
	`Gë_CPU_ID
()] = 
åue
;

122 
	`Muãx_Lock_Imp
(
muãx
);

123 
g_¥ìm±i⁄DißbÀd
[
	`Gë_CPU_ID
()] = 
Ál£
;

124 
	}
}

129 
	$Muãx_U∆ock
(
Muãx
 *
muãx
) {

130 
	`KASSERT
(
	`I¡îru±s_E«bÀd
());

132 
g_¥ìm±i⁄DißbÀd
[
	`Gë_CPU_ID
()] = 
åue
;

133 
	`Muãx_U∆ock_Imp
(
muãx
);

134 
g_¥ìm±i⁄DißbÀd
[
	`Gë_CPU_ID
()] = 
Ál£
;

135 
	}
}

140 
	$C⁄d_Inô
(
C⁄dôi⁄
 *
c⁄d
) {

141 
	`CÀ¨_Thªad_Queue
(&
c⁄d
->
waôQueue
);

142 
	}
}

147 
	$C⁄d_Waô
(
C⁄dôi⁄
 *
c⁄d
, 
Muãx
 *
muãx
) {

148 
	`KASSERT
(
	`I¡îru±s_E«bÀd
());

151 
	`KASSERT
(
	`IS_HELD
(
muãx
));

154 
g_¥ìm±i⁄DißbÀd
[
	`Gë_CPU_ID
()] = 
åue
;

162 
	`Muãx_U∆ock_Imp
(
muãx
);

171 
	`DißbÀ_I¡îru±s
();

172 
g_¥ìm±i⁄DißbÀd
[
	`Gë_CPU_ID
()] = 
Ál£
;

173 
	`Waô
(&
c⁄d
->
waôQueue
);

174 
g_¥ìm±i⁄DißbÀd
[
	`Gë_CPU_ID
()] = 
åue
;

175 
	`E«bÀ_I¡îru±s
();

178 
	`Muãx_Lock_Imp
(
muãx
);

181 
g_¥ìm±i⁄DißbÀd
[
	`Gë_CPU_ID
()] = 
Ál£
;

182 
	}
}

188 
	$C⁄d_Sig«l
(
C⁄dôi⁄
 *
c⁄d
) {

189 
	`KASSERT
(
	`I¡îru±s_E«bÀd
());

190 
	`DißbÀ_I¡îru±s
();

191 
	`Wake_Up_O√
(&
c⁄d
->
waôQueue
);

192 
	`E«bÀ_I¡îru±s
();

193 
	}
}

199 
	$C⁄d_Brﬂdˇ°
(
C⁄dôi⁄
 *
c⁄d
) {

200 
	`KASSERT
(
	`I¡îru±s_E«bÀd
());

201 
	`DißbÀ_I¡îru±s
();

202 
	`Wake_Up
(&
c⁄d
->
waôQueue
);

203 
	`E«bÀ_I¡îru±s
();

204 
	}
}

	@src/geekos/syscall.c

16 
	~<gìkos/sysˇŒ.h
>

17 
	~<gìkos/î∫o.h
>

18 
	~<gìkos/kthªad.h
>

19 
	~<gìkos/öt.h
>

20 
	~<gìkos/ñf.h
>

21 
	~<gìkos/mÆloc.h
>

22 
	~<gìkos/s¸ìn.h
>

23 
	~<gìkos/keybﬂrd.h
>

24 
	~<gìkos/°rög.h
>

25 
	~<gìkos/u£r.h
>

26 
	~<gìkos/timî.h
>

27 
	~<gìkos/vfs.h
>

28 
	~<gìkos/sig«l.h
>

29 
	~<gìkos/£m.h
>

30 
	~<gìkos/¥oje˘s.h
>

32 
	~<gìkos/sys_√t.h
>

33 
	~<gìkos/pùe.h
>

34 
	~<gìkos/mem.h
>

36 
Spö_Lock_t
 
kthªadLock
;

45 
	$C›y_U£r_Såög
(
ul⁄g_t
 
uaddr
, ul⁄g_à
Àn
, ul⁄g_à
maxLí
,

46 **
pSå
) {

47 
rc
 = 0;

48 *
°r
;

51 i‡(
Àn
 > 
maxLí
)

52  
EINVALID
;

55 
°r
 = (*)
	`MÆloc
(
Àn
 + 1);

56 i‡(
°r
 == 0) {

57 
rc
 = 
ENOMEM
;

58 
d⁄e
;

62 i‡(!
	`C›y_From_U£r
(
°r
, 
uaddr
, 
Àn
)) {

63 
rc
 = 
EINVALID
;

64 
	`Fªe
(
°r
);

65 
d⁄e
;

67 
°r
[
Àn
] = '\0';

70 *
pSå
 = 
°r
;

72 
d⁄e
:

73  
rc
;

74 
	}
}

86 
Sys_NuŒ
(
I¡îru±_Sèã
 *
°©e
 
__©åibuã__
 ((
unu£d
))) {

98 
	$Sys_Exô
(
I¡îru±_Sèã
 *
°©e
) {

99 
	`Exô
(
°©e
->
ebx
);

101 
	}
}

108 
H¨dw¨e_Shutdown
();

109 
	$Sys_ShutDown
(
I¡îru±_Sèã
 *
°©e
) {

110 
	`Pröt
("------------------- THE END ------------------\n");

111 
	`H¨dw¨e_Shutdown
();

114 
	}
}

116 
Spö_Lock_t
 
	g•rötLock
;

126 
	$Sys_PrötSåög
(
I¡îru±_Sèã
 *
°©e
) {

127 
rc
 = 0;

128 
uöt_t
 
Àngth
 = 
°©e
->
ecx
;

129 *
buf
 = 0;

132 
	`Spö_Lock
(&
•rötLock
);

133 i‡(
Àngth
 > 0) {

135 i‡((
rc
 =

136 
	`C›y_U£r_Såög
(
°©e
->
ebx
, 
Àngth
, 1023, (**)&
buf
)) != 0)

137 
d⁄e
;

144 i‡(!
buf
[0]) {

145 
	`Dump_I¡îru±_Sèã
(
°©e
);

146 
	`KASSERT0
(
buf
[0],

151 
	`Put_Buf
(
buf
, 
Àngth
);

152 
	`Remove_Thªad
(&
s_runQueue
, 
CURRENT_THREAD
);

155 
d⁄e
:

156 i‡(
buf
 != 0)

157 
	`Fªe
(
buf
);

158 
	`Spö_U∆ock
(&
•rötLock
);

159  
rc
;

160 
	}
}

170 
	$Sys_GëKey
(
I¡îru±_Sèã
 *
°©e
) {

172  
	`Waô_F‹_Key
();

173 
	}
}

181 
	$Sys_SëAâr
(
I¡îru±_Sèã
 *
°©e
) {

182 
	`Së_Cuºít_Aâr
((
uch¨_t
Ë
°©e
->
ebx
);

184 
	}
}

193 
	$Sys_GëCurs‹
(
I¡îru±_Sèã
 *
°©e
) {

194 
row
, 
cﬁ
;

195 
	`Gë_Curs‹
(&
row
, &
cﬁ
);

196 i‡(!
	`C›y_To_U£r
(
°©e
->
ebx
, &
row
, ()) ||

197 !
	`C›y_To_U£r
(
°©e
->
ecx
, &
cﬁ
, ()))

200 
	}
}

209 
	$Sys_PutCurs‹
(
I¡îru±_Sèã
 *
°©e
) {

210  
	`Put_Curs‹
(
°©e
->
ebx
, sèã->
ecx
) ? 0 : -1;

211 
	}
}

223 
	$Sys_S∑wn
(
I¡îru±_Sèã
 *
°©e
) {

224 
rc
;

225 *
¥ogøm
 = 0;

226 *
comm™d
 = 0;

227 
Kî√l_Thªad
 *
¥o˚ss
;

230 i‡((
rc
 =

231 
	`C›y_U£r_Såög
(
°©e
->
ebx
, sèã->
ecx
, 
VFS_MAX_PATH_LEN
,

232 &
¥ogøm
)) != 0 ||

233 (
rc
 = 
	`C›y_U£r_Såög
(
°©e
->
edx
, sèã->
esi
, 1023, &
comm™d
)) != 0)

234 
d⁄e
;

236 
	`E«bÀ_I¡îru±s
();

243 
rc
 = 
	`S∑wn
(
¥ogøm
, 
comm™d
, &
¥o˚ss
, 
°©e
->
edi
);

245 i‡(
rc
 == 0) {

246 
	`KASSERT
(
¥o˚ss
 != 0);

247 
rc
 = 
¥o˚ss
->
pid
;

250 
	`DißbÀ_I¡îru±s
();

252 
d⁄e
:

253 i‡(
¥ogøm
 != 0)

254 
	`Fªe
(
¥ogøm
);

255 i‡(
comm™d
 != 0)

256 
	`Fªe
(
comm™d
);

258  
rc
;

259 
	}
}

268 
	$Sys_Waô
(
I¡îru±_Sèã
 *
°©e
) {

269 
exôCode
;

270 
Kî√l_Thªad
 *
kthªad
 = 
	`Lookup_Thªad
(
°©e
->
ebx
, 0);

271 i‡(
kthªad
 == 0) {

273  
EINVALID
;

276 i‡(
kthªad
->
dëached
) {

278  
EINVALID
;

280 
	`E«bÀ_I¡îru±s
();

281 
exôCode
 = 
	`Joö
(
kthªad
);

282 
	`DißbÀ_I¡îru±s
();

284  
exôCode
;

285 
	}
}

293 
	$Sys_GëPID
(
I¡îru±_Sèã
 *
°©e
) {

294  
CURRENT_THREAD
->
pid
;

295 
	}
}

298 
AŒ_Thªad_Li°
 
s_ÆlThªadLi°
;

299 
Thªad_Queue
 
s_runQueue
;

312 
	$Sys_PS
(
I¡îru±_Sèã
 *
°©e
) {

313 
	`TODO_P
(
PROJECT_BACKGROUND_JOBS
, "Sys_PS system call");

315 
	}
}

325 
	$Sys_Kûl
(
I¡îru±_Sèã
 *
°©e
) {

326 
	`TODO_P
(
PROJECT_SIGNALS
, "Sys_Kill system call");

328 
	}
}

337 
	$Sys_Sig«l
(
I¡îru±_Sèã
 *
°©e
) {

338 
	`TODO_P
(
PROJECT_SIGNALS
, "Sys_Signal system call");

340 
	}
}

353 
	$Sys_RegDñivî
(
I¡îru±_Sèã
 *
°©e
) {

355 
	`TODO_P
(
PROJECT_SIGNALS
, "Sys_RegDeliver system call");

356 
	}
}

365 
	$Sys_Rëu∫Sig«l
(
I¡îru±_Sèã
 *
°©e
) {

366 
	`TODO_P
(
PROJECT_SIGNALS
, "Sys_ReturnSignal system call");

367  
EUNSUPPORTED
;

368 
	}
}

376 
	$Sys_WaôNoPID
(
I¡îru±_Sèã
 *
°©e
) {

377 
	`TODO_P
(
PROJECT_SIGNALS
, "Sys_WaitNoPID system call");

378  
EUNSUPPORTED
;

379 
	}
}

388 
	$Sys_SëSchedulögPﬁicy
(
I¡îru±_Sèã
 *
°©e
) {

389 
	`TODO_P
(
PROJECT_SCHEDULING
, "SetSchedulingPolicy system call");

391 
	}
}

400 
Sys_GëTimeOfDay
(
I¡îru±_Sèã
 *
°©e


401 
__©åibuã__
 ((
unu£d
))) {

402  
	gg_numTicks
;

415 
	$Sys_Mou¡
(
I¡îru±_Sèã
 *
°©e
) {

416 
rc
 = 0;

417 
VFS_Mou¡_Reque°
 *
¨gs
 = 0;

420 i‡((
¨gs
 =

421 (
VFS_Mou¡_Reque°
 *)
	`MÆloc
((VFS_Mount_Request)))

423 
rc
 = 
ENOMEM
;

424 
d⁄e
;

428 i‡(!
	`C›y_From_U£r
(
¨gs
, 
°©e
->
ebx
, (
VFS_Mou¡_Reque°
))) {

429 
rc
 = 
EINVALID
;

430 
d⁄e
;

438 
	`TODO_P
(
PROJECT_FS
, "Mount system call");

440 
d⁄e
:

441 i‡(
¨gs
 != 0)

442 
	`Fªe
(
¨gs
);

443  
rc
;

444 
	}
}

446 
	$gë_∑th_‰om_ªgi°îs
(
uöt_t
 
addr
, uöt_à
Àngth
, **
pP©h
) {

447 i‡(
Àngth
 > 1024) {

448  
ENAMETOOLONG
;

450 *
pP©h
 = 
	`MÆloc
(
Àngth
 + 1);

451 i‡(!*
pP©h
) {

452  
ENOMEM
;

454 i‡(!
	`C›y_From_U£r
(*
pP©h
, 
addr
, 
Àngth
)) {

455 
	`Fªe
(*
pP©h
);

456  
EINVALID
;

458 (*
pP©h
)[
Àngth
] = '\0';

460 
	}
}

462 
	$√xt_des¸ùt‹
() {

463 
des¸ùt‹
;

464 
des¸ùt‹
 = 0;

465 
des¸ùt‹
 < 
USER_MAX_FILES
 &&

466 
CURRENT_THREAD
->
u£rC⁄ãxt
->
fûe_des¸ùt‹_èbÀ
[
des¸ùt‹
] != 0;

467 
des¸ùt‹
++);

468 i‡(
des¸ùt‹
 =
USER_MAX_FILES
) {

469  
EMFILE
;

471  
des¸ùt‹
;

472 
	}
}

474 
	$add_fûe_to_des¸ùt‹_èbÀ
(
Fûe
 *
fûe
) {

475 
des¸ùt‹
 = 
	`√xt_des¸ùt‹
();

476 i‡(
des¸ùt‹
 >= 0) {

477 
CURRENT_THREAD
->
u£rC⁄ãxt
->
fûe_des¸ùt‹_èbÀ
[
des¸ùt‹
] = 
fûe
;

479  
des¸ùt‹
;

480 
	}
}

492 
	$Sys_O≥n
(
I¡îru±_Sèã
 *
°©e
) {

493 *
∑th
;

494 
Fûe
 *
fûe
;

495 
rc
 = 0;

497 
rc
 = 
	`gë_∑th_‰om_ªgi°îs
(
°©e
->
ebx
, sèã->
ecx
, &
∑th
);

498 i‡(
rc
 != 0) {

499  
rc
;

502 
rc
 = 
	`√xt_des¸ùt‹
();

503 i‡(
rc
 < 0) {

504  
rc
;

507 
	`E«bÀ_I¡îru±s
();

508 
rc
 = 
	`O≥n
(
∑th
, 
°©e
->
edx
, &
fûe
);

509 
	`DißbÀ_I¡îru±s
();

510 
	`Fªe
(
∑th
);

512 i‡(
rc
 >= 0) {

513  
	`add_fûe_to_des¸ùt‹_èbÀ
(
fûe
);

515  
rc
;

517 
	}
}

528 
	$Sys_O≥nDúe˘‹y
(
I¡îru±_Sèã
 *
°©e
) {

529 
	`TODO_P
(
PROJECT_FS
, "Open directory system call");

530  
EUNSUPPORTED
;

531 
	}
}

539 
	$Sys_Clo£
(
I¡îru±_Sèã
 *
°©e
) {

541 i‡(
°©e
->
ebx
 > 
USER_MAX_FILES
) {

542 
	`Pröt
("u«bÀÅÿ˛o£ fd index %d, ouào‡ønge.\n", 
°©e
->
ebx
);

543  
EINVALID
;

545 i‡(
CURRENT_THREAD
->
u£rC⁄ãxt
->
fûe_des¸ùt‹_èbÀ
[
°©e
->
ebx
]) {

546 
	`E«bÀ_I¡îru±s
();

547 
	`Clo£
(
CURRENT_THREAD
->
u£rC⁄ãxt
->
fûe_des¸ùt‹_èbÀ
[
°©e
->
ebx
]);

548 
	`DißbÀ_I¡îru±s
();

549 
CURRENT_THREAD
->
u£rC⁄ãxt
->
fûe_des¸ùt‹_èbÀ
[
°©e
->
ebx
] = 0;

552 
	`Pröt
("u«bÀÅÿ˛o£ fd index %d,ÇŸhögÅhîe.\n", 
°©e
->
ebx
);

553  
ENOTFOUND
;

555 
	}
}

566 
	$Sys_Dñëe
(
I¡îru±_Sèã
 *
°©e
) {

567 
	`TODO_P
(
PROJECT_FS
, "Delete system call");

568  
EUNSUPPORTED
;

569 
	}
}

581 
	$Sys_Ríame
(
I¡îru±_Sèã
 *
°©e
) {

582 
	`TODO_P
(
PROJECT_FS
, "Rename system call");

583  
EUNSUPPORTED
;

584 
	}
}

596 
	$Sys_Lök
(
I¡îru±_Sèã
 *
°©e
) {

597 
	`TODO_P
(
PROJECT_FS
, "Link system call");

598  
EUNSUPPORTED
;

599 
	}
}

611 
	$Sys_SymLök
(
I¡îru±_Sèã
 *
°©e
) {

612 
	`TODO_P
(
PROJECT_FS
, "Link system call");

613  
EUNSUPPORTED
;

614 
	}
}

626 
	$Sys_Ród
(
I¡îru±_Sèã
 *
°©e
) {

627 
byãs_ªad
 = 0;

629 i‡(
°©e
->
ebx
 > 
USER_MAX_FILES
) {

630  
EINVALID
;

632 i‡(
CURRENT_THREAD
->
u£rC⁄ãxt
->
fûe_des¸ùt‹_èbÀ
[
°©e
->
ebx
]) {

633 *
d©a_buf„r
 = 
	`MÆloc
(
°©e
->
edx
);

634 i‡(!
d©a_buf„r
) {

635  
ENOMEM
;

637 
	`E«bÀ_I¡îru±s
();

638 
byãs_ªad
 =

639 
	`Ród
(
CURRENT_THREAD
->
u£rC⁄ãxt
->

640 
fûe_des¸ùt‹_èbÀ
[
°©e
->
ebx
], 
d©a_buf„r
, sèã->
edx
);

641 
	`DißbÀ_I¡îru±s
();

642 i‡(!
	`C›y_To_U£r
(
°©e
->
ecx
, 
d©a_buf„r
, sèã->
edx
)) {

643 
	`Fªe
(
d©a_buf„r
);

644  
EINVALID
;

646 
	`Fªe
(
d©a_buf„r
);

647  
byãs_ªad
;

649  
ENOTFOUND
;

651 
	}
}

660 
	$Sys_RódE¡ry
(
I¡îru±_Sèã
 *
°©e
) {

661 
	`TODO_P
(
PROJECT_FS
, "ReadEntry system call");

662  
EUNSUPPORTED
;

663 
	}
}

675 
	$Sys_Wrôe
(
I¡îru±_Sèã
 *
°©e
) {

676 
byãs_wrôãn
 = 0;

678 i‡(
°©e
->
ebx
 > 
USER_MAX_FILES
) {

679  
EINVALID
;

681 i‡(
CURRENT_THREAD
->
u£rC⁄ãxt
->
fûe_des¸ùt‹_èbÀ
[
°©e
->
ebx
]) {

682 *
d©a_buf„r
 = 
	`MÆloc
(
°©e
->
edx
);

683 i‡(!
d©a_buf„r
) {

684  
ENOMEM
;

686 i‡(!
	`C›y_From_U£r
(
d©a_buf„r
, 
°©e
->
ecx
, sèã->
edx
)) {

687 
	`Fªe
(
d©a_buf„r
);

688  
EINVALID
;

690 
	`E«bÀ_I¡îru±s
();

691 
byãs_wrôãn
 =

692 
	`Wrôe
(
CURRENT_THREAD
->
u£rC⁄ãxt
->

693 
fûe_des¸ùt‹_èbÀ
[
°©e
->
ebx
], 
d©a_buf„r
, sèã->
edx
);

694 
	`Fªe
(
d©a_buf„r
);

695 
	`DißbÀ_I¡îru±s
();

696  
byãs_wrôãn
;

698  
ENOTFOUND
;

700 
	}
}

711 
	$Sys_Sèt
(
I¡îru±_Sèã
 *
°©e
) {

712 
	`TODO_P
(
PROJECT_FS
, "Stat system call");

713  
EUNSUPPORTED
;

714 
	}
}

724 
	$Sys_FSèt
(
I¡îru±_Sèã
 *
°©e
) {

725 
	`TODO_P
(
PROJECT_FS
, "FStat system call");

726  
EUNSUPPORTED
;

727 
	}
}

737 
	$Sys_Sìk
(
I¡îru±_Sèã
 *
°©e
) {

738 
	`TODO_P
(
PROJECT_FS
, "Seek system call");

739  
EUNSUPPORTED
;

740 
	}
}

750 
	$Sys_Cª©eDú
(
I¡îru±_Sèã
 *
°©e
) {

751 
	`TODO_P
(
PROJECT_FS
, "CreateDir system call");

752  
EUNSUPPORTED
;

753 
	}
}

760 
	$Sys_Sync
(
I¡îru±_Sèã
 *
°©e
) {

761 
	`TODO_P
(
PROJECT_FS
, "Sync system call");

762  
EUNSUPPORTED
;

763 
	}
}

775 
	$Sys_F‹m©
(
I¡îru±_Sèã
 *
°©e
) {

776 
rc
 = 0;

777 *
dev«me
 = 0, *
f°y≥
 = 0;

779 i‡((
rc
 =

780 
	`C›y_U£r_Såög
(
°©e
->
ebx
, sèã->
ecx
, 
BLOCKDEV_MAX_NAME_LEN
,

781 &
dev«me
)) != 0 ||

782 (
rc
 =

783 
	`C›y_U£r_Såög
(
°©e
->
edx
, sèã->
esi
, 
VFS_MAX_FS_NAME_LEN
,

784 &
f°y≥
)) != 0)

785 
d⁄e
;

787 
	`E«bÀ_I¡îru±s
();

788 
rc
 = 
	`F‹m©
(
dev«me
, 
f°y≥
);

789 
	`DißbÀ_I¡îru±s
();

791 
d⁄e
:

792 i‡(
dev«me
 != 0)

793 
	`Fªe
(
dev«me
);

794 i‡(
f°y≥
 != 0)

795 
	`Fªe
(
f°y≥
);

796  
rc
;

797 
	}
}

810 
	$Sys_RódBlock
(
I¡îru±_Sèã
 *
°©e
) {

811 
	`TODO_P
(
PROJECT_FS
, "ReadBlock system call");

812  
EUNSUPPORTED
;

813 
	}
}

826 
	$Sys_WrôeBlock
(
I¡îru±_Sèã
 *
°©e
) {

827 
	`TODO_P
(
PROJECT_FS
, "WriteBlock system call");

828  
EUNSUPPORTED
;

829 
	}
}

832 
	$Sys_GëUid
(
I¡îru±_Sèã
 *
°©e
) {

833 
	`TODO_P
(
PROJECT_USER
, "Sys_GetUid system call");

834  
EUNSUPPORTED
;

835 
	}
}

837 
	$Sys_SëSëUid
(
I¡îru±_Sèã
 *
°©e
) {

838 
	`TODO_P
(
PROJECT_USER
, "Sys_SetSetUid system call");

839  
EUNSUPPORTED
;

840 
	}
}

842 
	$Sys_SëEf„˘iveUid
(
I¡îru±_Sèã
 *
°©e
) {

843 
	`TODO_P
(
PROJECT_USER
, "Sys_SetEffectiveUid system call");

844  
EUNSUPPORTED
;

845 
	}
}

847 
	$Sys_SëA˛
(
I¡îru±_Sèã
 *
°©e
) {

848 
	`TODO_P
(
PROJECT_USER
, "Sys_SetAcl system call");

849  
EUNSUPPORTED
;

850 
	}
}

852 
SB16_Pœy_Fûe
(c⁄° *
fûíame
);

853 
	$Sys_PœySoundFûe
(
I¡îru±_Sèã
 *
°©e
) {

854 
	`TODO_P
(
PROJECT_SOUND
, "PlaySoundFile system call");

856 
	}
}

864 
	$Sys_Pùe
(
I¡îru±_Sèã
 *
°©e
) {

865 
	`TODO_P
(
PROJECT_PIPE
, "Pipe system call");

866  
EUNSUPPORTED
;

867 
	}
}

871 
	$Sys_F‹k
(
I¡îru±_Sèã
 *
°©e
) {

872 
	`TODO_P
(
PROJECT_FORK
, "Fork system call");

873  
EUNSUPPORTED
;

874 
	}
}

885 
	$Sys_Exe˛
(
I¡îru±_Sèã
 *
°©e
) {

886 
	`TODO_P
(
PROJECT_FORK
, "Execl system call");

887  
EUNSUPPORTED
;

888 
	}
}

896 
	$Sys_Dügno°ic
(
I¡îru±_Sèã
 *
°©e
) {

897 ()
°©e
;

898 
	`E«bÀ_I¡îru±s
();

899 
	`Dump_Blockdev_Sèts
();

900 
	`DißbÀ_I¡îru±s
();

902 
	}
}

913 
	$Sys_Disk_Pr›îtõs
(
I¡îru±_Sèã
 *
°©e
) {

914 *
∑th
;

915 
block_size
, 
blocks_≥r_disk
;

916 
rc
;

917 
	`C›y_U£r_Såög
(
°©e
->
ebx
, sèã->
ecx
, 100, &
∑th
);

918 
	`E«bÀ_I¡îru±s
();

919 
rc
 = 
	`Disk_Pr›îtõs
(
∑th
, &
block_size
, &
blocks_≥r_disk
);

920 i‡(
rc
 == 0) {

921 
	`C›y_To_U£r
(
°©e
->
edx
, &
block_size
, ());

922 
	`C›y_To_U£r
(
°©e
->
esi
, &
blocks_≥r_disk
, ());

924 
	`DißbÀ_I¡îru±s
();

926 
	}
}

935 
	$Sys_Limô
(
I¡îru±_Sèã
 *
°©e
) {

936 
	`TODO_P
(
PROJECT_LIMIT
, "Limit system call");

937  
EUNSUPPORTED
;

938 
	}
}

940 
	$Sys_Së_Afföôy
(
I¡îru±_Sèã
 *
°©e
) {

941  
EUNSUPPORTED
;

942 
	}
}

944 
	$Sys_Gë_Afföôy
(
I¡îru±_Sèã
 *
°©e
) {

945  
EUNSUPPORTED
;

946 
	}
}

956 
	$Sys_Cl⁄e
(
I¡îru±_Sèã
 *
°©e
) {

957 
	`TODO_P
(
PROJECT_CLONE
, "Clone system call");

958  
EUNSUPPORTED
;

959 
	}
}

961 
	$Sys_Mm≠
(
I¡îru±_Sèã
 *
°©e
) {

962 
	`TODO_P
(
PROJECT_MMAP
, "Mmap system call");

963  
EUNSUPPORTED
;

964 
	}
}

966 
	$Sys_Munm≠
(
I¡îru±_Sèã
 *
°©e
) {

967 
	`Munm≠_Im∂
(*);

969 
	`TODO_P
(
PROJECT_MMAP
, "Munmap system call");

970  
EUNSUPPORTED
;

971 
	}
}

973 
	$Sys_Aœrm
(
I¡îru±_Sèã
 *
°©e
) {

974 
	`TODO_P
(
PROJECT_SIGNALS
, "Alarm");

975  
EUNSUPPORTED
;

976 
	}
}

981 c⁄° 
SysˇŒ
 
	gg_sysˇŒTabÀ
[] = {

982 
Sys_NuŒ
,

983 
Sys_Exô
,

984 
Sys_PrötSåög
,

985 
Sys_GëKey
,

986 
Sys_SëAâr
,

987 
Sys_GëCurs‹
,

988 
Sys_PutCurs‹
,

989 
Sys_S∑wn
,

990 
Sys_Waô
,

991 
Sys_GëPID
,

992 
Sys_Kûl
,

993 
Sys_PS
,

994 
Sys_Sig«l
,

995 
Sys_RegDñivî
,

996 
Sys_Rëu∫Sig«l
,

997 
Sys_WaôNoPID
,

999 
Sys_SëSchedulögPﬁicy
,

1000 
Sys_GëTimeOfDay
,

1001 
Sys_O≥n_Sem≠h‹e
,

1002 
Sys_P
,

1003 
Sys_V
,

1004 
Sys_Clo£_Sem≠h‹e
,

1006 
Sys_Mou¡
,

1007 
Sys_O≥n
,

1008 
Sys_O≥nDúe˘‹y
,

1009 
Sys_Clo£
,

1010 
Sys_Dñëe
,

1011 
Sys_Ród
,

1012 
Sys_RódE¡ry
,

1013 
Sys_Wrôe
,

1014 
Sys_Sèt
,

1015 
Sys_FSèt
,

1016 
Sys_Sìk
,

1017 
Sys_Cª©eDú
,

1018 
Sys_Sync
,

1019 
Sys_F‹m©
,

1020 
Sys_ShutDown
,

1021 
Sys_RódBlock
,

1022 
Sys_WrôeBlock
,

1024 
Sys_EthPackëSíd
,

1025 
Sys_EthPackëRe˚ive
,

1026 
Sys_AΩ
,

1027 
Sys_RouãAdd
,

1028 
Sys_RouãDñ
,

1029 
Sys_RouãGë
,

1030 
Sys_IPC⁄figuª
,

1031 
Sys_IPGë
,

1032 
Sys_IPSíd
,

1034 
Sys_Sockë
,

1035 
Sys_Böd
,

1036 
Sys_Li°í
,

1037 
Sys_Ac˚±
,

1038 
Sys_C⁄√˘
,

1039 
Sys_Síd
,

1040 
Sys_Re˚ive
,

1041 
Sys_SídTo
,

1042 
Sys_Re˚iveFrom
,

1043 
Sys_Clo£Sockë
,

1045 
Sys_Limô
,

1046 
Sys_GëUid
,

1047 
Sys_SëSëUid
,

1048 
Sys_SëEf„˘iveUid
,

1049 
Sys_SëA˛
,

1051 
Sys_PœySoundFûe
,

1053 
Sys_Pùe
,

1054 
Sys_F‹k
,

1055 
Sys_Exe˛
,

1057 
Sys_Dügno°ic
,

1058 
Sys_Disk_Pr›îtõs
,

1060 
Sys_Së_Afföôy
,

1061 
Sys_Gë_Afföôy
,

1062 
Sys_Cl⁄e
,

1064 
Sys_Mm≠
,

1065 
Sys_Munm≠
,

1066 
Sys_Aœrm
,

1067 
Sys_Ríame
,

1068 
Sys_Lök
,

1069 
Sys_SymLök


1075 c⁄° 
	gg_numSysˇŒs
 = (
g_sysˇŒTabÀ
Ë/ (
SysˇŒ
);

	@src/geekos/timer.c

15 
	~<gìkos/kas£π.h
>

16 
	~<gìkos/¥oje˘s.h
>

17 
	~<limôs.h
>

18 
	~<gìkos/io.h
>

19 
	~<gìkos/öt.h
>

20 
	~<gìkos/úq.h
>

21 
	~<gìkos/kthªad.h
>

22 
	~<gìkos/timî.h
>

23 
	~<gìkos/smp.h
>

25 
	#MAX_TIMER_EVENTS
 100

	)

27 
	gtimîDebug
 = 0;

28 
	gtimeEvítCou¡
;

29 
	g√xtEvítID
;

30 
timîEvít
 
	g≥ndögTimîEvíts
[
MAX_TIMER_EVENTS
];

35 vﬁ©ûê
ul⁄g_t
 
	gg_numTicks
;

40 
	gs_•öCou¡PîTick
;

45 
	#CALIBRATE_NUM_TICKS
 3

	)

51 
	#DEFAULT_MAX_TICKS
 4

	)

56 
	gg_Qu™tum
 = 
DEFAULT_MAX_TICKS
;

59 #ifde‡
DEBUG_TIMER


60 
	#Debug
(
¨gs
...Ë
	`Pröt
◊rgs)

	)

62 
	#Debug
(
¨gs
...)

	)

69 
	$Timî_I¡îru±_H™dÀr
(
I¡îru±_Sèã
 *
°©e
) {

70 
i
;

71 
id
;

72 
Kî√l_Thªad
 *
cuºít
 = 
CURRENT_THREAD
;

74 
	`Begö_IRQ
(
°©e
);

76 
id
 = 
	`Gë_CPU_ID
();

78 i‡(!
id
) {

80 ++
g_numTicks
;

85 ++
cuºít
->
numTicks
;

86 ++
cuºít
->
tŸÆTime
;

87 
CPUs
[
id
].
ticks
++;

94 i‡(!
id
) {

97 
i
 = 0; i < 
timeEvítCou¡
; i++) {

98 i‡(
≥ndögTimîEvíts
[
i
].
ticks
 == 0) {

99 i‡(
timîDebug
)

100 
	`Pröt
("timer:Évent %dÉxpired (%dÅicks)\n",

101 
≥ndögTimîEvíts
[
i
].
id
,

102 
≥ndögTimîEvíts
[
i
].
‹igTicks
);

103 (
≥ndögTimîEvíts
[
i
].
ˇŒBack
Ë’ídögTimîEvíts[i].
id
);

105 
≥ndögTimîEvíts
[
i
].
ticks
--;

109 i‡(
cuºít
->
numTicks
 >
g_Qu™tum
) {

110 
g_√edRescheduÀ
[
id
] = 
åue
;

118 
	`End_IRQ
(
°©e
);

119 
	}
}

125 
	$Timî_CÆibøã
(
I¡îru±_Sèã
 *
°©e
) {

126 
	`Begö_IRQ
(
°©e
);

127 i‡(
g_numTicks
 < 
CALIBRATE_NUM_TICKS
)

128 ++
g_numTicks
;

135 
s_•öCou¡PîTick
 = 
INT_MAX
 - 
°©e
->
óx
;

136 
°©e
->
óx
 = 0;

138 
	`End_IRQ
(
°©e
);

139 
	}
}

144 
	$Spö
(
cou¡
) {

152 
ªsu…
;

153 
__asm__
 
	`__vﬁ©ûe__
("1: decl %%eax\n\t"

157 "jg 1b":"˜"(
ªsu…
)

158 :"a"(
cou¡
)

160 
	}
}

167 
	$CÆibøã_Dñay
() {

168 
	`DißbÀ_I¡îru±s
();

171 
	`In°Æl_IRQ
(
TIMER_IRQ
, &
Timî_CÆibøã
);

172 
	`E«bÀ_IRQ
(
TIMER_IRQ
);

174 
	`E«bÀ_I¡îru±s
();

177 
g_numTicks
 < 
CALIBRATE_NUM_TICKS
);

184 
	`Spö
(
INT_MAX
);

186 
	`DißbÀ_I¡îru±s
();

192 
	`DißbÀ_IRQ
(
TIMER_IRQ
);

193 
	`E«bÀ_I¡îru±s
();

194 
	}
}

200 
	$Inô_Timî_I¡îru±
() {

202 
	`E«bÀ_IRQ
(32);

203 
	}
}

205 
	$Inô_Timî
() {

212 
	`Pröt
("InitializingÅimer...\n");

227 
	`In°Æl_IRQ
(32, &
Timî_I¡îru±_H™dÀr
);

229 
	`Inô_Timî_I¡îru±
();

230 
	}
}

232 
	$Sèπ_Timî
(
ticks
, 
timîCÆlback
 
cb
) {

233 
ªtu∫ed_timî_id
;

235 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

237 i‡(
timeEvítCou¡
 =
MAX_TIMER_EVENTS
) {

238 
Pröt


240 
MAX_TIMER_EVENTS
);

241 
i
;

242 
i
 = 0; i < 
MAX_TIMER_EVENTS
; i++) {

243 
	`Pröt
("%d: cb 0x%∞ö %d/%dÅicks", 
i
,

244 
≥ndögTimîEvíts
[
i
].
ˇŒBack
,

245 
≥ndögTimîEvíts
[
i
].
ticks
,

246 
≥ndögTimîEvíts
[
i
].
‹igTicks
);

250 
ªtu∫ed_timî_id
 = 
√xtEvítID
++;

251 
≥ndögTimîEvíts
[
timeEvítCou¡
].
id
 = 
ªtu∫ed_timî_id
;

252 
≥ndögTimîEvíts
[
timeEvítCou¡
].
ˇŒBack
 = 
cb
;

253 
≥ndögTimîEvíts
[
timeEvítCou¡
].
ticks
 =Åicks;

254 
≥ndögTimîEvíts
[
timeEvítCou¡
].
‹igTicks
 = 
ticks
;

255 
timeEvítCou¡
++;

257  
ªtu∫ed_timî_id
;

259 
	}
}

261 
	$Gë_Remaög_Timî_Ticks
(
id
) {

262 
i
;

264 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

265 
i
 = 0; i < 
timeEvítCou¡
; i++) {

266 i‡(
≥ndögTimîEvíts
[
i
].
id
 == id) {

267  
≥ndögTimîEvíts
[
i
].
ticks
;

272 
	}
}

274 
	$C™˚l_Timî
(
id
) {

275 
i
;

276 
	`KASSERT
(!
	`I¡îru±s_E«bÀd
());

277 
i
 = 0; i < 
timeEvítCou¡
; i++) {

278 i‡(
≥ndögTimîEvíts
[
i
].
id
 == id) {

279 
≥ndögTimîEvíts
[
i
] =ÖídögTimîEvíts[
timeEvítCou¡
 - 1];

280 
timeEvítCou¡
--;

285 
	`Pröt
("timî: u«bÀÅÿfödÅimî id %dÅÿˇn˚»ô\n", 
id
);

287 
	}
}

289 
	#US_PER_TICK
 (
TICKS_PER_SEC
 * 1000000)

	)

296 
	$Mi¸o_Dñay
(
us
) {

297 
num
 = 
us
 * 
s_•öCou¡PîTick
;

298 
díom
 = 
US_PER_TICK
;

300 
numSpös
 = 
num
 / 
díom
;

301 
ªm
 = 
num
 % 
díom
;

303 i‡(
ªm
 > 0)

304 ++
numSpös
;

306 
	`Debug
("Mi¸o_Dñay():Çum=%d, díom=%d, spö cou¡ = %d\n", 
num
, 
díom
,

307 
numSpös
);

309 
	`Spö
(
numSpös
);

310 
	}
}

	@src/geekos/trap.c

18 
	~<gìkos/idt.h
>

19 
	~<gìkos/kthªad.h
>

20 
	~<gìkos/defs.h
>

21 
	~<gìkos/sysˇŒ.h
>

22 
	~<gìkos/å≠.h
>

23 
	~<gìkos/u£r.h
>

24 
	~<gìkos/¥oje˘s.h
>

35 
	$GPF_H™dÀr
(
I¡îru±_Sèã
 *
°©e
) {

37 
	`Pröt
("Exception %dÑeceived, killingÅhread %p (pid %d)\n",

38 
°©e
->
ötNum
, 
CURRENT_THREAD
, CURRENT_THREAD->
pid
);

39 
	`Dump_I¡îru±_Sèã
(
°©e
);

41 
	`Exô
(-1);

44 
	`KASSERT
(
Ál£
);

45 
	}
}

50 
	$SysˇŒ_H™dÀr
(
I¡îru±_Sèã
 *
°©e
) {

52 
uöt_t
 
sysˇŒNum
 = 
°©e
->
óx
;

54 
U£r_C⁄ãxt
 *
u£r
;

58 i‡(
sysˇŒNum
 >
g_numSysˇŒs
) {

59 
	`Pröt
("Illegal system call %d byÖrocess %d\n",

60 
sysˇŒNum
, 
CURRENT_THREAD
->
pid
);

61 
	`Exô
(-1);

64 
	`KASSERT
(
Ál£
);

71 
°©e
->
óx
 = 
g_sysˇŒTabÀ
[
sysˇŒNum
] (state);

72 
	}
}

77 
	$Inô_Tøps
() {

78 
	`In°Æl_I¡îru±_H™dÀr
(12, &
GPF_H™dÀr
);

79 
	`In°Æl_I¡îru±_H™dÀr
(13, &
GPF_H™dÀr
);

80 
	`In°Æl_I¡îru±_H™dÀr
(
SYSCALL_INT
, &
SysˇŒ_H™dÀr
);

81 
	}
}

	@src/geekos/tss.c

20 
	~<gìkos/kas£π.h
>

21 
	~<gìkos/defs.h
>

22 
	~<gìkos/gdt.h
>

23 
	~<gìkos/£gmít.h
>

24 
	~<gìkos/°rög.h
>

25 
	~<gìkos/tss.h
>

26 
	~<gìkos/smp.h
>

31 
TSS
 
	gs_theTSS
[
MAX_CPUS
];

32 
Segmít_Des¸ùt‹
 *
	gs_tssDesc
[
MAX_CPUS
];

33 
ush‹t_t
 
	gs_tssSñe˘‹
[
MAX_CPUS
];

35 
__ölöe__
 
	$Lﬂd_Task_Regi°î
() {

36 
˝u
 = 
	`Gë_CPU_ID
();

38 
	`KASSERT
(
s_tssDesc
[
˝u
]);

41 
s_tssDesc
[
˝u
]->
ty≥
 = 0x09;

44 
__asm__
 
	`__vﬁ©ûe__
("…∏%0"::"a"(
s_tssSñe˘‹
[
˝u
])

46 
	}
}

52 
	$Inô_TSS
() {

53 
˝u
 = 
	`Gë_CPU_ID
();

55 
s_tssDesc
[
˝u
] = 
	`AŒoˇã_Segmít_Des¸ùt‹
();

56 
	`KASSERT
(
s_tssDesc
[
˝u
] != 0);

58 
	`mem£t
(&
s_theTSS
[
˝u
], '\0', (
TSS
));

59 
	`Inô_TSS_Des¸ùt‹
(
s_tssDesc
[
˝u
], &
s_theTSS
[cpu]);

61 
s_tssSñe˘‹
[
˝u
] =

62 
	`Sñe˘‹
(0, 
åue
, 
	`Gë_Des¸ùt‹_Index
(
s_tssDesc
[
˝u
]));

64 
	`Lﬂd_Task_Regi°î
();

65 
	}
}

73 
	$Së_Kî√l_Sèck_Poöãr
(
ul⁄g_t
 
e•0
) {

74 
˝u
 = 
	`Gë_CPU_ID
();

76 
s_theTSS
[
˝u
].
ss0
 = 
KERNEL_DS
;

77 
s_theTSS
[
˝u
].
e•0
 =Ésp0;

85 
	`Lﬂd_Task_Regi°î
();

86 
	}
}

88 
	gsubmôTe°ög
;

95 
	$checkPagög
() {

96 
ªg
 = 0;

97 
__asm__
 
	`__vﬁ©ûe__
("mov»%%¸0, %0":"˜"(
ªg
));

98 
	`Pröt
("Pagög o¿? : %d\n", (
ªg
 & (1 << 31)) != 0);

99 
	}
}

	@src/geekos/user.c

18 
	~<gìkos/î∫o.h
>

19 
	~<gìkos/kty≥s.h
>

20 
	~<gìkos/kas£π.h
>

21 
	~<gìkos/öt.h
>

22 
	~<gìkos/mem.h
>

23 
	~<gìkos/mÆloc.h
>

24 
	~<gìkos/kthªad.h
>

25 
	~<gìkos/vfs.h
>

26 
	~<gìkos/tss.h
>

27 
	~<gìkos/u£r.h
>

28 
	~<gìkos/¥oje˘s.h
>

29 
	~<gìkos/smp.h
>

30 
	~<libc/°rög.h
>

37 
Spö_Lock_t
 
kthªadLock
;

43 
	$Aâach_U£r_C⁄ãxt
(
Kî√l_Thªad
 *
kthªad
,

44 
U£r_C⁄ãxt
 *
c⁄ãxt
) {

45 
	`KASSERT
(
c⁄ãxt
 != 0);

46 
kthªad
->
u£rC⁄ãxt
 = 
c⁄ãxt
;

48 
	`Spö_Lock
(&
kthªadLock
);

50 
	`KASSERT
(
c⁄ãxt
->
ªfCou¡
 >= 0);

52 ++
c⁄ãxt
->
ªfCou¡
;

54 
	`Spö_U∆ock
(&
kthªadLock
);

55 
	}
}

63 
	$Dëach_U£r_C⁄ãxt
(
Kî√l_Thªad
 *
kthªad
) {

64 
U£r_C⁄ãxt
 *
ﬁd
 = 
kthªad
->
u£rC⁄ãxt
;

66 
kthªad
->
u£rC⁄ãxt
 = 
NULL
;

68 i‡(
ﬁd
 != 0) {

69 
boﬁ
 
iÊag
;

70 
iÊag
 = 
	`Begö_I¡_Atomic
();

72 
ªfCou¡
;

74 --
ﬁd
->
ªfCou¡
;

75 i‡(
ﬁd
->
ªfCou¡
 == 0) {

76 
	`De°roy_U£r_C⁄ãxt
(
ﬁd
);

78 
	`End_I¡_Atomic
(
iÊag
);

80 
	}
}

97 
	$S∑wn
(c⁄° *
¥ogøm
, c⁄° *
comm™d
,

98 
Kî√l_Thªad
 **
pThªad
, 
boﬁ
 
background
) {

99 
rc
;

100 *
exeFûeD©a
 = 0;

101 
ul⁄g_t
 
exeFûeLígth
;

102 
U£r_C⁄ãxt
 *
u£rC⁄ãxt
 = 0;

103 
Kî√l_Thªad
 *
¥o˚ss
 = 0;

104 
Exe_F‹m©
 
exeF‹m©
;

110 i‡((
rc
 = 
	`Ród_FuŒy
(
¥ogøm
, (**)&
exeFûeD©a
, &
exeFûeLígth
)) != 0

111 || (
rc
 =

112 
	`P¨£_ELF_ExecuèbÀ
(
exeFûeD©a
, 
exeFûeLígth
, &
exeF‹m©
)) != 0

113 || (
rc
 =

114 
	`Lﬂd_U£r_Progøm
(
exeFûeD©a
, 
exeFûeLígth
, &
exeF‹m©
, 
comm™d
,

115 &
u£rC⁄ãxt
)) != 0)

116 
Áû
;

122 
	`Fªe
(
exeFûeD©a
);

123 
exeFûeD©a
 = 0;

125 
	`°∫˝y
(
u£rC⁄ãxt
->
«me
, 
¥ogøm
, 
MAX_PROC_NAME_SZB
);

126 
u£rC⁄ãxt
->
«me
[
MAX_PROC_NAME_SZB
 - 1] = '\0';

130 
¥o˚ss
 = 
	`Sèπ_U£r_Thªad
(
u£rC⁄ãxt
, 
background
);

131 i‡(
¥o˚ss
 != 0) {

133 *
pThªad
 = 
¥o˚ss
;

135 
rc
 = 
ENOMEM
;

137  
rc
;

139 
Áû
:

140 i‡(
exeFûeD©a
 != 0)

141 
	`Fªe
(
exeFûeD©a
);

142 i‡(
u£rC⁄ãxt
 != 0)

143 
	`De°roy_U£r_C⁄ãxt
(
u£rC⁄ãxt
);

145  
rc
;

146 
	}
}

151 
	$S∑wn_F‹eground
(c⁄° *
¥ogøm
, c⁄° *
comm™d
,

152 
Kî√l_Thªad
 **
pThªad
) {

153  
	`S∑wn
(
¥ogøm
, 
comm™d
, 
pThªad
, 
Ál£
);

154 
	}
}

166 
Swôch_To_U£r_C⁄ãxt
(
Kî√l_Thªad
 *
kthªad
,

167 
I¡îru±_Sèã
 *
°©e


168 
__©åibuã__
 ((
unu£d
))) {

169 
	g˝uID
;

170 
u£rDebug
;

171 
U£r_C⁄ãxt
 *
	gu£rC⁄ãxt
 = 
kthªad
->
u£rC⁄ãxt
;

178 
	g˝uID
 = 
Gë_CPU_ID
();

180 
KASSERT
(!
I¡îru±s_E«bÀd
());

182 i‡(
	gCPUs
[
˝uID
].
	gs_cuºítU£rC⁄ãxt
 && 
	gu£rC⁄ãxt
 == 0) {

186 
Së_PDBR
((*)
Kî√l_Page_Dú
());

187 
	gCPUs
[
˝uID
].
	gs_cuºítU£rC⁄ãxt
 = 
NULL
;

192 i‡(
	gu£rC⁄ãxt
 !
CPUs
[
˝uID
].
s_cuºítU£rC⁄ãxt
) {

194 i‡(
u£rDebug
)

195 
Pröt
("A[%p]\n", 
kthªad
);

198 
Swôch_To_Addªss_S∑˚
(
u£rC⁄ãxt
);

201 
	gCPUs
[
˝uID
].
	gs_cuºítU£rC⁄ãxt
 = 
u£rC⁄ãxt
;

211 
ul⁄g_t
 
	ge•0
;

213 
	ge•0
 = ((
ul⁄g_t
Ë
kthªad
->
°ackPage
Ë+ 
PAGE_SIZE
;

214 i‡(
	gu£rDebug
)

215 
Pröt
("S[%lx]\n", 
e•0
);

218 
Së_Kî√l_Sèck_Poöãr
(
e•0
);

	@src/geekos/userseg.c

15 
	~<gìkos/kty≥s.h
>

16 
	~<gìkos/kas£π.h
>

17 
	~<gìkos/defs.h
>

18 
	~<gìkos/mem.h
>

19 
	~<gìkos/°rög.h
>

20 
	~<gìkos/mÆloc.h
>

21 
	~<gìkos/öt.h
>

22 
	~<gìkos/gdt.h
>

23 
	~<gìkos/£gmít.h
>

24 
	~<gìkos/tss.h
>

25 
	~<gìkos/kthªad.h
>

26 
	~<gìkos/¨gblock.h
>

27 
	~<gìkos/u£r.h
>

33 
	#DEFAULT_USER_STACK_SIZE
 8192

	)

36 
	gu£rDebug
 = 0;

42 *
	$U£r_To_Kî√l
(
U£r_C⁄ãxt
 *
u£rC⁄ãxt
, 
ul⁄g_t
 
u£rPå
) {

43 
uch¨_t
 *
u£rBa£
 = (uch¨_à*Ë
u£rC⁄ãxt
->
mem‹y
;

45  (*)(
u£rBa£
 + 
u£rPå
);

46 
	}
}

51 
U£r_C⁄ãxt
 *
	$Cª©e_U£r_C⁄ãxt
(
ul⁄g_t
 
size
) {

52 
U£r_C⁄ãxt
 *
c⁄ãxt
;

53 
ödex
;

56 
size
 = 
	`Round_Up_To_Page
(size);

57 i‡(
u£rDebug
)

58 
	`Pröt
("Sizêo‡u£∏mem‹y =%lu (%lxË(%luÖages)\n", 
size
, size,

59 
size
 / 
PAGE_SIZE
);

62 
	`DißbÀ_I¡îru±s
();

63 
c⁄ãxt
 = (
U£r_C⁄ãxt
 *)
	`MÆloc
((*context));

64 i‡(
c⁄ãxt
 != 0) {

65 
	`mem£t
(
c⁄ãxt
, 0, (
U£r_C⁄ãxt
));

66 
c⁄ãxt
->
mem‹y
 = 
	`MÆloc
(
size
);

68 
	`E«bÀ_I¡îru±s
();

70 i‡(
c⁄ãxt
 =0 || c⁄ãxt->
mem‹y
 == 0)

71 
Áû
;

77 
	`mem£t
(
c⁄ãxt
->
mem‹y
, '\0', 
size
);

79 
c⁄ãxt
->
size
 = size;

82 
c⁄ãxt
->
ldtDes¸ùt‹
 = 
	`AŒoˇã_Segmít_Des¸ùt‹
();

83 i‡(
c⁄ãxt
->
ldtDes¸ùt‹
 == 0)

84 
Áû
;

85 i‡(
u£rDebug
)

86 
	`Pröt
("Allocated descriptor %d for LDT\n",

87 
	`Gë_Des¸ùt‹_Index
(
c⁄ãxt
->
ldtDes¸ùt‹
));

88 
	`Inô_LDT_Des¸ùt‹
(
c⁄ãxt
->
ldtDes¸ùt‹
, c⁄ãxt->
ldt
,

89 
NUM_USER_LDT_ENTRIES
);

90 
ödex
 = 
	`Gë_Des¸ùt‹_Index
(
c⁄ãxt
->
ldtDes¸ùt‹
);

91 
c⁄ãxt
->
ldtSñe˘‹
 = 
	`Sñe˘‹
(
KERNEL_PRIVILEGE
, 
åue
, 
ödex
);

94 
	`Inô_Code_Segmít_Des¸ùt‹
(&
c⁄ãxt
->
ldt
[0],

95 (
ul⁄g_t
Ë
c⁄ãxt
->
mem‹y
,

96 
size
 / 
PAGE_SIZE
, 
USER_PRIVILEGE
);

97 
	`Inô_D©a_Segmít_Des¸ùt‹
(&
c⁄ãxt
->
ldt
[1],

98 (
ul⁄g_t
Ë
c⁄ãxt
->
mem‹y
,

99 
size
 / 
PAGE_SIZE
, 
USER_PRIVILEGE
);

100 
c⁄ãxt
->
csSñe˘‹
 = 
	`Sñe˘‹
(
USER_PRIVILEGE
, 
Ál£
, 0);

101 
c⁄ãxt
->
dsSñe˘‹
 = 
	`Sñe˘‹
(
USER_PRIVILEGE
, 
Ál£
, 1);

104 
c⁄ãxt
->
ªfCou¡
 = 0;

108  
c⁄ãxt
;

110 
Áû
:

112 
	`DißbÀ_I¡îru±s
();

113 i‡(
c⁄ãxt
 != 0) {

114 i‡(
c⁄ãxt
->
mem‹y
 != 0)

115 
	`Fªe
(
c⁄ãxt
->
mem‹y
);

116 
	`Fªe
(
c⁄ãxt
);

118 
	`E«bÀ_I¡îru±s
();

121 
	}
}

123 
boﬁ
 
	$VÆid©e_U£r_Mem‹y
(
U£r_C⁄ãxt
 * 
u£rC⁄ãxt
,

124 
ul⁄g_t
 
u£rAddr
, ul⁄g_à
bufSize
) {

125 
ul⁄g_t
 
avaû
;

127 i‡(
u£rAddr
 >
u£rC⁄ãxt
->
size
)

128  
Ál£
;

130 
avaû
 = 
u£rC⁄ãxt
->
size
 - 
u£rAddr
;

131 i‡(
bufSize
 > 
avaû
)

132  
Ál£
;

134  
åue
;

135 
	}
}

145 
	$De°roy_U£r_C⁄ãxt
(
U£r_C⁄ãxt
 *
u£rC⁄ãxt
) {

146 
	`KASSERT
(
u£rC⁄ãxt
->
ªfCou¡
 == 0);

149 
	`Fªe_Segmít_Des¸ùt‹
(
u£rC⁄ãxt
->
ldtDes¸ùt‹
);

152 
boﬁ
 
iÊag
;

153 
iÊag
 = 
	`Begö_I¡_Atomic
();

154 
	`Fªe
(
u£rC⁄ãxt
->
mem‹y
);

155 
	`Fªe
(
u£rC⁄ãxt
);

156 
	`End_I¡_Atomic
(
iÊag
);

157 
	}
}

177 
Lﬂd_U£r_Progøm
(*
exeFûeD©a
, 
ul⁄g_t
 
exeFûeLígth


178 
__©åibuã__
 ((
unu£d
)), 
Exe_F‹m©
 *
exeF‹m©
,

179 c⁄° *
comm™d
,

180 
U£r_C⁄ãxt
 **
pU£rC⁄ãxt
) {

181 
	gi
;

182 
ul⁄g_t
 
	gmaxva
 = 0;

183 
	gnumArgs
;

184 
ul⁄g_t
 
	g¨gBlockSize
;

185 
ul⁄g_t
 
	gsize
, 
	g¨gBlockAddr
;

186 
U£r_C⁄ãxt
 *
	gu£rC⁄ãxt
 = 0;

189 
	gi
 = 0; i < 
	gexeF‹m©
->
	gnumSegmíts
; ++i) {

190 
Exe_Segmít
 *
	g£gmít
 = &
exeF‹m©
->
£gmítLi°
[
i
];

191 
ul⁄g_t
 
	gt›va
 = 
£gmít
->
°¨tAddªss
 + segmít->
sizeInMem‹y
;

193 i‡(
	gt›va
 > 
	gmaxva
)

194 
	gmaxva
 = 
t›va
;

198 
Gë_Argumít_Block_Size
(
comm™d
, &
numArgs
, &
¨gBlockSize
);

204 
	gsize
 = 
Round_Up_To_Page
(
maxva
Ë+ 
DEFAULT_USER_STACK_SIZE
;

205 
	g¨gBlockAddr
 = 
size
;

206 
	gsize
 +
¨gBlockSize
;

209 
	gu£rC⁄ãxt
 = 
Cª©e_U£r_C⁄ãxt
(
size
);

210 i‡(
	gu£rC⁄ãxt
 == 0)

214 
	gi
 = 0; i < 
	gexeF‹m©
->
	gnumSegmíts
; ++i) {

215 
Exe_Segmít
 *
	g£gmít
 = &
exeF‹m©
->
£gmítLi°
[
i
];

217 
mem˝y
(
u£rC⁄ãxt
->
mem‹y
 + 
£gmít
->
°¨tAddªss
,

218 
exeFûeD©a
 + 
£gmít
->
off£tInFûe
, segmít->
ÀngthInFûe
);

222 
F‹m©_Argumít_Block
(
u£rC⁄ãxt
->
mem‹y
 + 
¨gBlockAddr
, 
numArgs
,

223 
¨gBlockAddr
, 
comm™d
);

226 
	gu£rC⁄ãxt
->
	gíåyAddr
 = 
exeF‹m©
->
íåyAddr
;

232 
	gu£rC⁄ãxt
->
	g¨gBlockAddr
 = 
¨gBlockAddr
;

233 
	gu£rC⁄ãxt
->
	g°ackPoöãrAddr
 = 
¨gBlockAddr
;

236 *
	gpU£rC⁄ãxt
 = 
u£rC⁄ãxt
;

252 
boﬁ
 
	$C›y_From_U£r
(*
de°InKî√l
, 
ul⁄g_t
 
§cInU£r
, ul⁄g_à
bufSize
) {

253 
U£r_C⁄ãxt
 *
cuºít
 = 
CURRENT_THREAD
->
u£rC⁄ãxt
;

255 i‡(!
	`VÆid©e_U£r_Mem‹y
(
cuºít
, 
§cInU£r
, 
bufSize
))

256  
Ál£
;

257 
	`mem˝y
(
de°InKî√l
, 
	`U£r_To_Kî√l
(
cuºít
, 
§cInU£r
), 
bufSize
);

259  
åue
;

260 
	}
}

274 
boﬁ
 
	$C›y_To_U£r
(
ul⁄g_t
 
de°InU£r
, *
§cInKî√l
, ul⁄g_à
bufSize
) {

275 
U£r_C⁄ãxt
 *
cuºít
 = 
CURRENT_THREAD
->
u£rC⁄ãxt
;

277 i‡(!
	`VÆid©e_U£r_Mem‹y
(
cuºít
, 
de°InU£r
, 
bufSize
))

278  
Ál£
;

279 
	`mem˝y
(
	`U£r_To_Kî√l
(
cuºít
, 
de°InU£r
), 
§cInKî√l
, 
bufSize
);

281  
åue
;

282 
	}
}

290 
	$Swôch_To_Addªss_S∑˚
(
U£r_C⁄ãxt
 *
u£rC⁄ãxt
) {

291 
ush‹t_t
 
ldtSñe˘‹
;

296 
	`KASSERT
(
u£rC⁄ãxt
->
mem‹y
 || u£rC⁄ãxt->
∑geDú
);

299 
ldtSñe˘‹
 = 
u£rC⁄ãxt
->ldtSelector;

300 
__asm__
 
	`__vﬁ©ûe__
("Œdà%0"::"a"(
ldtSñe˘‹
)

302 
	}
}

	@src/geekos/uservm.c

17 
	~<gìkos/öt.h
>

18 
	~<gìkos/mem.h
>

19 
	~<gìkos/∑gög.h
>

20 
	~<gìkos/mÆloc.h
>

21 
	~<gìkos/°rög.h
>

22 
	~<gìkos/¨gblock.h
>

23 
	~<gìkos/kthªad.h
>

24 
	~<gìkos/ønge.h
>

25 
	~<gìkos/vfs.h
>

26 
	~<gìkos/u£r.h
>

27 
	~<gìkos/¥oje˘s.h
>

30 
Spö_Lock_t
 
kthªadLock
;

32 
	gu£rDebug
 = 0;

33 
	#Debug
(
¨gs
...Ëi‡(
u£rDebug
Ë
	`Pröt
("u£rvm: "árgs)

	)

50 
	$De°roy_U£r_C⁄ãxt
(
U£r_C⁄ãxt
 *
c⁄ãxt
) {

59 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_A
,

61 
	}
}

81 
	$Lﬂd_U£r_Progøm
(*
exeFûeD©a
, 
ul⁄g_t
 
exeFûeLígth
,

82 
Exe_F‹m©
 *
exeF‹m©
, c⁄° *
comm™d
,

83 
U£r_C⁄ãxt
 **
pU£rC⁄ãxt
) {

94 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_A
, "Load userÖrogram intoáddress space");

96 
	}
}

102 
boﬁ
 
	$C›y_From_U£r
(*
de°InKî√l
, 
ul⁄g_t
 
§cInU£r
, ul⁄g_à
numByãs
) {

121 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_A
, "Copy user dataÅo kernel buffer");

122 
	}
}

128 
boﬁ
 
	$C›y_To_U£r
(
ul⁄g_t
 
de°InU£r
, *
§cInKî√l
, ul⁄g_à
numByãs
) {

135 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_A
, "Copy kernel dataÅo user buffer");

136 
	}
}

142 
boﬁ
 
	$C›y_U£r_To_U£r
(*
de°InU£r
, 
ul⁄g_t
 
§cInU£r
, ul⁄g_à
numByãs
) {

161 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_A
, "Copy user dataÅo kernel buffer");

162 
	}
}

167 
	$Swôch_To_Addªss_S∑˚
(
U£r_C⁄ãxt
 *
u£rC⁄ãxt
) {

173 
	`TODO_P
(
PROJECT_VIRTUAL_MEMORY_A
,

175 
	}
}

	@src/geekos/vfs.c

18 
	~<gìkos/î∫o.h
>

19 
	~<gìkos/li°.h
>

20 
	~<gìkos/°rög.h
>

21 
	~<gìkos/s¸ìn.h
>

22 
	~<gìkos/mÆloc.h
>

23 
	~<gìkos/synch.h
>

24 
	~<gìkos/vfs.h
>

25 
	~<gìkos/¥oje˘s.h
>

42 
Muãx
 
	gs_vfsLock
;

44 
	gdebugVFS
 = 0;

45 
	#Debug
(
¨gs
...Ëi‡(
debugVFS
Ë
	`Pröt
("VFS: "árgs)

	)

47 
	gFûesy°em
;

49 
DEFINE_LIST
(
Mou¡_Poöt_Li°
, 
Mou¡_Poöt
);

50 
IMPLEMENT_LIST
(
Mou¡_Poöt_Li°
, 
Mou¡_Poöt
);

53 
Mou¡_Poöt_Li°
 
	gs_mou¡PoötLi°
;

56 
	sFûesy°em
 {

57 
Fûesy°em_Ops
 *
	m›s
;

58 
	mfsName
[
VFS_MAX_FS_NAME_LEN
 + 1];

59 
DEFINE_LINK
(
Fûesy°em_Li°
, 
Fûesy°em
);

62 
DEFINE_LIST
(
Fûesy°em_Li°
, 
Fûesy°em
);

63 
IMPLEMENT_LIST
(
Fûesy°em_Li°
, 
Fûesy°em
);

66 
Fûesy°em_Li°
 
	gs_fûesy°emLi°
;

69 
Pagög_Devi˚
 *
	gs_∑gögDevi˚
;

71 
	#MAX_PREFIX_LEN
 16

	)

84 
boﬁ
 
	$U≈ack_P©h
(c⁄° *
∑th
, *
¥efix
, c⁄° **
pSuffix
) {

85 *
¶ash
;

86 
size_t
 
pfxLí
;

88 
	`Debug
("∑th=%s\n", 
∑th
);

91 i‡(*
∑th
 != '/')

92  
Ál£
;

93 ++
∑th
;

96 
¶ash
 = 
	`°rchr
(
∑th
, '/');

97 i‡(
¶ash
 == 0) {

103 
pfxLí
 = 
	`°æí
(
∑th
);

104 i‡(
pfxLí
 =0 ||ÖfxLí > 
MAX_PREFIX_LEN
)

105  
Ál£
;

106 
	`°r˝y
(
¥efix
, 
∑th
);

107 *
pSuffix
 = "/";

113 
pfxLí
 = 
¶ash
 - 
∑th
;

114 i‡(
pfxLí
 =0 ||ÖfxLí > 
MAX_PREFIX_LEN
)

115  
Ál£
;

118 
	`mem˝y
(
¥efix
, 
∑th
, 
pfxLí
);

119 
¥efix
[
pfxLí
] = '\0';

125 *
pSuffix
 = 
¶ash
;

128 
	`Debug
("¥efix=%s, suffix=%s\n", 
¥efix
, *
pSuffix
);

129 
	`KASSERT
(**
pSuffix
 == '/');

131  
åue
;

132 
	}
}

141 
Fûesy°em
 *
	$Lookup_Fûesy°em
(c⁄° *
f°y≥
) {

142 
Fûesy°em
 *
fs
;

144 
	`Muãx_Lock
(&
s_vfsLock
);

145 
fs
 = 
	`Gë_Fr⁄t_Of_Fûesy°em_Li°
(&
s_fûesy°emLi°
);

146 
fs
 != 0) {

147 i‡(
	`°rcmp
(
fs
->
fsName
, 
f°y≥
) == 0)

149 
fs
 = 
	`Gë_Next_In_Fûesy°em_Li°
(fs);

151 
	`Muãx_U∆ock
(&
s_vfsLock
);

153  
fs
;

154 
	}
}

162 
Mou¡_Poöt
 *
	$Lookup_Mou¡_Poöt
(c⁄° *
¥efix
) {

163 
Mou¡_Poöt
 *
mou¡Poöt
;

165 
	`Muãx_Lock
(&
s_vfsLock
);

168 
mou¡Poöt
 = 
	`Gë_Fr⁄t_Of_Mou¡_Poöt_Li°
(&
s_mou¡PoötLi°
);

169 
mou¡Poöt
 != 0) {

170 
	`Debug
("Looku∞mou¡Öoöt: %s,%s\n", 
¥efix
, 
mou¡Poöt
->
∑thPªfix
);

171 i‡(
	`°rcmp
(
¥efix
, 
mou¡Poöt
->
∑thPªfix
) == 0)

173 
mou¡Poöt
 = 
	`Gë_Next_In_Mou¡_Poöt_Li°
(mountPoint);

176 
	`Muãx_U∆ock
(&
s_vfsLock
);

178  
mou¡Poöt
;

179 
	}
}

184 
Do_O≥n
(c⁄° *
∑th
, 
mode
, 
Fûe
 **
pFûe
,

185 (*
›íFunc
Ë(
Mou¡_Poöt
 * 
mou¡Poöt
,

186 c⁄° *
∑th
, 
mode
,

187 
Fûe
 ** 
pFûe
)) {

188 
¥efix
[
MAX_PREFIX_LEN
 + 1];

189 c⁄° *
suffix
;

190 
Mou¡_Poöt
 *
mou¡Poöt
;

191 
rc
;

193 i‡(!
	`U≈ack_P©h
(
∑th
, 
¥efix
, &
suffix
))

194  
ENOTFOUND
;

197 
mou¡Poöt
 = 
	`Lookup_Mou¡_Poöt
(
¥efix
);

198 i‡(
mou¡Poöt
 == 0)

199  
ENOTFOUND
;

202 
rc
 = 
	`›íFunc
(
mou¡Poöt
, 
suffix
, 
mode
, 
pFûe
);

203 i‡(
rc
 == 0) {

205 (*
pFûe
)->
mode
 = mode;

206 (*
pFûe
)->
mou¡Poöt
 = mountPoint;

208  
rc
;

209 
	}
}

214 
	$Do_O≥n_Fûe
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

215 
mode
, 
Fûe
 **
pFûe
) {

216 
	`KASSERT
(
mou¡Poöt
->
›s
->
O≥n
 != 0);

217  
mou¡Poöt
->
›s
->
	`O≥n
(mou¡Poöt, 
∑th
, 
mode
, 
pFûe
);

218 
	}
}

223 
Do_O≥n_Dúe˘‹y
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

224 
mode


225 
__©åibuã__
 ((
unu£d
)), 
Fûe
 **
pDú
) {

226 
KASSERT
(
mou¡Poöt
->
›s
->
O≥n_Dúe˘‹y
 != 0);

227  
	gmou¡Poöt
->
	g›s
->
O≥n_Dúe˘‹y
(
mou¡Poöt
, 
∑th
, 
pDú
);

243 
boﬁ
 
	$Regi°î_Fûesy°em
(c⁄° *
fsName
, 
Fûesy°em_Ops
 * 
fsOps
) {

244 
Fûesy°em
 *
fs
;

246 
	`KASSERT
(
fsName
 != 0);

247 
	`KASSERT
(
fsOps
 != 0);

248 
	`KASSERT
(
fsOps
->
Mou¡
 != 0);

250 
	`Debug
("Regi°îög %†fûesy°emÅy≥\n", 
fsName
);

253 
fs
 = (
Fûesy°em
 *)
	`MÆloc
((*fs));

254 i‡(
fs
 == 0)

255  
Ál£
;

258 
fs
->
›s
 = 
fsOps
;

259 
	`°∫˝y
(
fs
->
fsName
, fsName, 
VFS_MAX_FS_NAME_LEN
);

260 
fs
->
fsName
[
VFS_MAX_FS_NAME_LEN
] = '\0';

263 
	`Muãx_Lock
(&
s_vfsLock
);

264 
	`Add_To_Back_Of_Fûesy°em_Li°
(&
s_fûesy°emLi°
, 
fs
);

265 
	`Muãx_U∆ock
(&
s_vfsLock
);

267  
åue
;

268 
	}
}

277 
	$F‹m©
(c⁄° *
dev«me
, c⁄° *
f°y≥
) {

278 
Fûesy°em
 *
fs
;

279 
Block_Devi˚
 *
dev
 = 0;

280 
rc
;

283 
fs
 = 
	`Lookup_Fûesy°em
(
f°y≥
);

284 i‡(
fs
 == 0)

285  
ENOFILESYS
;

286 
	`Debug
("Found %†fûesy°emÅy≥\n", 
f°y≥
);

289 i‡(
fs
->
›s
->
F‹m©
 == 0)

290  
EUNSUPPORTED
;

293 i‡((
rc
 = 
	`O≥n_Block_Devi˚
(
dev«me
, &
dev
)) < 0)

294  
rc
;

295 
	`Debug
("O≥√d devi˚ %s\n", 
dev
->
«me
);

298 
rc
 = 
fs
->
›s
->
	`F‹m©
(
dev
);

300 
	`Clo£_Block_Devi˚
(
dev
);

302  
rc
;

303 
	}
}

313 
	$Mou¡
(c⁄° *
dev«me
, c⁄° *
∑thPªfix
, c⁄° *
f°y≥
) {

314 
Fûesy°em
 *
fs
;

315 
Block_Devi˚
 *
dev
 = 0;

316 
Mou¡_Poöt
 *
mou¡Poöt
 = 0;

317 
rc
;

320 *
∑thPªfix
 == '/')

321 ++
∑thPªfix
;

323 i‡(
	`°æí
(
∑thPªfix
Ë> 
MAX_PREFIX_LEN
)

324  
ENAMETOOLONG
;

327 
fs
 = 
	`Lookup_Fûesy°em
(
f°y≥
);

328 i‡(
fs
 == 0)

329  
ENOFILESYS
;

330 
	`KASSERT
(
fs
->
›s
->
Mou¡
 != 0);

333 i‡((
rc
 = 
	`O≥n_Block_Devi˚
(
dev«me
, &
dev
)) < 0) {

334 
	`Pröt
("O≥n_Block_Devi˚: U«bÀÅÿ›í %s\n", 
dev«me
);

335  
rc
;

339 
mou¡Poöt
 = (
Mou¡_Poöt
 *)
	`MÆloc
((*mountPoint));

340 i‡(
mou¡Poöt
 == 0)

341 
memÁû
;

342 
	`mem£t
(
mou¡Poöt
, '\0', (*mountPoint));

343 
mou¡Poöt
->
dev
 = dev;

344 
mou¡Poöt
->
∑thPªfix
 = 
	`°rdup
(pathPrefix);

345 i‡(
mou¡Poöt
->
∑thPªfix
 == 0)

346 
memÁû
;

348 
	`Debug
("Mou¡ög %†⁄ %†usög %†fs\n", 
dev«me
, 
∑thPªfix
, 
f°y≥
);

351 i‡((
rc
 = 
fs
->
›s
->
	`Mou¡
(
mou¡Poöt
)) < 0)

352 
Áû
;

354 
	`Debug
("Mount succeeded!\n");

362 
	`Muãx_Lock
(&
s_vfsLock
);

363 
	`Add_To_Back_Of_Mou¡_Poöt_Li°
(&
s_mou¡PoötLi°
, 
mou¡Poöt
);

364 
	`Muãx_U∆ock
(&
s_vfsLock
);

368 
memÁû
:

369 
rc
 = 
ENOMEM
;

370 
Áû
:

371 i‡(
mou¡Poöt
 != 0) {

372 i‡(
mou¡Poöt
->
∑thPªfix
 != 0)

373 
	`Fªe
(
mou¡Poöt
->
∑thPªfix
);

374 
	`Fªe
(
mou¡Poöt
);

376 i‡(
dev
 != 0)

377 
	`Clo£_Block_Devi˚
(
dev
);

378  
rc
;

379 
	}
}

389 
	$O≥n
(c⁄° *
∑th
, 
mode
, 
Fûe
 **
pFûe
) {

390 
rc
 = 
	`Do_O≥n
(
∑th
, 
mode
, 
pFûe
, &
Do_O≥n_Fûe
);

392  
rc
;

393 
	}
}

403 
	$Clo£
(
Fûe
 *
fûe
) {

404 
rc
;

406 
	`KASSERT
(
fûe
->
›s
->
Clo£
 != 0);

408 
	`TODO_P
(
PROJECT_FORK
, "ManageÑeference count");

410 
rc
 = 
fûe
->
›s
->
	`Clo£
(file);

411 i‡(
rc
 == 0)

412 
	`Fªe
(
fûe
);

413  
rc
;

414 
	}
}

423 
	$Sèt
(c⁄° *
∑th
, 
VFS_Fûe_Sèt
 *
°©
) {

424 
¥efix
[
MAX_PREFIX_LEN
 + 1];

425 c⁄° *
suffix
;

426 
Mou¡_Poöt
 *
mou¡Poöt
;

428 i‡(!
	`U≈ack_P©h
(
∑th
, 
¥efix
, &
suffix
))

429  
ENOTFOUND
;

432 
	`Debug
("Sèt:Üooku∞mou¡Öoöàf‹ %s\n", 
¥efix
);

433 
mou¡Poöt
 = 
	`Lookup_Mou¡_Poöt
(
¥efix
);

434 i‡(
mou¡Poöt
 == 0)

435  
ENOTFOUND
;

437 
	`Debug
("Stat: found mountÖoint, dispatchingÅo filesystem\n");

438 i‡(
mou¡Poöt
->
›s
->
Sèt
 == 0)

439  
EUNSUPPORTED
;

441  
mou¡Poöt
->
›s
->
	`Sèt
(mou¡Poöt, 
suffix
, 
°©
);

442 
	}
}

448 
	$Sync
() {

449 
rc
 = 0;

450 
Mou¡_Poöt
 *
mou¡Poöt
;

452 
	`Muãx_Lock
(&
s_vfsLock
);

453 
mou¡Poöt
 = 
	`Gë_Fr⁄t_Of_Mou¡_Poöt_Li°
(&
s_mou¡PoötLi°
);

454 
mou¡Poöt
 != 0;

455 
mou¡Poöt
 = 
	`Gë_Next_In_Mou¡_Poöt_Li°
(mountPoint)) {

456 
	`KASSERT
(
mou¡Poöt
->
›s
->
Sync
 != 0);

457 
rc
 = 
mou¡Poöt
->
›s
->
	`Sync
(mountPoint);

458 i‡(
rc
 != 0)

461 
	`Muãx_U∆ock
(&
s_vfsLock
);

463  
rc
;

464 
	}
}

478 
Fûe
 *
	$AŒoˇã_Fûe
(
Fûe_Ops
 *
›s
, 
fûePos
, 
ídPos
,

479 *
fsD©a
, 
mode
,

480 
Mou¡_Poöt
 *
mou¡Poöt
) {

481 
Fûe
 *
fûe
;

483 
fûe
 = (
Fûe
 *)
	`MÆloc
((File));

484 i‡(
fûe
 != 0) {

485 
fûe
->
›s
 = ops;

486 
fûe
->
fûePos
 = filePos;

487 
fûe
->
ídPos
 =ÉndPos;

488 
fûe
->
fsD©a
 = fsData;

489 
fûe
->
mode
 = mode;

490 
fûe
->
mou¡Poöt
 = mountPoint;

492  
fûe
;

493 
	}
}

502 
	$FSèt
(
Fûe
 *
fûe
, 
VFS_Fûe_Sèt
 *
°©
) {

503 i‡(
fûe
->
›s
->
FSèt
 == 0)

504  
EUNSUPPORTED
;

506  
fûe
->
›s
->
	`FSèt
(fûe, 
°©
);

507 
	}
}

518 
	$Ród
(
Fûe
 *
fûe
, *
buf
, 
ul⁄g_t
 
Àn
) {

519 i‡(
fûe
->
›s
->
Ród
 == 0)

520  
EUNSUPPORTED
;

522  
fûe
->
›s
->
	`Ród
(fûe, 
buf
, 
Àn
);

523 
	}
}

533 
	$Wrôe
(
Fûe
 *
fûe
, *
buf
, 
ul⁄g_t
 
Àn
) {

534 i‡(
fûe
->
›s
->
Wrôe
 == 0)

535  
EUNSUPPORTED
;

537  
fûe
->
›s
->
	`Wrôe
(fûe, 
buf
, 
Àn
);

538 
	}
}

548 
	$Sìk
(
Fûe
 *
fûe
, 
ul⁄g_t
 
Àn
) {

549 i‡(
fûe
->
›s
->
Sìk
 == 0)

550  
EUNSUPPORTED
;

552  
fûe
->
›s
->
	`Sìk
(fûe, 
Àn
);

553 
	}
}

565 
	$Ród_FuŒy
(c⁄° *
∑th
, **
pBuf„r
, 
ul⁄g_t
 * 
pLí
) {

566 
Fûe
 *
fûe
 = 0;

567 
VFS_Fûe_Sèt
 
°©
;

568 
rc
;

569 *
buf
 = 0;

570 
numByãsRód
;

572 i‡((
rc
 = 
	`Sèt
(
∑th
, &
°©
)Ë< 0 || (r¯
	`O≥n
’©h, 
O_READ
, &
fûe
)) < 0)

573 
Áû
;

574 i‡(
°©
.
size
 < 0) {

575 
rc
 = 
ENOTFOUND
;

576 
Áû
;

579 
buf
 = (*)
	`MÆloc
(
°©
.
size
);

580 i‡(
buf
 == 0)

581 
memÁû
;

584 
numByãsRód
 = 0;

585 
numByãsRód
 < 
°©
.
size
) {

586 
rc
 = 
	`Ród
(
fûe
, 
buf
 + 
numByãsRód
, 
°©
.
size
 -ÇumBytesRead);

587 i‡(
rc
 < 0)

588 
Áû
;

589 
numByãsRód
 +
rc
;

593 
	`Clo£
(
fûe
);

594 *
pBuf„r
 = (*)
buf
;

595 *
pLí
 = 
°©
.
size
;

598 
memÁû
:

599 
rc
 = 
ENOMEM
;

600 
Áû
:

601 i‡(
fûe
 != 0)

602 
	`Clo£
(
fûe
);

603 i‡(
buf
 != 0)

604 
	`Fªe
(
buf
);

605  
rc
;

606 
	}
}

614 
	$Cª©e_Dúe˘‹y
(c⁄° *
∑th
) {

615 
¥efix
[
MAX_PREFIX_LEN
 + 1];

616 c⁄° *
suffix
;

617 
Mou¡_Poöt
 *
mou¡Poöt
;

620 i‡(!
	`U≈ack_P©h
(
∑th
, 
¥efix
, &
suffix
))

621  
ENOTFOUND
;

624 
mou¡Poöt
 = 
	`Lookup_Mou¡_Poöt
(
¥efix
);

625 i‡(
mou¡Poöt
 == 0)

626  
ENOTFOUND
;

628 i‡(
mou¡Poöt
->
›s
->
Cª©e_Dúe˘‹y
 == 0)

629  
EUNSUPPORTED
;

631  
mou¡Poöt
->
›s
->
	`Cª©e_Dúe˘‹y
(mou¡Poöt, 
suffix
);

632 
	}
}

641 
	$Dñëe
(c⁄° *
∑th
, 
boﬁ
 
ªcursive
) {

642 
¥efix
[
MAX_PREFIX_LEN
 + 1];

643 c⁄° *
suffix
;

644 
Mou¡_Poöt
 *
mou¡Poöt
;

647 i‡(!
	`U≈ack_P©h
(
∑th
, 
¥efix
, &
suffix
))

648  
ENOTFOUND
;

651 
mou¡Poöt
 = 
	`Lookup_Mou¡_Poöt
(
¥efix
);

652 i‡(
mou¡Poöt
 == 0)

653  
ENOTFOUND
;

655 i‡(
mou¡Poöt
->
›s
->
Dñëe
 == 0)

656  
EUNSUPPORTED
;

658  
mou¡Poöt
->
›s
->
	`Dñëe
(mou¡Poöt, 
suffix
, 
ªcursive
);

659 
	}
}

669 
	$Ríame
(c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
) {

670 
¥efix1
[
MAX_PREFIX_LEN
 + 1];

671 
¥efix2
[
MAX_PREFIX_LEN
 + 1];

672 c⁄° *
suffix1
;

673 c⁄° *
suffix2
;

674 
Mou¡_Poöt
 *
mou¡Poöt1
;

675 
Mou¡_Poöt
 *
mou¡Poöt2
;

679 i‡(!
	`U≈ack_P©h
(
ﬁd∑th
, 
¥efix1
, &
suffix1
))

680  
ENOTFOUND
;

683 
mou¡Poöt1
 = 
	`Lookup_Mou¡_Poöt
(
¥efix1
);

684 i‡(
mou¡Poöt1
 == 0)

685  
ENOTFOUND
;

687 i‡(
mou¡Poöt1
->
›s
->
Ríame
 == 0)

688  
EUNSUPPORTED
;

691 i‡(!
	`U≈ack_P©h
(
√w∑th
, 
¥efix2
, &
suffix2
))

692  
ENOTFOUND
;

694 
mou¡Poöt2
 = 
	`Lookup_Mou¡_Poöt
(
¥efix2
);

696 i‡(
mou¡Poöt1
 !
mou¡Poöt2
)

697  
EINVALID
;

699  
mou¡Poöt1
->
›s
->
	`Ríame
(mou¡Poöt1, 
suffix1
, 
suffix2
);

700 
	}
}

709 
	$Lök
(c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
) {

710 
¥efix1
[
MAX_PREFIX_LEN
 + 1];

711 
¥efix2
[
MAX_PREFIX_LEN
 + 1];

712 c⁄° *
suffix1
;

713 c⁄° *
suffix2
;

714 
Mou¡_Poöt
 *
mou¡Poöt1
;

715 
Mou¡_Poöt
 *
mou¡Poöt2
;

719 i‡(!
	`U≈ack_P©h
(
ﬁd∑th
, 
¥efix1
, &
suffix1
))

720  
ENOTFOUND
;

723 
mou¡Poöt1
 = 
	`Lookup_Mou¡_Poöt
(
¥efix1
);

724 i‡(
mou¡Poöt1
 == 0)

725  
ENOTFOUND
;

727 i‡(
mou¡Poöt1
->
›s
->
Lök
 == 0)

728  
EUNSUPPORTED
;

731 i‡(!
	`U≈ack_P©h
(
√w∑th
, 
¥efix2
, &
suffix2
))

732  
ENOTFOUND
;

734 
mou¡Poöt2
 = 
	`Lookup_Mou¡_Poöt
(
¥efix2
);

736 i‡(
mou¡Poöt1
 !
mou¡Poöt2
)

737  
EINVALID
;

739  
mou¡Poöt1
->
›s
->
	`Lök
(mou¡Poöt1, 
suffix1
, 
suffix2
);

740 
	}
}

749 
	$SymLök
(c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
) {

750 
¥efix2
[
MAX_PREFIX_LEN
 + 1];

751 c⁄° *
suffix2
;

752 
Mou¡_Poöt
 *
mou¡Poöt2
;

755 i‡(!
	`U≈ack_P©h
(
√w∑th
, 
¥efix2
, &
suffix2
))

756  
ENOTFOUND
;

758 
mou¡Poöt2
 = 
	`Lookup_Mou¡_Poöt
(
¥efix2
);

760 i‡(
mou¡Poöt2
->
›s
->
SymLök
 == 0)

761  
EUNSUPPORTED
;

763  
mou¡Poöt2
->
›s
->
	`SymLök
(mou¡Poöt2, 
ﬁd∑th
, 
suffix2
);

764 
	}
}

772 
	$SëSëUid
(c⁄° *
∑th
, 
£tUid
) {

773 
	`TODO_P
(
PROJECT_USER
, "virtual file system system SetSetUid");

774  
EUNSUPPORTED
;

775 
	}
}

784 
	$SëA˛
(c⁄° *
∑th
, 
u£r
, 
≥rmissi⁄s
) {

785 
	`TODO_P
(
PROJECT_USER
, "virtual file system system SetAcl");

786  
EUNSUPPORTED
;

787 
	}
}

796 
	$O≥n_Dúe˘‹y
(c⁄° *
∑th
, 
Fûe
 **
pDú
) {

797  
	`Do_O≥n
(
∑th
, 0, 
pDú
, &
Do_O≥n_Dúe˘‹y
);

798 
	}
}

807 
	$Ród_E¡ry
(
Fûe
 *
fûe
, 
VFS_Dú_E¡ry
 *
íåy
) {

808 i‡(
fûe
->
›s
->
Ród_E¡ry
 == 0)

809  
EUNSUPPORTED
;

811  
fûe
->
›s
->
	`Ród_E¡ry
(fûe, 
íåy
);

812 
	}
}

823 
	$Disk_Pr›îtõs
(c⁄° *
∑th
,

824 *
block_size
,

825 *
blocks_ö_fûesy°em
) {

826 
¥efix
[
MAX_PREFIX_LEN
 + 1];

827 c⁄° *
suffix
;

828 
Mou¡_Poöt
 *
mou¡Poöt
;

831 i‡(!
	`U≈ack_P©h
(
∑th
, 
¥efix
, &
suffix
))

832  
ENOTFOUND
;

835 
mou¡Poöt
 = 
	`Lookup_Mou¡_Poöt
(
¥efix
);

836 i‡(
mou¡Poöt
 == 0)

837  
ENOTFOUND
;

839 i‡(
mou¡Poöt
->
›s
->
Disk_Pr›îtõs
 == 0)

840  
EUNSUPPORTED
;

842  
mou¡Poöt
->
›s
->
	`Disk_Pr›îtõs
(mou¡Poöt, 
block_size
,

843 
blocks_ö_fûesy°em
);

844 
	}
}

849 
	$Regi°î_Pagög_Devi˚
(
Pagög_Devi˚
 *
∑gögDevi˚
) {

850 
	`KASSERT
(
s_∑gögDevi˚
 == 0);

851 
	`KASSERT
(
∑gögDevi˚
 != 0);

852 
	`Pröt
("Regi°îögÖagög devi˚: %†⁄ %s\n", 
∑gögDevi˚
->
fûeName
,

853 
∑gögDevi˚
->
dev
->
«me
);

854 
s_∑gögDevi˚
 = 
∑gögDevi˚
;

855 
	}
}

861 
Pagög_Devi˚
 *
	$Gë_Pagög_Devi˚
() {

862  
s_∑gögDevi˚
;

863 
	}
}

	@src/libc/compat.c

1 
	~<c⁄io.h
>

2 
	~<°ddef.h
>

4 *
MÆloc
(
size_t
 
n
 
__©åibuã__
 ((
unu£d
))) {

5 
Pröt
("MallocÇot implemented in user mode\n");

	@src/libc/conio.c

10 
	~<gìkos/sysˇŒ.h
>

11 
	~<fmtout.h
>

12 
	~<°rög.h
>

13 
	~<c⁄io.h
>

15 
boﬁ
 
	gs_echo
 = 
åue
;

18 
DEF_SYSCALL
(
Pröt_Såög
, 
SYS_PRINTSTRING
, , (c⁄° *
°r
),

19 c⁄° *
¨g0
 = 
°r
;

20 
size_t
 
¨g1
 = 
°æí
(
°r
);

21 , 
SYSCALL_REGS_2
)

22 
DEF_SYSCALL
(
Gë_Key
, 
SYS_GETKEY
, , (),, 
SYSCALL_REGS_0
)

23 
DEF_SYSCALL
(
Së_Aâr
, 
SYS_SETATTR
, , (
©å
), 
¨g0
 =áttr;

24 , 
SYSCALL_REGS_1
)

25 
DEF_SYSCALL
(
Gë_Curs‹
, 
SYS_GETCURSOR
, , (*
row
, *
cﬁ
),

26 *
¨g0
 = 
row
;

27 *
¨g1
 = 
cﬁ
;

28 , 
SYSCALL_REGS_2
)

31 
	$Put_Curs‹
(
row
, 
cﬁ
) {

32 
comm™d
[40];

37 
	`¢¥ötf
(
comm™d
, (comm™d), "\x1B[%d;%df", 
row
 + 1, 
cﬁ
 + 1);

38 
	`Pröt_Såög
(
comm™d
);

40 
	}
}

42 
	$Put_Ch¨
(
ch
) {

43 
buf
[2];

44 
buf
[0] = ()
ch
;

45 
buf
[1] = '\0';

46  
	`Pröt_Såög
(
buf
);

47 
	}
}

49 
	$Echo
(
boﬁ
 
íabÀ
) {

50 
s_echo
 = 
íabÀ
;

51 
	}
}

53 
	$gë_posôi⁄_of_œ°_ch¨a˘î_ö_buf„r
(*
buf
, 
n
,

54 
°¨tcﬁ
) {

55 
√wcﬁ
 = 
°¨tcﬁ
;

56 
i
;

57 
i
 = 0; i < 
n
; ++i) {

58 
ch
 = 
buf
[
i
];

59 i‡(
ch
 == '\t') {

60 
ªm
 = 
√wcﬁ
 % 
TABWIDTH
;

61 
√wcﬁ
 +(
ªm
 =0Ë? 
TABWIDTH
 : (TABWIDTH -Ñem);

63 ++
√wcﬁ
;

66  
√wcﬁ
;

67 
	}
}

69 
	$Ród_Löe
(*
buf
, 
size_t
 
bufSize
) {

70 *
±r
 = 
buf
;

71 
size_t
 
n
 = 0;

72 
Keycode
 
k
;

73 
boﬁ
 
d⁄e
 = 
Ál£
;

74 
°¨åow
 = 0, 
°¨tcﬁ
 = 0;

75 
	`Gë_Curs‹
(&
°¨åow
, &
°¨tcﬁ
);

78 
bufSize
--;

80 
k
 = (
Keycode
Ë
	`Gë_Key
();

81 i‡((
k
 & 
KEY_SPECIAL_FLAG
Ë|| (k & 
KEY_RELEASE_FLAG
))

85 i‡(
k
 == '\r')

86 
k
 = '\n';

91 i‡(
k
 =
ASCII_BS
 || k =(
KEY_CTRL_FLAG
 | 'h'Ë|| k =
KEY_KPDEL
) {

92 i‡(
n
 > 0) {

93 
œ°
 = *(
±r
 - 1);

94 
√wcﬁ
 = 
°¨tcﬁ
;

97 --
±r
;

98 --
n
;

100 i‡(
s_echo
) {

105 
√wcﬁ
 =

106 
	`gë_posôi⁄_of_œ°_ch¨a˘î_ö_buf„r
(
buf
, 
n
,

107 
°¨tcﬁ
);

110 i‡(
œ°
 != '\t')

111 
œ°
 = ' ';

112 
	`Put_Curs‹
(
°¨åow
, 
√wcﬁ
);

113 
	`Put_Ch¨
(
œ°
);

114 
	`Put_Curs‹
(
°¨åow
, 
√wcﬁ
);

121 i‡(
k
 =(
KEY_CTRL_FLAG
 | 'u')) {

122 
	`Put_Curs‹
(
°¨åow
, 
°¨tcﬁ
);

123 
œ°cﬁ
 =

124 
	`gë_posôi⁄_of_œ°_ch¨a˘î_ö_buf„r
(
buf
, 
n
, 
°¨tcﬁ
);

125 
i
;

126 
i
 = 
°¨tcﬁ
; i < 
œ°cﬁ
; i++) {

127 
	`Put_Ch¨
(' ');

129 
	`Put_Curs‹
(
°¨åow
, 
°¨tcﬁ
);

130 
±r
 = 
buf
;

131 
n
 = 0;

134 i‡((
k
 & 
KEY_CTRL_FLAG
Ë|| (k & 
KEY_ALT_FLAG
)) {

141 
k
 &= 0xff;

143 i‡(
s_echo
)

144 
	`Put_Ch¨
(
k
);

146 i‡(
k
 == '\n')

147 
d⁄e
 = 
åue
;

149 i‡(
n
 < 
bufSize
) {

150 *
±r
++ = 
k
;

151 ++
n
;

154 !
d⁄e
);

156 *
±r
 = '\0';

157 
	}
}

159 c⁄° *
	$Gë_Eº‹_Såög
(
î∫o
) {

160 c⁄° *
__°ªºTabÀ
[];

161 c⁄° 
__°ªºTabÀSize
;

169 
î∫o
 = -errno;

171 i‡(
î∫o
 < 0 ||Éºnÿ>
__°ªºTabÀSize
)

174  
__°ªºTabÀ
[
î∫o
];

175 
	}
}

179 
	sLöeSök
 {

180 
Ouçut_Sök
 
	mo
;

181 
	mbuf„r
[1024];

182 
	m√xtCh
;

186 
Pröt_Emô
(
Ouçut_Sök
 *
o
 
__©åibuã__
 ((
unu£d
)), 
ch
) {

187 
LöeSök
 *
	gs
 = (LöeSök *)
o
;

189 i‡(
	gs
->
	g√xtCh
 == 1024)

191 
	gs
->
	gbuf„r
[
s
->
√xtCh
++] = 
ch
;

194 
Pröt_Föish
(
Ouçut_Sök
 *
o
 
__©åibuã__
 ((
unu£d
))) {

195 
LöeSök
 *
	gs
 = (LöeSök *)
o
;

197 
	gs
->
	gbuf„r
[
s
->
√xtCh
] = '\0';

198 
Pröt_Såög
(
s
->
buf„r
);

199 
	gs
->
	g√xtCh
 = 0;

203 
	glöe
[100];

205 
	$Pröt
(c⁄° *
fmt
, ...) {

207 
LöeSök
 
l
;

209 
l
.
o
.
Emô
 = &
Pröt_Emô
;

210 
l
.
o
.
Föish
 = &
Pröt_Föish
;

211 
l
.
√xtCh
 = 0;

213 
va_li°
 
¨gs
;

215 
	`va_°¨t
(
¨gs
, 
fmt
);

216 
	`F‹m©_Ouçut
((
Ouçut_Sök
 *)&
l
, 
fmt
, 
¨gs
);

217 
	`va_íd
(
¨gs
);

218 
	}
}

222 
	$dump_°ack
() {

223 *
e•
;

224 
i
;

225 
	`__asm__
("mov»%%e•,%0":"Ù"(
e•
));

226 
	`Pröt
("Stack dump\n");

227 
i
 = 0; i < 25; i++) {

228 
	`Pröt
("[%x]: %x\n", ()&
e•
[
i
],Ésp[i]);

230 
	}
}

	@src/libc/entry.c

11 
	~<gìkos/¨gblock.h
>

12 
	~<sig«l.h
>

14 
maö
(
¨gc
, **
¨gv
);

15 
Exô
(
exôCode
);

20 
	$_E¡ry
() {

21 
Argumít_Block
 *
¨gBlock
;

24 
__asm__
 
	`__vﬁ©ûe__
("mov»%%esi, %0":"Ù"(
¨gBlock
));

28 
ªt
 = 
	`Sig_Inô
();

29 i‡(
ªt
 != 0)

30 
	`Exô
(
ªt
);

34 
	`Exô
(
	`maö
(
¨gBlock
->
¨gc
,árgBlock->
¨gv
));

35 
	}
}

	@src/libc/fileio.c

11 
	~<gìkos/î∫o.h
>

12 
	~<gìkos/sysˇŒ.h
>

13 
	~<fûeio.h
>

14 
	~<°rög.h
>

16 
DEF_SYSCALL
(
Sèt
, 
SYS_STAT
, ,

17 (c⁄° *
fûíame
, 
VFS_Fûe_Sèt
 * 
°©
),

18 c⁄° *
¨g0
 = 
fûíame
;

19 
size_t
 
¨g1
 = 
°æí
(
fûíame
);

20 
VFS_Fûe_Sèt
 *
¨g2
 = 
°©
;

21 , 
SYSCALL_REGS_3
)

22 
DEF_SYSCALL
(
FSèt
, 
SYS_FSTAT
, , (
fd
, 
VFS_Fûe_Sèt
 * 
°©
),

23 
¨g0
 = 
fd
;

24 
VFS_Fûe_Sèt
 *
¨g1
 = 
°©
;

25 , 
SYSCALL_REGS_2
)

26 
DEF_SYSCALL
(
O≥n
, 
SYS_OPEN
, , (c⁄° *
fûíame
, 
mode
),

27 c⁄° *
¨g0
 = 
fûíame
;

28 
size_t
 
¨g1
 = 
°æí
(
fûíame
);

29 
¨g2
 = 
mode
;

30 , 
SYSCALL_REGS_3
)

31 
DEF_SYSCALL
(
Cª©e_Dúe˘‹y
, 
SYS_CREATEDIR
, , (c⁄° *
dú«me
),

32 c⁄° *
¨g0
 = 
dú«me
;

33 
size_t
 
¨g1
 = 
°æí
(
dú«me
);

34 , 
SYSCALL_REGS_2
)

35 
DEF_SYSCALL
(
O≥n_Dúe˘‹y
, 
SYS_OPENDIRECTORY
, , (c⁄° *
dú«me
),

36 c⁄° *
¨g0
 = 
dú«me
;

37 
size_t
 
¨g1
 = 
°æí
(
dú«me
);

38 , 
SYSCALL_REGS_2
)

39 
DEF_SYSCALL
(
Clo£
, 
SYS_CLOSE
, , (
fd
), 
¨g0
 = fd;

40 , 
SYSCALL_REGS_1
)

41 
DEF_SYSCALL
(
Ród_E¡ry
, 
SYS_READENTRY
, ,

42 (
fd
, 
VFS_Dú_E¡ry
 * 
íåy
), 
¨g0
 = fd;

43 
VFS_Dú_E¡ry
 *
¨g1
 = 
íåy
;

44 , 
SYSCALL_REGS_2
)

45 
DEF_SYSCALL
(
Ród
, 
SYS_READ
, , (
fd
, *
buf
, 
ul⁄g_t
 
Àn
),

46 
¨g0
 = 
fd
;

47 *
¨g1
 = 
buf
;

48 
ul⁄g_t
 
¨g2
 = 
Àn
;

49 , 
SYSCALL_REGS_3
)

50 
DEF_SYSCALL
(
Wrôe
, 
SYS_WRITE
, , (
fd
, c⁄° *
buf
, 
ul⁄g_t
 
Àn
),

51 
¨g0
 = 
fd
;

52 c⁄° *
¨g1
 = 
buf
;

53 
ul⁄g_t
 
¨g2
 = 
Àn
;

54 , 
SYSCALL_REGS_3
)

55 
DEF_SYSCALL
(
Sync
, 
SYS_SYNC
, , (),, 
SYSCALL_REGS_0
)

56 
DEF_SYSCALL
(
F‹m©
, 
SYS_FORMAT
, ,

57 (c⁄° *
dev«me
, c⁄° *
f°y≥
), c⁄° *
¨g0
 =

58 
dev«me
;

59 
size_t
 
¨g1
 = 
°æí
(
dev«me
);

60 c⁄° *
¨g2
 = 
f°y≥
;

61 
size_t
 
¨g3
 = 
°æí
(
f°y≥
);

62 , 
SYSCALL_REGS_4
)

63 
DEF_SYSCALL
(
Sìk
, 
SYS_SEEK
, , (
fd
, 
pos
), 
¨g0
 = fd;

64 
¨g1
 = 
pos
;

65 , 
SYSCALL_REGS_2
)

66 
DEF_SYSCALL
(
Dñëe
, 
SYS_DELETE
, , (c⁄° *
∑th
, 
boﬁ
 
ªcursive
),

67 c⁄° *
¨g0
 = 
∑th
;

68 
size_t
 
¨g1
 = 
°æí
(
∑th
);

69 
boﬁ
 
¨g2
 = 
ªcursive
;

70 , 
SYSCALL_REGS_3
)

71 
DEF_SYSCALL
(
Ríame
, 
SYS_RENAME
, ,

72 (c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
), c⁄° *
¨g0
 =

73 
ﬁd∑th
;

74 
size_t
 
¨g1
 = 
°æí
(
ﬁd∑th
);

75 c⁄° *
¨g2
 = 
√w∑th
;

76 
size_t
 
¨g3
 = 
°æí
(
√w∑th
);

77 , 
SYSCALL_REGS_4
)

78 
DEF_SYSCALL
(
Lök
, 
SYS_LINK
, , (c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
),

79 c⁄° *
¨g0
 = 
ﬁd∑th
;

80 
size_t
 
¨g1
 = 
°æí
(
ﬁd∑th
);

81 c⁄° *
¨g2
 = 
√w∑th
;

82 
size_t
 
¨g3
 = 
°æí
(
√w∑th
);

83 , 
SYSCALL_REGS_4
)

84 
DEF_SYSCALL
(
SymLök
, 
SYS_SYMLINK
, ,

85 (c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
), c⁄° *
¨g0
 =

86 
ﬁd∑th
;

87 
size_t
 
¨g1
 = 
°æí
(
ﬁd∑th
);

88 c⁄° *
¨g2
 = 
√w∑th
;

89 
size_t
 
¨g3
 = 
°æí
(
√w∑th
);

90 , 
SYSCALL_REGS_4
)

91 
DEF_SYSCALL
(
RódBlock
, 
SYS_READBLOCK
, ,

92 (c⁄° *
∑th
, *
buf
, 
Àn
,

93 
blocknum
), c⁄° *
¨g0
 = 
∑th
;

94 
size_t
 
¨g1
 = 
°æí
(
∑th
);

95 *
¨g2
 = 
buf
;

96 
¨g3
 = 
Àn
;

97 
¨g4
 = 
blocknum
;

98 , 
SYSCALL_REGS_5
)

99 
DEF_SYSCALL
(
WrôeBlock
, 
SYS_WRITEBLOCK
, ,

100 (c⁄° *
∑th
, *
buf
, 
Àn
,

101 
blocknum
), c⁄° *
¨g0
 = 
∑th
;

102 
size_t
 
¨g1
 = 
°æí
(
∑th
);

103 *
¨g2
 = 
buf
;

104 
¨g3
 = 
Àn
;

105 
¨g4
 = 
blocknum
;

106 , 
SYSCALL_REGS_5
)

108 
DEF_SYSCALL
(
PœySoundFûe
, 
SYS_PLAY_SOUND_FILE
, , (c⁄° *
∑th
),

109 c⁄° *
¨g0
 = 
∑th
;

110 
size_t
 
¨g1
 = 
°æí
(
∑th
);

111 , 
SYSCALL_REGS_2
)

113 
DEF_SYSCALL
(
Pùe
, 
SYS_PIPE
, , (*
ªad_fd
, *
wrôe_fd
), *
¨g0
 =

114 
ªad_fd
;

115 *
¨g1
 = 
wrôe_fd
;

116 , 
SYSCALL_REGS_2
)

117 
DEF_SYSCALL
(
Dügno°ic
, 
SYS_DIAGNOSTIC
, , (),, 
SYSCALL_REGS_0
)

118 
DEF_SYSCALL
(
Disk_Pr›îtõs
, 
SYS_DISKPROPERTIES
, ,

119 (c⁄° *
∑th
, *
block_size
,

120 *
blocks_⁄_disk
), c⁄° *
¨g0
 = 
∑th
;

121 
size_t
 
¨g1
 = 
°æí
(
∑th
);

122 *
¨g2
 = 
block_size
;

123 *
¨g3
 = 
blocks_⁄_disk
;

124 , 
SYSCALL_REGS_4
)

126 
DEF_SYSCALL
(
SëA˛
, 
SYS_SET_ACL
, ,

127 (c⁄° *
fûe
, 
uid
, 
≥rmissi⁄s
),

128 c⁄° *
¨g0
 = 
fûe
;

129 
¨g1
 = 
°æí
(
fûe
);

130 
¨g2
 = 
uid
;

131 
¨g3
 = 
≥rmissi⁄s
;

132 , 
SYSCALL_REGS_4
)

133 
DEF_SYSCALL
(
GëUid
, 
SYS_GET_UID
, , (),;

134 , 
SYSCALL_REGS_0
)

135 
DEF_SYSCALL
(
SëEf„˘iveUid
, 
SYS_SET_EFFECTIVE_UID
, , (
uid
), 
¨g0
 =

136 
uid
;

137 , 
SYSCALL_REGS_1
)

138 
DEF_SYSCALL
(
SëSëUid
, 
SYS_SET_SET_UID
, , (c⁄° *
fûe
, 
uid
),

139 c⁄° *
¨g0
 = 
fûe
;

140 
¨g1
 = 
°æí
(
fûe
);

141 
¨g2
 = 
uid
;

142 , 
SYSCALL_REGS_3
)

144 
DEF_SYSCALL
(
Mm≠
, 
SYS_MMAP
, ,

145 (c⁄° *
addr
, 
size_t
 
Àngth
, 
¥Ÿ
, 
Êags
,

146 
fd
), c⁄° *
¨g0
 = 
addr
;

147 
size_t
 
¨g1
 = 
Àngth
;

148 
¨g2
 = 
¥Ÿ
;

149 
¨g3
 = 
Êags
;

150 
¨g4
 = 
fd
;

151 , 
SYSCALL_REGS_5
)

152 
DEF_SYSCALL
(
Munm≠
, 
SYS_MUNMAP
, , (c⁄° *
addr
), c⁄° *
¨g0
 =

153 
addr
;

154 , 
SYSCALL_REGS_1
)

156 
boﬁ
 
	$C›y_Såög
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
) {

157 i‡(
	`°∫Àn
(
§c
, 
Àn
) ==Üen)

158  
Ál£
;

159 
	`°r˝y
(
d°
, 
§c
);

160  
åue
;

161 
	}
}

169 
	$Mou¡
(c⁄° *
dev«me
, c⁄° *
¥efix
, c⁄° *
f°y≥
) {

170 
num
 = 
SYS_MOUNT
, 
rc
;

171 
VFS_Mou¡_Reque°
 
¨gs
;

173 i‡(!
	`C›y_Såög
(
¨gs
.
dev«me
, devname, (args.devname)) ||

174 !
	`C›y_Såög
(
¨gs
.
¥efix
,Örefix, (args.prefix)) ||

175 !
	`C›y_Såög
(
¨gs
.
f°y≥
, fstype, (args.fstype)))

176  
EINVALID
;

178 
__asm__
 
	`__vﬁ©ûe__
(
SYSCALL
:"˜"(
rc
)

179 :"a"(
num
), "b"(&
¨gs
)

181  
rc
;

182 
	}
}

	@src/libc/libuser.h

8 
	~<°ddef.h
>

10 
	tKeycode
;

12 
NuŒ
();

13 
Exô
();

14 
Pröt_Såög
(c⁄° *
mesßge
);

15 
Keycode
 
Gë_Key
();

16 
S∑wn_Progøm
(*
¥ogøm
);

17 
Waô
(
pid
);

19 *
MÆloc
(
size
);

21 *
mem£t
(*
s
, 
c
, 
size_t
 
n
);

22 *
mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

23 
size_t
 
°æí
(c⁄° *
s
);

24 
°rcmp
(c⁄° *
s1
, c⁄° *
s2
);

25 *
°rˇt
(*
s1
, *
s2
);

26 *
°rdup
(*
s1
);

27 *
°r˝y
(*
s1
, *
s2
);

	@src/libc/net.c

11 
	~<°rög.h
>

12 
	~<gìkos/sysˇŒ.h
>

13 
	~<gìkos/kty≥s.h
>

14 
	~<gìkos/√t/ù.h
>

16 
DEF_SYSCALL
(
EthPackëSíd
, 
SYS_ETHPACKETSEND
, ,

17 (c⁄° *
buf„r
, 
ul⁄g_t
 
Àngth
, c⁄° 
uch¨_t
 
de°
[],

18 c⁄° *
devi˚_«me
), c⁄° *
¨g0
 = 
buf„r
;

19 
ul⁄g_t
 
¨g1
 = 
Àngth
;

20 c⁄° 
uch¨_t
 * 
¨g2
 = 
de°
;

21 c⁄° *
¨g3
 = 
devi˚_«me
;

22 
ul⁄g_t
 
¨g4
 = 
°æí
(
devi˚_«me
);

23 , 
SYSCALL_REGS_5
)

25 
DEF_SYSCALL
(
EthPackëRe˚ive
, 
SYS_ETHPACKETRECEIVE
, ,

26 (*
buf„r
, 
ul⁄g_t
 
Àngth
), *
¨g0
 = buffer;

27 
ul⁄g_t
 
¨g1
 = 
Àngth
;

28 , 
SYSCALL_REGS_2
)

30 
DEF_SYSCALL
(
AΩ
, 
SYS_ARP
, , (
uch¨_t
 * 
ùAddªss
, uch¨_à* 
macAddªss
),

31 
uch¨_t
 * 
¨g0
 = 
ùAddªss
;

32 
uch¨_t
 * 
¨g1
 = 
macAddªss
;

33 , 
SYSCALL_REGS_2
)

35 
DEF_SYSCALL
(
Rouã_Add
, 
SYS_ROUTEADD
, ,

36 (
uch¨_t
 * 
ùAddªss
, uch¨_à* 
√tmask
, uch¨_à* 
g©eway
,

37 *
iÁ˚Name
, 
ul⁄g_t
 
Àn
), 
uch¨_t
 * 
¨g0
 = 
ùAddªss
;

38 
uch¨_t
 * 
¨g1
 = 
√tmask
;

39 
uch¨_t
 * 
¨g2
 = 
g©eway
;

40 *
¨g3
 = 
iÁ˚Name
;

41 
ul⁄g_t
 
¨g4
 = 
Àn
;

42 , 
SYSCALL_REGS_5
)

44 
DEF_SYSCALL
(
Rouã_Dñëe
, 
SYS_ROUTEDEL
, ,

45 (
uch¨_t
 * 
ùAddªss
, uch¨_à* 
√tmask
),

46 
uch¨_t
 * 
¨g0
 = 
ùAddªss
;

47 
uch¨_t
 * 
¨g1
 = 
√tmask
;

48 , 
SYSCALL_REGS_2
)

50 
DEF_SYSCALL
(
IP_C⁄figuª
, 
SYS_IPCONFIGURE
, ,

51 (*
«me
, 
ul⁄g_t
 
Àn
, 
uch¨_t
 * 
ùAddªss
,

52 
uch¨_t
 * 
sub√t
), *
¨g0
 = 
«me
;

53 
ul⁄g_t
 
¨g1
 = 
Àn
;

54 
uch¨_t
 * 
¨g2
 = 
ùAddªss
;

55 
uch¨_t
 * 
¨g3
 = 
sub√t
;

56 , 
SYSCALL_REGS_4
)

58 
DEF_SYSCALL
(
Gë_Rouãs
, 
SYS_ROUTEGET
, ,

59 (
IP_Rouã
 * 
buf„r
, 
ul⁄g_t
 
cou¡
),

60 *
¨g0
 = 
buf„r
;

61 
ul⁄g_t
 
¨g1
 = 
cou¡
;

62 , 
SYSCALL_REGS_2
)

64 
DEF_SYSCALL
(
Gë_IP_Info
, 
SYS_IPGET
, ,

65 (
IP_Devi˚_Info
 * 
buf„r
, 
ul⁄g_t
 
cou¡
,

66 *
öãrÁ˚
, 
ul⁄g_t
 
iÁ˚Lí
), *
¨g0
 = 
buf„r
;

67 
ul⁄g_t
 
¨g1
 = 
cou¡
;

68 *
¨g2
 = 
öãrÁ˚
;

69 
ul⁄g_t
 
¨g3
 = 
iÁ˚Lí
;

70 , 
SYSCALL_REGS_4
)

72 
DEF_SYSCALL
(
IP_Síd
, 
SYS_IPSEND
, ,

73 (
uch¨_t
 * 
ùAddªss
, *
mesßge
, 
ul⁄g_t
 
mesßgeLígth
),

74 
uch¨_t
 * 
¨g0
 = 
ùAddªss
;

75 *
¨g1
 = 
mesßge
;

76 
ul⁄g_t
 
¨g2
 = 
mesßgeLígth
;

77 , 
SYSCALL_REGS_3
)

79 
boﬁ
 
	$P¨£_IP
(c⁄° *
ù
, 
uch¨_t
 * 
ùBuf„r
) {

80 
buf„r
[100];

81 *
cuº
 = 
buf„r
;

82 *
numBegö
 = 
buf„r
;

83 
	`mem˝y
(
buf„r
, 
ù
, 100);

84 
i
 = 0;

85 
boﬁ
 
d⁄e
 = 
Ál£
;

87 
i
 = 0; i < 4; ++i) {

89 *
cuº
 != '\0' && *curr != '.') {

90 ++
cuº
;

93 i‡(*
cuº
 ='\0' && 
i
 != 3)

94  
Ál£
;

95 i‡(*
cuº
 ='\0' && 
i
 == 3)

96 
d⁄e
 = 
åue
;

98 *
cuº
 = '\0';

102 
ùBuf„r
[
i
] = 
	`©oi
(
numBegö
);

104 ++
cuº
;

105 
numBegö
 = 
cuº
;

108 i‡(!
d⁄e
)

109  
Ál£
;

111  
åue
;

112 
	}
}

	@src/libc/process.c

11 
	~<°ddef.h
>

12 
	~<gìkos/kty≥s.h
>

13 
	~<gìkos/sysˇŒ.h
>

14 
	~<gìkos/î∫o.h
>

15 
	~<°rög.h
>

16 
	~<¥o˚ss.h
>

17 
	~<c⁄io.h
>

20 
DEF_SYSCALL
(
NuŒ
, 
SYS_NULL
, , (),, 
SYSCALL_REGS_0
)

21 
DEF_SYSCALL
(
Exô
, 
SYS_EXIT
, , (
exôCode
), 
¨g0
 =ÉxitCode;

22 , 
SYSCALL_REGS_1
)

23 
DEF_SYSCALL
(
S∑wn_Progøm
, 
SYS_SPAWN
, ,

24 (c⁄° *
¥ogøm
, c⁄° *
comm™d
, 
background
),

25 c⁄° *
¨g0
 = 
¥ogøm
;

26 
size_t
 
¨g1
 = 
°æí
(
¥ogøm
);

27 c⁄° *
¨g2
 = 
comm™d
;

28 
size_t
 
¨g3
 = 
°æí
(
comm™d
);

29 
¨g4
 = 
background
;

30 , 
SYSCALL_REGS_5
)

31 
DEF_SYSCALL
(
Waô
, 
SYS_WAIT
, , (
pid
), 
¨g0
 =Öid;

32 , 
SYSCALL_REGS_1
)

33 
DEF_SYSCALL
(
Gë_PID
, 
SYS_GETPID
, , (),, 
SYSCALL_REGS_0
)

34 
DEF_SYSCALL
(
PS
, 
SYS_PS
, , (
Pro˚ss_Info
 * 
±abÀ
, 
Àn
),

35 
Pro˚ss_Info
 *
¨g0
 = 
±abÀ
;

36 
¨g1
 = 
Àn
;

37 , 
SYSCALL_REGS_2
)

38 
DEF_SYSCALL
(
WaôNoPID
, 
SYS_WAITNOPID
, , (*
°©us
), *
¨g0
 = status;

39 , 
SYSCALL_REGS_1
)

40 
DEF_SYSCALL
(
ShutDown
, 
SYS_SHUTDOWN
, , (),, 
SYSCALL_REGS_0
)

42 
DEF_SYSCALL
(
F‹k
, 
SYS_FORK
, , (),, 
SYSCALL_REGS_0
)

43 
DEF_SYSCALL
(
Cl⁄e
, 
SYS_CLONE
, , ((*
func
Ë(), *
°ackPå
),

44 *
¨g0
 = 
func
;

45 *
¨g1
 = 
°ackPå
;

46 , 
SYSCALL_REGS_2
)

47 
	`DEF_SYSCALL
(
Exe˛
, 
SYS_EXECL
, , (c⁄° *
¥ogøm
, c⁄° *
comm™d
),

48 c⁄° *
¨g0
 = 
¥ogøm
;

49 
size_t
 
¨g1
 = 
	`°æí
(
¥ogøm
); c⁄° *
¨g2
 = 
comm™d
;

50 
size_t
 
¨g3
 = 
	`°æí
(
comm™d
);

51 , 
SYSCALL_REGS_4
)

54 
	$Limô
(
ªs
, 
limô
) {

55 
	`Pröt
("ERROR: Placeholder Limit call\n");

57 
	}
}

59 
DEF_SYSCALL
(
Së_Afföôy
, 
SYS_SET_AFFINITY
, , (
pid
, 
aff
),

60 
¨g0
 = 
pid
;

61 
¨g1
 = 
aff
;

62 , 
SYSCALL_REGS_2
)

63 
DEF_SYSCALL
(
Gë_Afföôy
, 
SYS_GET_AFFINITY
, , (
pid
), 
¨g0
 =Öid;

64 , 
SYSCALL_REGS_1
)

65 
	#CMDLEN
 79

	)

66 
boﬁ
 
	$Ends_Wôh
(c⁄° *
«me
, c⁄° *
suffix
) {

67 
size_t
 
«meLí
 = 
	`°æí
(
«me
);

68 
size_t
 
suffixLí
 = 
	`°æí
(
suffix
);

69 
size_t
 
°¨t
, 
i
;

71 i‡(
suffixLí
 > 
«meLí
)

72  
Ál£
;

73 
°¨t
 = 
«meLí
 - 
suffixLí
;

75 
i
 = 0; i < 
suffixLí
; ++i) {

76 i‡(
«me
[
°¨t
 + 
i
] !
suffix
[i])

77  
Ál£
;

79  
åue
;

80 
	}
}

83 
	$S∑wn_Wôh_P©h
(c⁄° *
¥ogøm
, c⁄° *
comm™d
,

84 c⁄° *
∑th
, 
background
) {

85 
pid
 = -1;

86 
exeName
[(
CMDLEN
 * 2) + 5];

90 
pid
 = 
	`S∑wn_Progøm
(
¥ogøm
, 
comm™d
, 
background
);

93 i‡(
pid
 =
ENOTFOUND
 && 
	`°rchr
(
¥ogøm
, '/') == 0) {

96 *
p
;

98 *
∑th
 == ':')

99 ++
∑th
;

101 i‡(
	`°rcmp
(
∑th
, "") == 0)

104 
p
 = 
	`°rchr
(
∑th
, ':');

105 i‡(
p
 != 0) {

106 
	`mem˝y
(
exeName
, 
∑th
, 
p
 -Öath);

107 
exeName
[
p
 - 
∑th
] = '\0';

108 
∑th
 = 
p
 + 1;

110 
	`°r˝y
(
exeName
, 
∑th
);

111 
∑th
 = "";

114 
	`°rˇt
(
exeName
, "/");

115 
	`°rˇt
(
exeName
, 
¥ogøm
);

117 i‡(!
	`Ends_Wôh
(
exeName
, ".exe"))

118 
	`°rˇt
(
exeName
, ".exe");

121 
pid
 = 
	`S∑wn_Progøm
(
exeName
, 
comm™d
, 
background
);

122 i‡(
pid
 !
ENOTFOUND
)

127  
pid
;

128 
	}
}

	@src/libc/sched.c

11 
	~<gìkos/sysˇŒ.h
>

12 
	~<°rög.h
>

14 
DEF_SYSCALL
(
Së_Schedulög_Pﬁicy
, 
SYS_SETSCHEDULINGPOLICY
, ,

15 (
pﬁicy
, 
qu™tum
), 
¨g0
 =Öolicy;

16 
¨g1
 = 
qu™tum
;

17 , 
SYSCALL_REGS_2
)

18 
DEF_SYSCALL
(
Gë_Time_Of_Day
, 
SYS_GETTIMEOFDAY
, , (),, 
SYSCALL_REGS_0
)

20 
DEF_SYSCALL
(
Aœrm
, 
SYS_ALARM
, , (
m£c⁄ds
),

21 
¨g0
 = 
m£c⁄ds
;

22 , 
SYSCALL_REGS_1
)

	@src/libc/sema.c

11 
	~<gìkos/sysˇŒ.h
>

12 
	~<gìkos/£m.h
>

13 
	~<°rög.h
>

14 
	~<£ma.h
>

16 
DEF_SYSCALL
(
O≥n_Sem≠h‹e
, 
SYS_OPEN_SEMAPHORE
, ,

17 (c⁄° *
«me
, 
ivÆ
), c⁄° *
¨g0
 =Çame;

18 
size_t
 
¨g1
 = 
°æí
(
«me
);

19 
¨g2
 = 
ivÆ
;

20 , 
SYSCALL_REGS_3
)

21 
DEF_SYSCALL
(
P
, 
SYS_P
, , (
s
), 
¨g0
 = s;

22 , 
SYSCALL_REGS_1
)

23 
DEF_SYSCALL
(
V
, 
SYS_V
, , (
s
), 
¨g0
 = s;

24 , 
SYSCALL_REGS_1
)

25 
DEF_SYSCALL
(
Clo£_Sem≠h‹e
, 
SYS_CLOSE_SEMAPHORE
, , (
s
), 
¨g0
 = s;

26 , 
SYSCALL_REGS_1
)

	@src/libc/signal.c

21 
	~<gìkos/sysˇŒ.h
>

22 
	~<gìkos/sig«l.h
>

23 
	~<fmtout.h
>

24 
	~<¥o˚ss.h
>

25 
	~<c⁄io.h
>

28 
DEF_SYSCALL
(
Kûl
, 
SYS_KILL
, , (
pid
, 
sig
), 
¨g0
 =Öid;

29 
¨g1
 = 
sig
;

30 , 
SYSCALL_REGS_2
)

31 
DEF_SYSCALL
(
Sig«l
, 
SYS_SIGNAL
, , (
sig«l_h™dÀr
 
h
, 
sig
),

32 
sig«l_h™dÀr
 
¨g0
 = 
h
;

33 
¨g1
 = 
sig
;

34 , 
SYSCALL_REGS_2
)

35 
DEF_SYSCALL
(
RegDñivî
, 
SYS_REGDELIVER
, , ((*
dñivî
) ()),

36 (*
¨g0
Ë(Ë
dñivî
;

37 , 
SYSCALL_REGS_1
)

41 
	`Rëu∫_Sig«l
();

44 
	$Def_Chûd_H™dÀr
() {

45 
°©us
;

46 
	`WaôNoPID
(&
°©us
) >= 0);

48 
	}
}

51 
	$Sig_Inô
() {

52  
	`RegDñivî
(
Rëu∫_Sig«l
);

53 
	}
}

	@src/libc/socket.c

10 
	~<sockë.h
>

11 
	~<°rög.h
>

12 
	~<gìkos/sysˇŒ.h
>

14 
uch¨_t
 
	gINADDR_ANY
[4] = { 0, 0, 0, 0 };

15 
uch¨_t
 
	gINADDR_BROADCAST
[4] = { 255, 255, 255, 255 };

17 
DEF_SYSCALL
(
Sockë
, 
SYS_SOCKET
, , (
uch¨_t
 
ty≥
, 
Êags
), 
ul⁄g_t
 
¨g0
 =

18 
ty≥
;

19 
ul⁄g_t
 
¨g1
 = 
Êags
;

20 , 
SYSCALL_REGS_2
)

21 
DEF_SYSCALL
(
C⁄√˘
, 
SYS_CONNECT
, ,

22 (
ul⁄g_t
 
id
, 
ush‹t_t
 
p‹t
, 
uch¨_t
 
ùAddªss
[4]),

23 
ul⁄g_t
 
¨g0
 = 
id
;

24 
ul⁄g_t
 
¨g1
 = 
p‹t
;

25 *
¨g2
 = 
ùAddªss
;

26 , 
SYSCALL_REGS_3
)

27 
DEF_SYSCALL
(
Ac˚±
, 
SYS_ACCEPT
, ,

28 (
ul⁄g_t
 
id
, 
ush‹t_t
 * 
p‹t
, 
uch¨_t
 
ùAddªss
[4]),

29 
ul⁄g_t
 
¨g0
 = 
id
;

30 *
¨g1
 = 
p‹t
;

31 *
¨g2
 = 
ùAddªss
;

32 , 
SYSCALL_REGS_3
)

33 
DEF_SYSCALL
(
Li°í
, 
SYS_LISTEN
, , (
ul⁄g_t
 
id
, ul⁄g_à
backlog
),

34 
ul⁄g_t
 
¨g0
 = 
id
;

35 
ul⁄g_t
 
¨g1
 = 
backlog
;

36 , 
SYSCALL_REGS_2
)

37 
DEF_SYSCALL
(
Böd
, 
SYS_BIND
, ,

38 (
ul⁄g_t
 
id
, 
ush‹t_t
 
p‹t
, 
uch¨_t
 
ùAddªss
[4]),

39 
ul⁄g_t
 
¨g0
 = 
id
;

40 
ul⁄g_t
 
¨g1
 = 
p‹t
;

41 *
¨g2
 = 
ùAddªss
;

42 , 
SYSCALL_REGS_3
)

43 
DEF_SYSCALL
(
Re˚ive
, 
SYS_RECEIVE
, ,

44 (
ul⁄g_t
 
id
, *
buf„r
, ul⁄g_à
buf„rSize
), ul⁄g_à
¨g0
 =

45 
id
;

46 *
¨g1
 = 
buf„r
;

47 
ul⁄g_t
 
¨g2
 = 
buf„rSize
;

48 , 
SYSCALL_REGS_3
)

49 
DEF_SYSCALL
(
Síd
, 
SYS_SEND
, ,

50 (
ul⁄g_t
 
id
, *
buf„r
, ul⁄g_à
buf„rSize
), ul⁄g_à
¨g0
 =

51 
id
;

52 *
¨g1
 = 
buf„r
;

53 
ul⁄g_t
 
¨g2
 = 
buf„rSize
;

54 , 
SYSCALL_REGS_3
)

55 
DEF_SYSCALL
(
Síd_To
, 
SYS_SENDTO
, ,

56 (
ul⁄g_t
 
id
, 
uch¨_t
 * 
buf„r
, ul⁄g_à
buf„rSize
,

57 
ush‹t_t
 
p‹t
, 
uch¨_t
 
ùAddªss
[4]), 
ul⁄g_t
 
¨g0
 = 
id
;

58 *
¨g1
 = 
buf„r
;

59 
ul⁄g_t
 
¨g2
 = 
buf„rSize
;

60 
ul⁄g_t
 
¨g3
 = 
p‹t
;

61 *
¨g4
 = 
ùAddªss
;

62 , 
SYSCALL_REGS_5
)

63 
DEF_SYSCALL
(
Re˚ive_From
, 
SYS_RECEIVEFROM
, ,

64 (
ul⁄g_t
 
id
, 
uch¨_t
 * 
buf„r
, ul⁄g_à
buf„rSize
,

65 
ush‹t_t
 * 
p‹t
, 
uch¨_t
 
ùAddªss
[4]), 
ul⁄g_t
 
¨g0
 = 
id
;

66 *
¨g1
 = 
buf„r
;

67 
ul⁄g_t
 
¨g2
 = 
buf„rSize
;

68 *
¨g3
 = 
p‹t
;

69 *
¨g4
 = 
ùAddªss
;

70 , 
SYSCALL_REGS_5
)

71 
DEF_SYSCALL
(
Clo£_Sockë
, 
SYS_CLOSESOCKET
, , (
ul⁄g_t
 
id
), ul⁄g_à
¨g0
 =

72 
id
;

73 , 
SYSCALL_REGS_1
)

	@src/libc/spin.c

23 
	~"gìkos/¥oje˘s.h
"

26 vﬁ©ûê
	mlock
;

27 } 
	tU£r_Spö_Lock_t
;

29 
	$Is_Locked
(
U£r_Spö_Lock_t
 * 
lock
) {

30 
	`TODO_P
(
PROJECT_CLONE
, "Is_Locked");

32 
	}
}

34 
	$Spö_Lock_Inô
(
U£r_Spö_Lock_t
 * 
lock
) {

35 
	`TODO_P
(
PROJECT_CLONE
, "Is_Locked");

36 
	}
}

38 
	$Spö_Lock
(
U£r_Spö_Lock_t
 * 
lock
) {

39 
	`TODO_P
(
PROJECT_CLONE
, "Spin_Lock");

41 
	`asm
("mov %0, %%ebx": : "r"(
lock
):"%ebx");

42 
	}
}

44 
	$Spö_U∆ock
(
U£r_Spö_Lock_t
 * 
lock
) {

45 
	`TODO_P
(
PROJECT_CLONE
, "Spin_Unlock");

47 
	}
}

	@src/testing/bitset.c

11 
	~<gìkos/kas£π.h
>

12 
	~<gìkos/mÆloc.h
>

13 
	~<gìkos/bô£t.h
>

14 
	~<gìkos/°rög.h
>

15 
	~<gìkos/s¸ìn.h
>

17 
	#FIND_OFFSET_AND_BIT
(
bôPos
,
off£t
,
bô
) \

19 
off£t
 = 
bôPos
 / 8; \

20 
bô
 = 
bôPos
 % 8; \

21 } 0)

	)

23 
	#FIND_NUM_BYTES
(
tŸÆBôs
) \

24 ((
tŸÆBôs
 / 8Ë+ (—ŸÆBô†% 8 !0Ë? 1 : 0))

	)

26 *
	$Cª©e_Bô_Së
(
uöt_t
 
tŸÆBôs
) {

27 
ul⁄g_t
 
numByãs
;

28 *
bôSë
;

30 
numByãs
 = 
	`FIND_NUM_BYTES
(
tŸÆBôs
);

32 
bôSë
 = 
	`MÆloc
(
numByãs
);

33 i‡(
bôSë
 != 0)

34 
	`mem£t
(
bôSë
, '\0', 
numByãs
);

36  
bôSë
;

37 
	}
}

39 
	$Së_Bô
(*
bôSë
, 
uöt_t
 
bôPos
) {

40 
ul⁄g_t
 
off£t
, 
bô
;

42 
	`FIND_OFFSET_AND_BIT
(
bôPos
, 
off£t
, 
bô
);

43 ((
uch¨_t
 *Ë
bôSë
)[
off£t
] |(1 << 
bô
);

44 
	}
}

46 
	$CÀ¨_Bô
(*
bôSë
, 
uöt_t
 
bôPos
) {

47 
ul⁄g_t
 
off£t
, 
bô
;

49 
	`FIND_OFFSET_AND_BIT
(
bôPos
, 
off£t
, 
bô
);

50 ((
uch¨_t
 *Ë
bôSë
)[
off£t
] &~(1 << 
bô
);

51 
	}
}

53 
boﬁ
 
	$Is_Bô_Së
(*
bôSë
, 
uöt_t
 
bôPos
) {

54 
ul⁄g_t
 
off£t
, 
bô
;

56 
	`FIND_OFFSET_AND_BIT
(
bôPos
, 
off£t
, 
bô
);

57  (((
uch¨_t
 *Ë
bôSë
)[
off£t
] & (1 << 
bô
)) != 0;

58 
	}
}

60 
	$Föd_Fú°_Fªe_Bô
(*
bôSë
, 
ul⁄g_t
 
tŸÆBôs
) {

61 
uöt_t
 
numByãs
 = 
	`FIND_NUM_BYTES
(
tŸÆBôs
);

62 
ul⁄g_t
 
off£t
;

63 
uch¨_t
 *
bôs
 = (uch¨_à*Ë
bôSë
;

65 
off£t
 = 0; off£à< 
numByãs
; ++offset) {

66 i‡(
bôs
[
off£t
] != 0xff) {

67 
uöt_t
 
bô
;

68 
bô
 = 0; bit < 8; ++bit) {

69 i‡((
bôs
[
off£t
] & (1 << 
bô
)) == 0)

70  (
off£t
 * 8Ë+ 
bô
;

72 
	`KASSERT
(
Ál£
);

77 
	}
}

82 
	$Föd_Fú°_N_Fªe
(*
bôSë
, 
uöt_t
 
runLígth
, 
ul⁄g_t
 
tŸÆBôs
) {

83 
uöt_t
 
i
, 
j
;

85 
i
 = 0; i < 
tŸÆBôs
 - 
runLígth
; i++) {

86 i‡(!
	`Is_Bô_Së
(
bôSë
, 
i
)) {

87 
j
 = 1; j < 
runLígth
; j++) {

88 i‡(
	`Is_Bô_Së
(
bôSë
, 
i
 + 
j
)) {

92 i‡(
j
 =
runLígth
) {

93  
i
;

98 
	}
}

100 
	$De°roy_Bô_Së
(*
bôSë
) {

101 
	`Fªe
(
bôSë
);

102 
	}
}

	@src/testing/bufcache.c

10 
	~<gìkos/î∫o.h
>

11 
	~<gìkos/kas£π.h
>

12 
	~<gìkos/mem.h
>

13 
	~<gìkos/mÆloc.h
>

14 
	~<gìkos/blockdev.h
>

15 
	~<gìkos/bufˇche.h
>

20 
	#FS_BUFFER_CACHE_MAX_BLOCKS
 128

	)

26 
	gbufCacheDebug
 = 0;

27 
	#Debug
(
¨gs
...Ëi‡(
bufCacheDebug
Ë
	`Pröt
◊rgs)

	)

30 
	gnoEvi˘
 = 0;

36 
uöt_t
 
	$Gë_Num_Se˘‹s_Pî_FS_Block
(
FS_Buf„r_Cache
 *
ˇche
) {

37  (
ˇche
->
fsBlockSize
 / 
SECTOR_SIZE
);

38 
	}
}

43 
Do_Buf„r_IO
(
FS_Buf„r_Cache
 *
ˇche
, 
FS_Buf„r
 *
buf
,

44 (*
IO_Func
Ë(
Block_Devi˚
 * 
dev
,

45 
blockNum
, *
buf
)) {

46 
uöt_t
 
off£t
;

47 
£˘‹Cou¡
 = 0;

48 
blockNum
 = 
buf
->
fsBlockNum
 * 
	`Gë_Num_Se˘‹s_Pî_FS_Block
(
ˇche
);

49 *
±r
 = (*)
buf
->
d©a
;

51 
off£t
 = 0; off£à< 
ˇche
->
fsBlockSize
; off£à+
SECTOR_SIZE
) {

52 
rc
 = 
	`IO_Func
(
ˇche
->
dev
, 
blockNum
, 
±r
 + 
off£t
);

53 i‡(
rc
 != 0)

54  
rc
;

55 ++
£˘‹Cou¡
;

56 ++
blockNum
;

58 
	`KASSERT
(
off£t
 =
ˇche
->
fsBlockSize
);

59 
	`KASSERT
(
£˘‹Cou¡
 =
	`Gë_Num_Se˘‹s_Pî_FS_Block
(
ˇche
));

62 
	}
}

67 
	$Sync_Buf„r
(
FS_Buf„r_Cache
 *
ˇche
, 
FS_Buf„r
 *
buf
) {

68 
rc
 = 0;

70 
	`KASSERT
(
	`IS_HELD
(&
ˇche
->
lock
));

72 i‡(
buf
->
Êags
 & 
FS_BUFFER_DIRTY
) {

73 i‡((
rc
 = 
	`Do_Buf„r_IO
(
ˇche
, 
buf
, 
Block_Wrôe
)) == 0)

74 
buf
->
Êags
 &~(
FS_BUFFER_DIRTY
);

77  
rc
;

78 
	}
}

84 
	$Move_To_Fr⁄t
(
FS_Buf„r_Cache
 *
ˇche
,

85 
FS_Buf„r
 *
buf
) {

86 
	`Remove_From_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
, 
buf
);

87 
	`Add_To_Fr⁄t_Of_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
, 
buf
);

88 
	}
}

94 
	$Gë_Buf„r
(
FS_Buf„r_Cache
 *
ˇche
, 
ul⁄g_t
 
fsBlockNum
,

95 
FS_Buf„r
 **
pBuf
) {

96 
FS_Buf„r
 *
buf
, *
Ãu
 = 0;

97 
rc
;

99 
	`Debug
("Reque° block %lu\n", 
fsBlockNum
);

101 
	`KASSERT
(
	`IS_HELD
(&
ˇche
->
lock
));

108 
buf
 = 
	`Gë_Fr⁄t_Of_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
);

109 
buf
 != 0) {

110 i‡(
buf
->
fsBlockNum
 == fsBlockNum) {

112 
buf
->
Êags
 & 
FS_BUFFER_INUSE
) {

113 
	`Debug
("Waôög f‹ block %lu\n", 
fsBlockNum
);

114 
	`C⁄d_Waô
(&
ˇche
->
c⁄d
, &ˇche->
lock
);

116 
d⁄e
;

120 i‡(!(
buf
->
Êags
 & 
FS_BUFFER_INUSE
))

121 
Ãu
 = 
buf
;

123 
buf
 = 
	`Gë_Next_In_FS_Buf„r_Li°
(buf);

130 i‡(
ˇche
->
numCached
 < 
FS_BUFFER_CACHE_MAX_BLOCKS
) {

131 
buf
 = (
FS_Buf„r
 *)
	`MÆloc
((*buf));

132 i‡(
buf
 != 0) {

133 
buf
->
d©a
 = 
	`AŒoc_Page
();

134 i‡(
buf
->
d©a
 == 0)

135 
	`Fªe
(
buf
);

138 
buf
->
fsBlockNum
 = fsBlockNum;

139 
buf
->
Êags
 = 0;

140 
	`Add_To_Fr⁄t_Of_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
, 
buf
);

141 ++
ˇche
->
numCached
;

142 
ªadAndAcquúe
;

151 i‡(
Ãu
 == 0)

152  
ENOMEM
;

154 
	`KASSERT
(!
noEvi˘
);

157 i‡((
rc
 = 
	`Sync_Buf„r
(
ˇche
, 
Ãu
)) != 0)

158  
rc
;

161 
buf
 = 
Ãu
;

162 
buf
->
Êags
 = 0;

163 
buf
->
fsBlockNum
 = fsBlockNum;

165 
	`Move_To_Fr⁄t
(
ˇche
, 
buf
);

167 
ªadAndAcquúe
:

173 
	`KASSERT
(!(
buf
->
Êags
 & 
FS_BUFFER_DIRTY
));

174 
	`KASSERT
(
	`Gë_Fr⁄t_Of_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
Ë=
buf
);

177 i‡((
rc
 = 
	`Do_Buf„r_IO
(
ˇche
, 
buf
, 
Block_Ród
)) != 0)

178  
rc
;

180 
d⁄e
:

182 
buf
->
Êags
 |
FS_BUFFER_INUSE
;

185 
	`Debug
("Acquúed block %lu\n", 
fsBlockNum
);

186 *
pBuf
 = 
buf
;

188 
	}
}

193 
	$Sync_Cache
(
FS_Buf„r_Cache
 *
ˇche
) {

194 
rc
 = 0;

195 
FS_Buf„r
 *
buf
;

197 
	`KASSERT
(
	`IS_HELD
(&
ˇche
->
lock
));

199 
buf
 = 
	`Gë_Fr⁄t_Of_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
);

200 
buf
 != 0) {

201 i‡((
rc
 = 
	`Sync_Buf„r
(
ˇche
, 
buf
)) != 0)

203 
buf
 = 
	`Gë_Next_In_FS_Buf„r_Li°
(buf);

206  
rc
;

207 
	}
}

212 
	$Fªe_Buf„r
(
FS_Buf„r
 *
buf
) {

213 
	`KASSERT
(!(
buf
->
Êags
 & (
FS_BUFFER_DIRTY
 | 
FS_BUFFER_INUSE
)));

214 
	`Fªe_Page
(
buf
->
d©a
);

215 
	`Fªe
(
buf
);

216 
	}
}

225 
FS_Buf„r_Cache
 *
	$Cª©e_FS_Buf„r_Cache
(
Block_Devi˚
 *
dev
,

226 
uöt_t
 
fsBlockSize
) {

227 
FS_Buf„r_Cache
 *
ˇche
;

229 
	`KASSERT
(
dev
 != 0);

230 
	`KASSERT
(
dev
->
öU£
);

236 
	`KASSERT
(
fsBlockSize
 <
PAGE_SIZE
);

238 
ˇche
 = (
FS_Buf„r_Cache
 *)
	`MÆloc
((*cache));

239 i‡(
ˇche
 == 0)

242 
ˇche
->
dev
 = dev;

243 
ˇche
->
fsBlockSize
 = fsBlockSize;

244 
ˇche
->
numCached
 = 0;

245 
	`CÀ¨_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
);

246 
	`Muãx_Inô
(&
ˇche
->
lock
);

247 
	`C⁄d_Inô
(&
ˇche
->
c⁄d
);

249  
ˇche
;

250 
	}
}

256 
	$Sync_FS_Buf„r_Cache
(
FS_Buf„r_Cache
 *
ˇche
) {

257 
rc
;

259 
	`Muãx_Lock
(&
ˇche
->
lock
);

260 
rc
 = 
	`Sync_Cache
(
ˇche
);

261 
	`Muãx_U∆ock
(&
ˇche
->
lock
);

263  
rc
;

264 
	}
}

271 
	$De°roy_FS_Buf„r_Cache
(
FS_Buf„r_Cache
 *
ˇche
) {

272 
rc
;

273 
FS_Buf„r
 *
buf
;

275 
	`Muãx_Lock
(&
ˇche
->
lock
);

278 
rc
 = 
	`Sync_Cache
(
ˇche
);

281 
buf
 = 
	`Gë_Fr⁄t_Of_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
);

282 
buf
 != 0) {

283 
FS_Buf„r
 *
√xt
 = 
	`Gë_Next_In_FS_Buf„r_Li°
(
buf
);

284 
	`Fªe_Buf„r
(
buf
);

285 
buf
 = 
√xt
;

287 
	`CÀ¨_FS_Buf„r_Li°
(&
ˇche
->
buf„rLi°
);

289 
	`Muãx_U∆ock
(&
ˇche
->
lock
);

292 
	`Fªe
(
ˇche
);

294  
rc
;

295 
	}
}

300 
	$Gë_FS_Buf„r
(
FS_Buf„r_Cache
 *
ˇche
, 
ul⁄g_t
 
fsBlockNum
,

301 
FS_Buf„r
 **
pBuf
) {

302 
rc
;

304 
	`Muãx_Lock
(&
ˇche
->
lock
);

305 
rc
 = 
	`Gë_Buf„r
(
ˇche
, 
fsBlockNum
, 
pBuf
);

306 
	`Muãx_U∆ock
(&
ˇche
->
lock
);

308  
rc
;

309 
	}
}

314 
	$Modify_FS_Buf„r
(
FS_Buf„r_Cache
 *
ˇche
, 
FS_Buf„r
 *
buf
) {

315 
	`KASSERT
(
buf
->
Êags
 & 
FS_BUFFER_INUSE
);

316 
buf
->
Êags
 |
FS_BUFFER_DIRTY
;

317 
	}
}

323 
	$Sync_FS_Buf„r
(
FS_Buf„r_Cache
 *
ˇche
, 
FS_Buf„r
 *
buf
) {

324 
rc
;

326 
	`KASSERT
(
buf
->
Êags
 & 
FS_BUFFER_INUSE
);

328 
	`Muãx_Lock
(&
ˇche
->
lock
);

329 
rc
 = 
	`Sync_Buf„r
(
ˇche
, 
buf
);

330 
	`Muãx_U∆ock
(&
ˇche
->
lock
);

332  
rc
;

333 
	}
}

338 
	$Rñó£_FS_Buf„r
(
FS_Buf„r_Cache
 *
ˇche
, 
FS_Buf„r
 *
buf
) {

339 
rc
 = 0;

341 
	`KASSERT
(
buf
->
Êags
 & 
FS_BUFFER_INUSE
);

343 
	`Muãx_Lock
(&
ˇche
->
lock
);

350 i‡(
rc
 == 0) {

351 
buf
->
Êags
 &~(
FS_BUFFER_INUSE
);

352 
	`C⁄d_Brﬂdˇ°
(&
ˇche
->
c⁄d
);

354 
	`Debug
("Rñó£d block %lu\n", 
buf
->
fsBlockNum
);

356 
	`Muãx_U∆ock
(&
ˇche
->
lock
);

358  
rc
;

359 
	}
}

361 
	$my_memcmp
(c⁄° *
s1_
, c⁄° *
s2_
, 
size_t
 
n
) {

362 c⁄° sig√d *
s1
 = 
s1_
, *
s2
 = 
s2_
;

364 ; 
n
 > 0;Ç--) {

365 
cmp
 = *
s1
 - *
s2
;

366 i‡(
cmp
 != 0)

367  
cmp
;

368 ++
s1
;

369 ++
s2
;

373 
	}
}

375 
boﬁ
 
	$vîify_˛ó∆öess_of_˛ón_buf„r
(
FS_Buf„r_Cache
 * 
ˇche
,

376 
FS_Buf„r
 * 
buf
) {

377 
FS_Buf„r
 
du≥_buf„r
;

378 i‡(
buf
->
Êags
 & 
FS_BUFFER_DIRTY
) {

381 
du≥_buf„r
.
d©a
 = 
	`MÆloc
(
ˇche
->
fsBlockSize
);

382 i‡(
du≥_buf„r
.
d©a
 !
NULL
) {

383 
du≥_buf„r
.
fsBlockNum
 = 
buf
->fsBlockNum;

385 
	`Do_Buf„r_IO
(
ˇche
, &
du≥_buf„r
, 
Block_Ród
);

386 i‡(
	`my_memcmp
(
buf
->
d©a
, 
du≥_buf„r
.d©a, 
ˇche
->
fsBlockSize
) ==

388 
	`Fªe
(
du≥_buf„r
.
d©a
);

391 
	`Fªe
(
du≥_buf„r
.
d©a
);

400 
	}
}

	@src/testing/dump-image.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<°dlib.h
>

4 
	~<°rögs.h
>

5 
	~<°rög.h
>

6 
	~<f˙é.h
>

7 
	~<˘y≥.h
>

8 
	~<as£π.h
>

9 
	~<î∫o.h
>

11 
	~"gfs2.h
"

13 
	~<gìkos/vfs.h
>

14 
	~<gìkos/blockdev.h
>

15 
	~<gìkos/bô£t.h
>

18 
	gGFS2_In°™˚
;

19 
gfs2_öode
 *
˛⁄e_öode_f‹_öum
(
GFS2_In°™˚
 *
ö°™˚
,

20 
gfs2_öodíum
 
öum
);

21 
ªad_öto_buf„r
(
GFS2_In°™˚
 *
ö°™˚
,

22 c⁄° 
gfs2_öode
 *
öode
,

23 
begö_off£t
,

24 
íd_off£t
, *
buf„r
);

27 
gfs2_dúít
 *
	$gfs2_make_dúít
(
gfs2_öodíum
 
öum
,

28 c⁄° *
«me
)

29 
	`__©åibuã__
 ((
unu£d
));

30 
gfs2_dúít
 *
	$gfs2_make_dúít
(
gfs2_öodíum
 
öum
,

31 c⁄° *
«me
) {

32 
gfs2_dúít
 *
de
 =

33 
	`mÆloc
((
gfs2_dúít
Ë+ 
	`°æí
(
«me
) + 3);

34 
	`as£π
(
de
);

35 
de
->
öum
 = inum;

36 
de
->
«me_Àngth
 = 
	`°æí
(
«me
);

37 
	`mem˝y
(
de
->
«me
,Çame, de->
«me_Àngth
);

38 
de
->
íåy_Àngth
 = de->
«me_Àngth
 + 2;

39 
de
->
íåy_Àngth
 & 0x3) {

40 
de
->
íåy_Àngth
++;

42  
de
;

43 
	}
}

45 
my_size_block_›
(*
block_buf„r
, 
gfs2_blocknum
 
num
,

46 
blocksize
,

47 (*
›
Ë(
Block_Devi˚
 * 
dev
, 
blockNum
,

48 *
buf
)) {

49 
£˘‹s_≥r_block
 = 
blocksize
 / 512;

50 
off£t
 = 0;

51 
ªad_£˘‹
;

52 
ªad_£˘‹
 = 
num
 * 
£˘‹s_≥r_block
, 
off£t
 = 0;

53 
ªad_£˘‹
 < (
num
 + 1Ë* 
£˘‹s_≥r_block
;

54 
ªad_£˘‹
++, 
off£t
 += 512) {

55 
	`›
(
NULL
, 
ªad_£˘‹
, &
block_buf„r
[
off£t
]);

57 
	}
}

58 
	$my_size_block_ªadî
(*
block_buf„r
, 
gfs2_blocknum
 
num
,

59 
blocksize
) {

60 
	`my_size_block_›
(
block_buf„r
, 
num
, 
blocksize
, 
Block_Ród
);

61 
	}
}

62 
	$my_size_block_wrôî
(*
block_buf„r
, 
gfs2_blocknum
 
num
,

63 
blocksize
) {

64 
	`my_size_block_›
(
block_buf„r
, 
num
, 
blocksize
, 
Block_Wrôe
);

65 
	}
}

67 *
	gö_u£_bôs
;

68 
Fûesy°em_Ops
 *
gfs2_›s
;

69 
£tup_devi˚_mm≠
(c⁄° *
fûíame
, 
blocksize
, 
∑ges
);

71 c⁄° *
	$°rögify_rc
(
rc
) {

72 
îrbuf
[128];

73 i‡(
rc
 == 0) {

76 
	`•rötf
(
îrbuf
, "%d", 
rc
);

77  
îrbuf
;

79 
	}
}

81 
	$ªcursive_dump
(
Mou¡_Poöt
 *
mou¡_poöt
, c⁄° *
roŸ_∑th
) {

82 
Fûe
 *
dúe˘‹y
, *
ªÆfûe
;

83 
rc
, 
i
;

85 
dúe˘‹y
 = 
NULL
;

86 
rc
 = (
mou¡_poöt
->
›s
->
O≥n_Dúe˘‹y
Ë(mou¡_poöt, 
roŸ_∑th
,

87 &
dúe˘‹y
);

88 
	`¥ötf
("dú›í %s: %s\n", 
roŸ_∑th
, 
	`°rögify_rc
(
rc
));

89 i‡(
rc
 < 0)

90 
	`exô
(
EXIT_FAILURE
);

101 
VFS_Dú_E¡ry
 
íåy
;

102 
VFS_Fûe_Sèt
 
°©
;

110 
ªÆ«me
[2048];

111 
i
 = 1;

112 (
rc
 =

113 (
dúe˘‹y
->
›s
->
Ród_E¡ry
) (directory,

114 &
íåy
)Ë!
VFS_NO_MORE_DIR_ENTRIES
;

115 
i
++) {

116 
	`¥ötf
("ªadíà%s: %s\n", 
roŸ_∑th
, 
	`°rögify_rc
(
rc
));

117 i‡(
rc
 < 0)

118 
	`exô
(
EXIT_FAILURE
);

119 
	`¥ötf
("íåy %d: %s\n", 
i
, 
íåy
.
«me
);

121 
	`°r˝y
(
ªÆ«me
, 
roŸ_∑th
);

122 i‡(
roŸ_∑th
[
	`°æí
(root_path) - 1] != '/') {

123 
	`°rˇt
(
ªÆ«me
, "/");

125 
	`°rˇt
(
ªÆ«me
, 
íåy
.
«me
);

126 
rc
 = (
mou¡_poöt
->
›s
->
Sèt
Ë(mou¡_poöt, 
ªÆ«me
, &
°©
);

127 
	`¥ötf
("°© %s: %d\n", 
ªÆ«me
, 
rc
);

129 i‡(
°©
.
isDúe˘‹y
) {

130 i‡(
	`°rcmp
(
íåy
.
«me
, ".") == 0) {

131 
	`¥ötf
("isÅhis directory\n");

133 i‡(
dúe˘‹y
->
fûePos
 != 8) {

134 
¥ötf


136 
dúe˘‹y
->
fûePos
);

138 } i‡(
	`°rcmp
(
íåy
.
«me
, "..") == 0) {

139 
	`¥ötf
("isÅheÖarent directory\n");

141 
	`¥ötf
("isánother directory;Åraversing.\n");

142 
	`ªcursive_dump
(
mou¡_poöt
, 
ªÆ«me
);

144 } i‡(
	`°rcmp
(
íåy
.
«me
, ".") == 0) {

146 
¥ötf


148 
ªÆ«me
);

149 } i‡(
	`°rcmp
(
íåy
.
«me
, "..") == 0) {

151 
¥ötf


153 
ªÆ«me
);

155 
	`¥ötf
("isá file, opening\n");

156 
rc
 = (
mou¡_poöt
->
›s
->
O≥n
Ë(mou¡_poöt, 
ªÆ«me
, 
O_READ
,

157 &
ªÆfûe
);

158 
	`¥ötf
("›í %s: %d\n", 
ªÆ«me
, 
rc
);

160 i‡(
rc
 > 0) {

162 
	#mö
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

163 
	#ch¨s_≥r_löe
 24

	)

164 
rc
 = 1;

165 
rc
 > 0) {

166 
buf„r
[
ch¨s_≥r_löe
];

167 
rc
 = (
ªÆfûe
->
›s
->
Ród
Ë‘ólfûe, 
buf„r
,

168 
ch¨s_≥r_löe
);

169 
ch
;

170 
ch
 = 0; ch < 
	`mö
(
ch¨s_≥r_löe
, 
rc
); ch++) {

171 
	`¥ötf
("%02x ", 
buf„r
[
ch
]);

173 ; 
ch
 < 
ch¨s_≥r_löe
; ch++) {

174 
	`¥ötf
(" ");

176 
ch
 = 0; ch < 
	`mö
(
ch¨s_≥r_löe
, 
rc
); ch++) {

177 i‡(
	`i•röt
(
buf„r
[
ch
])) {

178 
	`¥ötf
("%c", 
buf„r
[
ch
]);

180 
	`¥ötf
(".");

183 
	`¥ötf
("\n");

187 
	`as£π
(
dúe˘‹y
);

188 i‡(
dúe˘‹y
->
fûePos
 + 8 > dúe˘‹y->
ídPos
 &&

189 
dúe˘‹y
->
fûePos
 !dúe˘‹y->
ídPos
) {

190 
¥ötf


192 
dúe˘‹y
->
fûePos
, dúe˘‹y->
ídPos
);

193 
	`exô
(
EXIT_FAILURE
);

196  
i
 - 1;

197 
	}
}

200 
	$maö
(
¨gc
, c⁄° *
¨gv
[]) {

201 
i
;

203 
gfs2_su≥rblock
 
the_su≥r
;

204 
gfs2_su≥rblock
 *
the_su≥r_ª∂iˇ
;

205 
Block_Devi˚
 
Áke_devi˚
;

206 
Mou¡_Poöt
 
mou¡_poöt
;

207 
FILE
 *
quick_ªad
;

208 
block_buf„r
[4096];

209 
rc
;

211 i‡(
¨gc
 < 2) {

212 
	`¥ötf
("usage: dump-image diskimage\n");

213 
	`exô
(
EXIT_FAILURE
);

216 
quick_ªad
 = 
	`f›í
(
¨gv
[1], "r");

217 i‡(
quick_ªad
 =
NULL
) {

218 
	`¥ötf
("u«bÀÅÿ›í %s, %s\n", 
¨gv
[1], 
	`°ªº‹
(
î∫o
));

219 
	`exô
(
EXIT_FAILURE
);

221 
rc
 = 
	`f£ek
(
quick_ªad
, 1024, 
SEEK_SET
);

222 i‡(
rc
 != 0) {

223 
	`¥ötf
("f£ekÅÿthêsu≥rblock faûed i¿%s, %s\n", 
¨gv
[1],

224 
	`°ªº‹
(
î∫o
));

225 
	`exô
(
EXIT_FAILURE
);

228 
rc
 = 
	`‰ód
(&
the_su≥r
, —he_su≥r), 1, 
quick_ªad
);

229 i‡(
rc
 <= 0) {

230 
	`¥ötf
("su≥rblockÑód faûed i¿%s, %s\n", 
¨gv
[1],

231 
	`°ªº‹
(
î∫o
));

232 
	`exô
(
EXIT_FAILURE
);

234 
	`f˛o£
(
quick_ªad
);

236 
	`¥ötf
("block_size: %d\n", 
the_su≥r
.
block_size
);

238 
	`£tup_devi˚_mm≠
(
¨gv
[1], 
the_su≥r
.
block_size
,

239 
the_su≥r
.
blocks_≥r_disk
);

242 
	`¥ötf
("superblock: **********************************\n");

243 
	`¥ötf
(" gfs2_magic: 0x%x %s\n", 
the_su≥r
.
gfs2_magic
, (the_super.gfs2_magic == 0x47465332) ? "good" : "*FAIL*");

244 
	`¥ötf
(" gfs2_vîsi⁄: 0x%x %s\n", 
the_su≥r
.
gfs2_vîsi⁄
, (the_super.gfs2_version == 0x0100) ? "good" : "*FAIL*");

245 
	`¥ötf
(" block_size: %u\n", 
the_su≥r
.
block_size
);

246 
	`¥ötf
(" blocks_≥r_disk: %u\n", 
the_su≥r
.
blocks_≥r_disk
);

247 
	`¥ötf
(" block_wôh_öode_zîo: %u\n", 
the_su≥r
.
block_wôh_öode_zîo
);

248 
	`¥ötf
("Çumbî_of_öodes: %u\n", 
the_su≥r
.
numbî_of_öodes
);

249 
	`¥ötf
("Ñeplica_superblock_addresses[0]: %u\n",

250 
the_su≥r
.
ª∂iˇ_su≥rblock_addªs£s
[0]);

252 i‡(
the_su≥r
.
block_size
 >= 512 &&

253 
the_su≥r
.
ª∂iˇ_su≥rblock_addªs£s
[0] > 0) {

255 
	`Block_Ród
(
NULL
,

256 
the_su≥r
.
ª∂iˇ_su≥rblock_addªs£s
[0] *

257 (
the_su≥r
.
block_size
 / 512), 
block_buf„r
);

258 
the_su≥r_ª∂iˇ
 = (
gfs2_su≥rblock
 *)
block_buf„r
;

260 
	`¥ötf
("superblockÑeplica: **********************************\n");

261 
	`¥ötf
(" gfs2_magic: 0x%x %s\n", 
the_su≥r_ª∂iˇ
->
gfs2_magic
, (the_super_replica->gfs2_magic == 0x47465332) ? "good" : "*FAIL*");

262 
	`¥ötf
(" gfs2_vîsi⁄: 0x%x %s\n", 
the_su≥r_ª∂iˇ
->
gfs2_vîsi⁄
, (the_super_replica->gfs2_version == 0x0100) ? "good" : "*FAIL*");

264 
¥ötf


268 i‡(
the_su≥r
.
numbî_of_öodes
 < 2) {

269 
	`¥ötf
("ERROR: unableÅo continue. file system has only %d inodes",

270 
the_su≥r
.
numbî_of_öodes
);

271 
	`exô
(
EXIT_FAILURE
);

274 
	`Inô_GFS2
();

277 
	`mem£t
(&
Áke_devi˚
, 0, (fake_device));

278 
mou¡_poöt
.
dev
 = &
Áke_devi˚
;

279 
mou¡_poöt
.
∑thPªfix
 = (*)"";

280 
mou¡_poöt
.
fsD©a
 = 
NULL
;

281 
mou¡_poöt
.
›s
 = 
NULL
;

282 
Áke_devi˚
.
öU£
 = 1;

284 
	`KASSERT
(
gfs2_›s
);

286 
rc
 = (
gfs2_›s
->
Mou¡
Ë(&
mou¡_poöt
);

287 
	`¥ötf
("mou¡ög: %d %p\n", 
rc
, 
mou¡_poöt
.
fsD©a
);

288 i‡(
rc
 < 0)

289 
	`exô
(
EXIT_FAILURE
);

298 
dús
 = 
	`ªcursive_dump
(&
mou¡_poöt
, "/");

300 
gfs2_öode
 *
öode
 = 
	`˛⁄e_öode_f‹_öum
(
mou¡_poöt
.
fsD©a
, 2);

301 i‡(
öode
 =
NULL
) {

302 
	`¥ötf
("no free blocks inode?\n");

303 
	`exô
(
EXIT_FAILURE
);

305 i‡(
öode
->
öum_£lf
 != 2) {

306 
	`¥ötf
("‰ì block†öodêha†öodênumbî %d?\n", 
öode
->
öum_£lf
);

307 
	`exô
(
EXIT_FAILURE
);

309 
ex≥˘ed_size
 =

310 (
the_su≥r
.
blocks_≥r_disk
 & 0x7) ? (the_super.blocks_per_disk / 8 +

311 1Ë: (
the_su≥r
.
blocks_≥r_disk
 /

313 i‡(
ex≥˘ed_size
 !
öode
->
size
) {

314 
	`¥ötf
("ERROR: bad size ofÅhe free blocks bitmap: %dÉxpecting %d",

315 
öode
->
size
, 
ex≥˘ed_size
);

317 
	`¥ötf
("Free blocks bitmap size is correct\n");

319 *
buf
 = 
	`mÆloc
(
öode
->
size
);

320 
	`ªad_öto_buf„r
(
mou¡_poöt
.
fsD©a
, 
öode
, 0, inode->
size
, 
buf
);

321 
	`¥ötf
("Free: ");

322 
i
 = 0; i < 
öode
->
size
; i++)

323 
	`¥ötf
("%02x", ((*)
buf
)[
i
]);

324 
	`¥ötf
("\n");

328 i‡(
dús
 == 0) {

329 
	`¥ötf
("Root directory busted or missingÉntries\n");

330 
	`exô
(
EXIT_FAILURE
);

333 
	`exô
(
EXIT_SUCCESS
);

334 
	}
}

336 
	$Gë_CPU_ID
() {

338 
	}
}

340 
Kî√l_Thªad
 *
	gg_cuºítThªads
[16];

342 
	$Spö_Lock
(
Spö_Lock_t
 * 
dummy
) {

344 
	}
}

345 
	$Spö_U∆ock
(
Spö_Lock_t
 * 
dummy
) {

347 
	}
}

	@src/testing/fake-blockdev.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<°dlib.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<sys/mm™.h
>

7 
	~<f˙é.h
>

8 
	~<°rög.h
>

9 
	~<°d¨g.h
>

10 
	~<î∫o.h
>

11 
	~<as£π.h
>

13 #i‚de‡
GEEKOS


14 
	#GEEKOS


	)

17 
	~<gìkos/s¸ìn.h
>

18 
	~<gìkos/synch.h
>

19 
	~<gìkos/vfs.h
>

22 *
	$AŒoc_Page
() {

23  
	`mÆloc
(4096);

24 
	}
}

25 
	$Fªe_Page
(*
pg
) {

26 
	`‰ì
(
pg
);

27 
	}
}

28 *
	$MÆloc
(
size_t
 
size
) {

29  (
	`mÆloc
(
size
));

30 
	}
}

31 
	$Fªe
(*
m
) {

32 
	`‰ì
(
m
);

33 
	}
}

35 
	$Pröt
(c⁄° *
fmt
, ...) {

36 
va_li°
 
¨gs
;

37 
	`va_°¨t
(
¨gs
, 
fmt
);

38 
	`v¥ötf
(
fmt
, 
¨gs
);

39 
	`va_íd
(
¨gs
);

40 
	}
}

42 
Kî√l_Thªad
 *
	gg_cuºítThªad
 = 
NULL
;

44 
Së_Cuºít_Aâr
(
©å
 
__©åibuã__
 ((
unu£d
))) {

55 
	$Muãx_Inô
(
Muãx
 *
muãx
) {

56 
muãx
->
°©e
 = 
MUTEX_UNLOCKED
;

57 
muãx
->
ow√r
 = (
Kî√l_Thªad
 *)
g_cuºítThªad
;

58 
	}
}

59 
	$Muãx_Lock
(
Muãx
 *
muãx
) {

60 
	`KASSERT
(
muãx
->
°©e
 =
MUTEX_UNLOCKED
);

61 
muãx
->
°©e
 = 
MUTEX_LOCKED
;

62 
	`KASSERT
(
muãx
->
ow√r
 =(
Kî√l_Thªad
 *)
g_cuºítThªad
);

63 
	}
}

64 
	$Muãx_U∆ock
(
Muãx
 *
muãx
) {

65 
	`KASSERT
(
muãx
->
°©e
 =
MUTEX_LOCKED
);

66 
muãx
->
°©e
 = 
MUTEX_UNLOCKED
;

67 
	`KASSERT
(
muãx
->
ow√r
 =(
Kî√l_Thªad
 *)
g_cuºítThªad
);

68 
	}
}

74 
	$C⁄d_Inô
(
C⁄dôi⁄
 *
c⁄d
) {

75 
c⁄d
 = cond;

76 
	}
}

77 
	$C⁄d_Waô
(
C⁄dôi⁄
 *
c⁄d
, 
Muãx
 *
muãx
) {

78 
c⁄d
 = cond;

79 
muãx
 = mutex;

80 
	}
}

81 
	$C⁄d_Sig«l
(
C⁄dôi⁄
 *
c⁄d
) {

82 
c⁄d
 = cond;

83 
	}
}

84 
	$C⁄d_Brﬂdˇ°
(
C⁄dôi⁄
 *
c⁄d
) {

85 
c⁄d
 = cond;

86 
	}
}

88 
	gdevi˚_fd
;

90 *
	gdevi˚_mm≠
;

91 
£tup_devi˚_mm≠
(*
fûíame
, 
blocksize


92 
__©åibuã__
 ((
unu£d
)), 
∑ges


93 
__©åibuã__
 ((
unu£d
))) {

94 i‡(
	gdevi˚_fd
 == 0) {

95 
devi˚_fd
 = 
›í
(
fûíame
, 
O_RDWR
);

96 i‡(
	gdevi˚_fd
 < 0) {

97 
Ârötf
(
°dîr
, "ÁûedÅÿ›í %s: %s", 
fûíame
,

98 
°ªº‹
(
î∫o
));

99 
exô
(
EXIT_FAILURE
);

110 
	#SECTOR_SIZE
 512

	)

111 
	gBlock_Devi˚
;

113 
Block_Wrôe
(
Block_Devi˚
 *
dev
 
__©åibuã__
 ((
unu£d
)),

114 
block_ödex
, *
block_d©a
) {

115 
as£π
(
block_d©a
);

120 
l£ek
(
devi˚_fd
, 
block_ödex
 * 
SECTOR_SIZE
, 
SEEK_SET
);

121 
as£π
(
wrôe
(
devi˚_fd
, 
block_d©a
, 
SECTOR_SIZE
) > 0);

126 
Block_Ród
(
Block_Devi˚
 *
dev
 
__©åibuã__
 ((
unu£d
)),

127 
block_ödex
, *
block_d©a
) {

130 
as£π
(
block_d©a
);

134 
l£ek
(
devi˚_fd
, 
block_ödex
 * 
SECTOR_SIZE
, 
SEEK_SET
);

135 
as£π
(
ªad
(
devi˚_fd
, 
block_d©a
, 
SECTOR_SIZE
) > 0);

140 
	$as£πi⁄_Áûed_ídÀss_lo›
() {

141 
	`ab‹t
();

142 
	}
}

144 
Fûe
 *
	$AŒoˇã_Fûe
(
Fûe_Ops
 *
›s
, 
fûePos
, 
ídPos
,

145 *
fsD©a
, 
mode
,

146 
Mou¡_Poöt
 *
mou¡Poöt
) {

147 
Fûe
 *
ªt
 = (Fûê*)
	`mÆloc
((File));

148 
ªt
->
›s
 = ops;

149 
ªt
->
fûePos
 = filePos;

150 
ªt
->
ídPos
 =ÉndPos;

151 
ªt
->
fsD©a
 = fsData;

152 
ªt
->
mode
 = mode;

153 
ªt
->
mou¡Poöt
 = mountPoint;

154  
ªt
;

155 
	}
}

157 
Fûesy°em_Ops
 *
	ggfs2_›s
;

159 
boﬁ
 
Regi°î_Fûesy°em
(c⁄° *
fsName


160 
__©åibuã__
 ((
unu£d
)),

161 
Fûesy°em_Ops
 *
fsOps
) {

162 
	ggfs2_›s
 = 
fsOps
;

	@src/testing/gfs2.c

11 
	~<limôs.h
>

12 
	~<gìkos/î∫o.h
>

13 
	~<gìkos/kas£π.h
>

14 
	~<gìkos/s¸ìn.h
>

15 
	~<gìkos/mÆloc.h
>

16 
	~<gìkos/°rög.h
>

17 
	~<gìkos/bô£t.h
>

18 
	~<gìkos/synch.h
>

19 
	~<gìkos/bufˇche.h
>

20 
	~<gìkos/gfs2.h
>

21 
	~<gìkos/¥oje˘s.h
>

35 
	$GFS2_FSèt
(
Fûe
 *
fûe
, 
VFS_Fûe_Sèt
 *
°©
) {

36 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem FStat operation");

38 
	}
}

43 
	$GFS2_Ród
(
Fûe
 *
fûe
, *
buf
, 
ul⁄g_t
 
numByãs
) {

44 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystemÑead operation");

46  
EUNSUPPORTED
;

47 
	}
}

52 
	$GFS2_Wrôe
(
Fûe
 *
fûe
, *
buf
, 
ul⁄g_t
 
numByãs
) {

53 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem write operation");

54  
EUNSUPPORTED
;

55 
	}
}

61 
	$GFS2_Sìk
(
Fûe
 *
fûe
, 
ul⁄g_t
 
pos
) {

62 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem seek operation");

63  
EUNSUPPORTED
;

64 
	}
}

69 
	$GFS2_Clo£
(
Fûe
 *
fûe
) {

70 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem close operation");

71  
EUNSUPPORTED
;

72 
	}
}

74  
Fûe_Ops
 
	gs_gfs2FûeOps
 = {

75 &
GFS2_FSèt
,

76 &
GFS2_Ród
,

77 &
GFS2_Wrôe
,

78 &
GFS2_Sìk
,

79 &
GFS2_Clo£
,

86 
	$GFS2_FSèt_Dúe˘‹y
(
Fûe
 *
dú
, 
VFS_Fûe_Sèt
 *
°©
) {

88 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem FStat directory operation");

90 
	}
}

95 
	$GFS2_Clo£_Dúe˘‹y
(
Fûe
 *
dú
) {

96 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem Close directory operation");

97  
EUNSUPPORTED
;

98 
	}
}

103 
	$GFS2_Ród_E¡ry
(
Fûe
 *
dú
, 
VFS_Dú_E¡ry
 *
íåy
) {

104 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem Read_Entry operation");

105  
EUNSUPPORTED
;

106 
	}
}

108  
Fûe_Ops
 
	gs_gfs2DúOps
 = {

109 &
GFS2_FSèt
,

113 &
GFS2_Clo£_Dúe˘‹y
,

114 &
GFS2_Ród_E¡ry
,

122 
	$GFS2_O≥n
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

123 
mode
, 
Fûe
 **
pFûe
) {

124 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem open operation");

125  
EUNSUPPORTED
;

126 
	}
}

131 
	$GFS2_Cª©e_Dúe˘‹y
(
Mou¡_Poöt
 *
mou¡Poöt
,

132 c⁄° *
∑th
) {

133 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem create directory operation");

134  
EUNSUPPORTED
;

135 
	}
}

140 
	$GFS2_O≥n_Dúe˘‹y
(
Mou¡_Poöt
 *
mou¡Poöt
,

141 c⁄° *
∑th
, 
Fûe
 **
pDú
) {

142 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem open directory operation");

143  
EUNSUPPORTED
;

144 
	}
}

149 
	$GFS2_Dñëe
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
) {

150 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem delete operation");

151  
EUNSUPPORTED
;

152 
	}
}

157 
	$GFS2_Sèt
(
Mou¡_Poöt
 *
mou¡Poöt
, c⁄° *
∑th
,

158 
VFS_Fûe_Sèt
 *
°©
) {

159 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem stat operation");

160  
EUNSUPPORTED
;

161 
	}
}

167 
	$GFS2_Sync
(
Mou¡_Poöt
 *
mou¡Poöt
) {

168 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem sync operation");

169  
EUNSUPPORTED
;

170 
	}
}

172 
	$GFS2_Disk_Pr›îtõs
(
Mou¡_Poöt
 *
mou¡Poöt
,

173 *
block_size
,

174 *
blocks_ö_disk
) {

175 
	`TODO_P
(
PROJECT_GFS2
,

177  
EUNSUPPORTED
;

178 
	}
}

180  
Mou¡_Poöt_Ops
 
	gs_gfs2Mou¡PoötOps
 = {

181 &
GFS2_O≥n
,

182 &
GFS2_Cª©e_Dúe˘‹y
,

183 &
GFS2_O≥n_Dúe˘‹y
,

184 &
GFS2_Sèt
,

185 &
GFS2_Sync
,

186 &
GFS2_Dñëe
,

189 &
GFS2_Disk_Pr›îtõs
,

192 
GFS2_F‹m©
(
Block_Devi˚
 *
blockDev
 
__©åibuã__
 ((
unu£d
))) {

193 
TODO_P
(
PROJECT_GFS2
,

195  
	gEUNSUPPORTED
;

198 
	$GFS2_Mou¡
(
Mou¡_Poöt
 *
mou¡Poöt
) {

199 
	`TODO_P
(
PROJECT_GFS2
, "GeekOS filesystem mount operation");

200  
EUNSUPPORTED
;

201 
	}
}

204 
Fûesy°em_Ops
 
	gs_gfs2Fûesy°emOps
 = {

205 &
GFS2_F‹m©
,

206 &
GFS2_Mou¡
,

213 
	$Inô_GFS2
() {

214 
	`Regi°î_Fûesy°em
("gfs2", &
s_gfs2Fûesy°emOps
);

215 
	}
}

	@src/testing/gfs2.h

1 #i‚de‡
GFS2_H


2 
	#GFS2_H


	)

4 
	~<gìkos/vfs.h
>

5 
	~<gìkos/fûeio.h
>

8 
	tgfs2_blocknum
;

11 
	tgfs2_öodíum
;

14 
	#GFS2_DIRECTORY
 1

	)

15 
	#GFS2_FILE
 2

	)

17 
	#GFS2_SUPERBLOCK_COPIES
 10

	)

18 
	#GFS2_DIRECT_BLOCKS
 4

	)

21 
	#GFS2_PTRS_PER_BLOCK
 (
GFS2_FS_BLOCK_SIZE
 / (
ul⁄g_t
))

	)

24 
	sgfs2_su≥rblock
 {

25 
	mgfs2_magic
;

26 
	mgfs2_vîsi⁄
;

27 
	mblock_size
;

28 
	mblocks_≥r_disk
;

29 
gfs2_blocknum
 
	mblock_wôh_öode_zîo
;

30 
	mnumbî_of_öodes
;

31 
gfs2_blocknum
 
	mª∂iˇ_su≥rblock_addªs£s
[
GFS2_SUPERBLOCK_COPIES
];

34 
	sgfs2_öode
 {

35 
gfs2_öodíum
 
	möum_£lf
;

37 
	msize
;

38 
	mty≥
;

39 
	mª„ªn˚_cou¡
;

40 
	mmode
;

42 
gfs2_blocknum
 
	mdúe˘_blocks
[
GFS2_DIRECT_BLOCKS
];

43 
gfs2_blocknum
 
	mödúe˘_block
;

46 
	sgfs2_dúít
 {

47 
gfs2_öodíum
 
	möum
;

48 
	míåy_Àngth
;

49 
	m«me_Àngth
;

50 
	m«me
[2];

53 
Inô_GFS2
();

	@src/testing/image-builder.c

1 
	~<gìkos/gfs2.h
>

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<°dlib.h
>

5 
	~<°rögs.h
>

6 
	~<°rög.h
>

7 
	~<f˙é.h
>

8 
	~<as£π.h
>

9 
	~<î∫o.h
>

10 
	~<m©h.h
>

12 
	#GEEKOS


	)

13 
	~<gìkos/vfs.h
>

14 
	~<gìkos/blockdev.h
>

15 
	~<gìkos/bô£t.h
>

17 
£tup_devi˚_mm≠
(c⁄° *
fûíame
, 
blocksize
, 
∑ges
);

18 
gfs2_blocknum
 
˛aim_√xt_‰ì_block
();

19 
gfs2_su≥rblock
 
	gthe_su≥r
;

22 
gfs2_dúít
 *
	$gfs2_make_dúít
(
gfs2_öodíum
 
öum
,

23 c⁄° *
«me
) {

24 
gfs2_dúít
 *
de
 =

25 
	`mÆloc
((
gfs2_dúít
Ë+ 
	`°æí
(
«me
) + 3);

26 
de
->
öum
 = inum;

27 
de
->
«me_Àngth
 = 
	`°æí
(
«me
);

28 
	`mem˝y
(
de
->
«me
,Çame, de->
«me_Àngth
);

29 
de
->
íåy_Àngth
 = de->
«me_Àngth
 + 2;

30 
de
->
íåy_Àngth
 & 0x3) {

31 
de
->
íåy_Àngth
++;

33  
de
;

34 
	}
}

36 
my_size_block_›
(*
block_buf„r
, 
gfs2_blocknum
 
num
,

37 
blocksize
,

38 (*
›
Ë(
Block_Devi˚
 * 
dev
, 
blockNum
,

39 *
buf
)) {

40 
£˘‹s_≥r_block
 = 
blocksize
 / 512;

41 
off£t
 = 0;

42 
ªad_£˘‹
;

43 
ªad_£˘‹
 = 
num
 * 
£˘‹s_≥r_block
, 
off£t
 = 0;

44 
ªad_£˘‹
 < (
num
 + 1Ë* 
£˘‹s_≥r_block
;

45 
ªad_£˘‹
++, 
off£t
 += 512) {

46 
	`›
(
NULL
, 
ªad_£˘‹
, &
block_buf„r
[
off£t
]);

48 
	}
}

49 
	$my_size_block_ªadî
(*
block_buf„r
, 
gfs2_blocknum
 
num
,

50 
blocksize
) {

51 
	`my_size_block_›
(
block_buf„r
, 
num
, 
blocksize
, 
Block_Ród
);

52 
	}
}

53 
	$my_size_block_wrôî
(*
block_buf„r
, 
gfs2_blocknum
 
num
,

54 
blocksize
) {

55 
	`my_size_block_›
(
block_buf„r
, 
num
, 
blocksize
, 
Block_Wrôe
);

56 
	}
}

58 
	$≠≥nd_to_fûe
(
gfs2_öode
 *
öode
, c⁄° *
buf„r
,

59 
buÊí
) {

60 *
block_buf„r
 = 
	`mÆloc
(
the_su≥r
.
block_size
);

61 
	`¥ötf
("åa˚:áµídÅÿfûêöodê%d buÊí %d\n", 
öode
->
öum_£lf
,

62 
buÊí
);

63 i‡(
öode
->
size
 == 0) {

64 i‡(
öode
->
dúe˘_blocks
[0] == 0) {

65 
öode
->
dúe˘_blocks
[0] = 
	`˛aim_√xt_‰ì_block
();

67 
	`bzîo
(
block_buf„r
, 
the_su≥r
.
block_size
);

69 
	`as£π
(
öode
->
size
 + 
buÊí
 < 
the_su≥r
.
block_size
);

70 
	`my_size_block_ªadî
(
block_buf„r
, 
öode
->
dúe˘_blocks
[0],

71 
the_su≥r
.
block_size
);

74 
	`mem˝y
(
block_buf„r
 + 
öode
->
size
, 
buf„r
, 
buÊí
);

76 
	`my_size_block_wrôî
(
block_buf„r
, 
öode
->
dúe˘_blocks
[0],

77 
the_su≥r
.
block_size
);

79 
öodes_≥r_block
 =

80 (
the_su≥r
.
block_size
 / (
gfs2_öode
));

81 
öode_block
 =

82 
öode
->
öum_£lf
 / 
öodes_≥r_block
 + 
the_su≥r
.
block_wôh_öode_zîo
;

83 
	`my_size_block_ªadî
(
block_buf„r
, 
öode_block
, 
the_su≥r
.
block_size
);

84 
öode
->
size
 +
buÊí
;

85 ((
gfs2_öode
 *)(
block_buf„r
))[
öode
->
öum_£lf
 %

86 
öodes_≥r_block
].
size
 =

87 
öode
->
size
;

88 ((
gfs2_öode
 *)(
block_buf„r
))[
öode
->
öum_£lf
 %

89 
öodes_≥r_block
].
dúe˘_blocks
[0] =

90 
öode
->
dúe˘_blocks
[0];

91 
	`¥ötf
("√w inodê%d sizê%d\n", 
öode
->
öum_£lf
, inode->
size
);

92 
	`my_size_block_wrôî
(
block_buf„r
, 
öode_block
, 
the_su≥r
.
block_size
);

95 
	`‰ì
(
block_buf„r
);

96 
	}
}

98 *
	gö_u£_bôs
;

100 
gfs2_blocknum
 
	$˛aim_√xt_‰ì_block
() {

101 
gfs2_blocknum
 
ªt
 =

102 
	`Föd_Fú°_Fªe_Bô
(
ö_u£_bôs
, 
the_su≥r
.
blocks_≥r_disk
);

103 
	`Së_Bô
(
ö_u£_bôs
, 
ªt
);

104  
ªt
;

105 
	}
}

107 
	$maö
(
¨gc
, c⁄° *
¨gv
[]) {

108 
i
, 
j
, 
d
;

109 
gfs2_öodíum
 
öum
;

111 i‡(
¨gc
 < 2) {

112 
	`¥ötf
("usage: image-builder blocksizeÇumblocks files-to-include\n");

113 
	`exô
(
EXIT_FAILURE
);

116 
the_su≥r
.
block_size
 = 
	`©oi
(
¨gv
[1]);

117 i‡(
the_su≥r
.
block_size
 != 512 &&

118 
the_su≥r
.
block_size
 != 1024 &&Åhe_super.block_size != 4096) {

119 
	`¥ötf
("unsuµ‹ãd blocksize: %s\n", 
¨gv
[1]);

120 
	`exô
(
EXIT_FAILURE
);

123 
the_su≥r
.
blocks_≥r_disk
 = 
	`©oi
(
¨gv
[2]);

124 i‡(
the_su≥r
.
blocks_≥r_disk
 < 10) {

125 
	`¥ötf
("unsuµ‹ãd blocks_≥r_disk: %s\n", 
¨gv
[2]);

126 
	`exô
(
EXIT_FAILURE
);

129 
ö_u£_bôs
 = 
	`Cª©e_Bô_Së
(
the_su≥r
.
blocks_≥r_disk
);

131 #ifde‡
INUSE_PARANOIA


132 
	`¥ötf
("in use bits dump\n");

133 
i
 = 0; i < 
the_su≥r
.
blocks_≥r_disk
; i++) {

134 
	`¥ötf
("%c", 
	`Is_Bô_Së
(
ö_u£_bôs
, 
i
) ? '!' : '.');

136 
	`¥ötf
("\n");

137 
	`¥ötf
("end in use bits dump\n");

140 
	`Së_Bô
(
ö_u£_bôs
, 0);

143 
the_su≥r
.
gfs2_magic
 = 0x47465332;

144 
the_su≥r
.
gfs2_vîsi⁄
 = 0x100;

146 
	`Së_Bô
(
ö_u£_bôs
, 0);

147 i‡(
the_su≥r
.
block_size
 == 512) {

148 
the_su≥r
.
block_wôh_öode_zîo
 = 3;

149 
	`Së_Bô
(
ö_u£_bôs
, 1);

150 
	`Së_Bô
(
ö_u£_bôs
, 2);

152 i‡(
the_su≥r
.
block_size
 == 1024) {

153 
	`Së_Bô
(
ö_u£_bôs
, 1);

154 
the_su≥r
.
block_wôh_öode_zîo
 = 2;

156 
the_su≥r
.
block_wôh_öode_zîo
 = 1;

159 
the_su≥r
.
ª∂iˇ_su≥rblock_addªs£s
[0] =Åhe_su≥r.
blocks_≥r_disk
 / 2;

160 
i
 = 1; i < 
GFS2_SUPERBLOCK_COPIES
; i++)

161 
the_su≥r
.
ª∂iˇ_su≥rblock_addªs£s
[
i
] = 0;

163 
num_öodes_2009
 =

164 
	`˚û
(()
the_su≥r
.
blocks_≥r_disk
 / 10.0);

165 
num_öode_blocks_2009
 =

166 
	`˚û
(()
num_öodes_2009
 * (
gfs2_öode
) /

167 ()
the_su≥r
.
block_size
);

168 
the_su≥r
.
numbî_of_öodes
 =

169 
num_öode_blocks_2009
 * 
the_su≥r
.
block_size
 /

170 (
gfs2_öode
);

175 
	`¥ötf
("%d blocks used by inodes -> %d inodes on disk\n",

176 
num_öode_blocks_2009
, 
the_su≥r
.
numbî_of_öodes
);

178 
roŸ_dúe˘‹y_block
 = 
num_öode_blocks_2009
 +

179 
the_su≥r
.
block_wôh_öode_zîo
;

181 
‰ì_bôm≠_block
 = 
roŸ_dúe˘‹y_block
 + 1;

182 
blocks_≥r_£˘‹
 = 
the_su≥r
.
block_size
 / 512;

184 
i
 = 0; i <
‰ì_bôm≠_block
; i++) {

185 
	`Së_Bô
(
ö_u£_bôs
, 
i
);

187 
	`Së_Bô
(
ö_u£_bôs
, 
the_su≥r
.
blocks_≥r_disk
 / 2);

189 
fûíame
[255];

191 
	`•rötf
(
fûíame
, "gfs-%dx%d.img", 
the_su≥r
.
block_size
,

192 
the_su≥r
.
blocks_≥r_disk
);

194 
fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_CREAT
, 0664);

195 
	`as£π
(
fd
 >= 0);

196 
	`as£π
(
l£ek


197 (
fd
, 
the_su≥r
.
block_size
 *Åhe_su≥r.
blocks_≥r_disk
 - 1,

198 
SEEK_SET
) > 0);

199 i‡(
	`wrôe
(
fd
, "\0", 1) <= 0) {

200 
	`Ârötf
(
°dîr
, "wrôêof‡thêíd faûed: %d %s", 
î∫o
,

201 
	`°ªº‹
(
î∫o
));

202 
	`exô
(
EXIT_FAILURE
);

204 
	`˛o£
(
fd
);

206 
	`£tup_devi˚_mm≠
(
fûíame
, 
the_su≥r
.
block_size
,

207 
the_su≥r
.
blocks_≥r_disk
);

210 
block512
[512];

212 
	`bzîo
(
block512
, 512);

213 
	`mem˝y
(
block512
, &
the_su≥r
, (
gfs2_su≥rblock
));

214 
	`Block_Wrôe
(
NULL
, 2, 
block512
);

215 
	`Block_Wrôe
(
NULL
,

216 
the_su≥r
.
blocks_≥r_disk
 / 2 * (the_su≥r.
block_size
 / 512),

217 
block512
);

219 
	`¥ötf
("wrote superblocks\n");

222 
i_£˘‹
;

223 
i_£˘‹
 = 0, 
öum
 = 0; inum < 
the_su≥r
.
numbî_of_öodes
;

224 
i_£˘‹
++) {

225 
	`bzîo
(
block512
, 512);

226 
j
 = 0;

227 
öum
 < (
i_£˘‹
 + 1Ë* 512 / (
gfs2_öode
);

228 
j
++, 
öum
++) {

230 i‡(
öum
 =
the_su≥r
.
numbî_of_öodes
 - 1) {

231 ((
gfs2_öode
 *)
block512
)[
j
].
öum_£lf
 = 0;

232 } i‡(
öum
 == 0) {

233 ((
gfs2_öode
 *)
block512
)[
j
].
öum_£lf
 = 0;

235 ((
gfs2_öode
 *)
block512
)[
j
].
öum_£lf
 = 
öum
 + 1;

238 ((
gfs2_öode
 *)
block512
)[
j
].
size
 = 0;

239 ((
gfs2_öode
 *)
block512
)[
j
].
ty≥
 = 3;

240 ((
gfs2_öode
 *)
block512
)[
j
].
ª„ªn˚_cou¡
 = 0;

241 ((
gfs2_öode
 *)
block512
)[
j
].
mode
 = 0;

242 
d
 = 0; d < 
GFS2_DIRECT_BLOCKS
; d++) {

243 ((
gfs2_öode
 *)
block512
)[
j
].
dúe˘_blocks
[
d
] = 0;

245 ((
gfs2_öode
 *)
block512
)[
j
].
ödúe˘_block
 = 0;

247 
	`¥ötf
("wrôög inodê£˘‹ %d u∞tÿöum %d\n", 
i_£˘‹
, 
öum
);

249 
	`Block_Wrôe
(
NULL
, (
the_su≥r
.
block_wôh_öode_zîo
 *

250 
blocks_≥r_£˘‹
Ë+ 
i_£˘‹
, 
block512
);

255 
	`Block_Ród
(
NULL
, (
the_su≥r
.
block_wôh_öode_zîo
 *

256 
blocks_≥r_£˘‹
 + 0), 
block512
);

258 ((
gfs2_öode
 *)
block512
)[1].
öum_£lf
 = 1;

259 ((
gfs2_öode
 *)
block512
)[1].
ty≥
 = 
GFS2_DIRECTORY
;

260 ((
gfs2_öode
 *)
block512
)[1].
ª„ªn˚_cou¡
 = 1;

261 ((
gfs2_öode
 *)
block512
)[1].
size
 = 0;

263 
	`Block_Wrôe
(
NULL
, (
the_su≥r
.
block_wôh_öode_zîo
 *

264 
blocks_≥r_£˘‹
 + 0), 
block512
);

266 
gfs2_dúít
 *
de
 = 
	`gfs2_make_dúít
(1, ".");

267 
	`≠≥nd_to_fûe
(&((
gfs2_öode
 *)
block512
)[1], (*)
de
,

268 
de
->
íåy_Àngth
 + 4);

269 
	`‰ì
(
de
);

270 
de
 = 
	`gfs2_make_dúít
(1, "..");

271 
	`≠≥nd_to_fûe
(&((
gfs2_öode
 *)
block512
)[1], (*)
de
,

272 
de
->
íåy_Àngth
 + 4);

273 
	`‰ì
(
de
);

274 
de
 = 
	`gfs2_make_dúít
(3, "hello");

275 
	`≠≥nd_to_fûe
(&((
gfs2_öode
 *)
block512
)[1], (*)
de
,

276 
de
->
íåy_Àngth
 + 4);

277 
	`‰ì
(
de
);

279 
	`Block_Ród
(
NULL
, (
the_su≥r
.
block_wôh_öode_zîo
 *

280 
blocks_≥r_£˘‹
 + 0), 
block512
);

283 ((
gfs2_öode
 *)
block512
)[2].
öum_£lf
 = 2;

284 ((
gfs2_öode
 *)
block512
)[2].
ty≥
 = 
GFS2_FILE
;

285 ((
gfs2_öode
 *)
block512
)[2].
ª„ªn˚_cou¡
 = 1;

286 ((
gfs2_öode
 *)
block512
)[2].
size
 = 0;

288 ((
gfs2_öode
 *)
block512
)[3].
öum_£lf
 = 3;

289 ((
gfs2_öode
 *)
block512
)[3].
ty≥
 = 
GFS2_FILE
;

290 ((
gfs2_öode
 *)
block512
)[3].
ª„ªn˚_cou¡
 = 1;

291 ((
gfs2_öode
 *)
block512
)[3].
size
 = 0;

293 
	`Block_Wrôe
(
NULL
, (
the_su≥r
.
block_wôh_öode_zîo
 *

294 
blocks_≥r_£˘‹
 + 0), 
block512
);

296 
	`≠≥nd_to_fûe
(&((
gfs2_öode
 *)
block512
)[3],

297 "thi†i†®fûe.\n", 
	`°æí
("this isá file.\n"));

301 #ifde‡
INUSE_PARANOIA


302 
	`¥ötf
("in use bits dump\n");

303 
i
 = 0; i < 
the_su≥r
.
blocks_≥r_disk
; i++) {

304 
	`¥ötf
("%c", 
	`Is_Bô_Së
(
ö_u£_bôs
, 
i
) ? '!' : '.');

306 
	`¥ötf
("\n");

307 
	`¥ötf
("end in use bits dump\n");

310 
	`≠≥nd_to_fûe
(&((
gfs2_öode
 *)
block512
)[2],

311 
ö_u£_bôs
,

312 ((
the_su≥r
.
blocks_≥r_disk
 / 8) +

313 ((
the_su≥r
.
blocks_≥r_disk
 % 8 != 0) ? 1 : 0)));

316 
	`exô
(
EXIT_SUCCESS
);

317 
	}
}

	@src/tools/buildFat.c

1 
	~<gìkos/pÁt.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<sys/°©.h
>

4 
	~<sys/f˙é.h
>

5 
	~<uni°d.h
>

6 
	~<as£π.h
>

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

11 
	#SECTOR_SIZE
 512

	)

13 
	$roundToNextBlock
(
x
) {

14 i‡(
x
 % 
SECTOR_SIZE
 == 0) {

15  
x
;

17  (
x
 + 
SECTOR_SIZE
 - (x % SECTOR_SIZE));

19 
	}
}

21 
dúe˘‹yE¡ry
 *
	$ÆlocDúE¡ry
(
dúe˘‹yE¡ry
 * 
dúe˘‹y
) {

22 
√xt
;

23  &
dúe˘‹y
[
√xt
++];

24 
	}
}

26 
	$maö
(
¨gc
, *
¨gv
[]) {

27 
i
;

28 
fd
;

29 
fd2
;

30 
ªt
;

31 
cuº
;

32 *
Át
;

33 
blocks
;

34 
diskSize
;

35 
fûeCou¡
;

36 
fûeArgs
;

37 *
imageFûe
;

38 
°©
 
sbuf
;

39 
fú°FªeBlock
;

40 
boŸSe˘‹
 
bSe˘‹
;

41 
dúe˘‹yE¡ry
 *
dúe˘‹y
;

42 
wrôeBoŸ
 = 0;

44 i‡(
¨gc
 <= 1) {

45 
	`¥ötf
("usage: buildFat [-b <boot block> ] <diskImage> <files>\n");

46 
	`exô
(-1);

49 
cuº
 = 2;

50 i‡(!
	`°rcmp
(
¨gv
[1], "-b")) {

52 
	`¥ötf
("writing boot block\n");

53 
cuº
 += 2;

54 
wrôeBoŸ
 = 1;

57 
imageFûe
 = 
¨gv
[
cuº
 - 1];

58 
	`¥ötf
("imagêfûê%s\n", 
imageFûe
);

60 
ªt
 = 
	`°©
(
imageFûe
, &
sbuf
);

61 i‡(
ªt
) {

62 
	`≥º‹
("stat");

63 
	`exô
(-1);

66 
fûeArgs
 = 
¨gc
 - 
cuº
;

67 i‡(
fûeArgs
 == 0) {

68 
	`¥ötf
("WARNING: file count is zero in disk image being built.\n");

71 
diskSize
 = 
sbuf
.
°_size
;

72 i‡(
diskSize
 % 
SECTOR_SIZE
 != 0) {

73 
	`¥ötf
("image isÇotá multiple of 512 bytes\n");

74 
	`exô
(-1);

77 
blocks
 = 
diskSize
 / 
SECTOR_SIZE
;

79 
bSe˘‹
.
magic
 = 
PFAT_MAGIC
;

80 
bSe˘‹
.
fûeAŒoˇti⁄Off£t
 = 1;

81 
bSe˘‹
.
fûeAŒoˇti⁄Lígth
 = 
	`roundToNextBlock
(
blocks
Ë/ 
SECTOR_SIZE
 * 4;

82 
Át
 = (*)
	`ˇŒoc
(
blocks
, ());

83 
bSe˘‹
.
roŸDúe˘‹yOff£t
 = bSe˘‹.
fûeAŒoˇti⁄Lígth
 + 1;

85 i‡(
fûeArgs
 == 0) {

86 
	`¥ötf
("WARNING: buildingánÉmpty FAT filesystem\n");

89 
fd
 = 
	`›í
(
imageFûe
, 
O_WRONLY
, 0);

90 i‡(
fd
 < 0) {

91 
	`≥º‹
("image File open:");

92 
	`exô
(-1);

95 i‡(
wrôeBoŸ
) {

97 
buf„r
[
SECTOR_SIZE
];

99 
fd2
 = 
	`›í
(
¨gv
[2], 
O_RDONLY
, 0);

101 
ªt
 = 
	`ªad
(
fd2
, 
buf„r
, 
SECTOR_SIZE
);

102 i‡(
ªt
 !
SECTOR_SIZE
) {

103 
	`¥ötf
("unableÅoÑead bootÑecord\n");

106 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

108 
ªt
 = 
	`wrôe
(
fd
, 
buf„r
, 
SECTOR_SIZE
);

109 i‡(
ªt
 !
SECTOR_SIZE
) {

110 
	`¥ötf
("unableÅo write bootÑecord\n");

113 
	`˛o£
(
fd2
);

116 
fú°FªeBlock
 = 
bSe˘‹
.
roŸDúe˘‹yOff£t
 +

117 
	`roundToNextBlock
((
dúe˘‹yE¡ry
Ë* 
fûeArgs
Ë/ 
SECTOR_SIZE
;

118 
	`¥ötf
("fú° d©®block†i†%d\n", 
fú°FªeBlock
);

120 
dúe˘‹y
 = (
dúe˘‹yE¡ry
 *Ë
	`mÆloc
((dúe˘‹yE¡ryË* 
fûeArgs
);

121 
i
 = 0, 
fûeCou¡
 = 0; i < 
fûeArgs
; i++) {

122 
j
;

123 
numBlocks
;

124 
dúe˘‹yE¡ry
 *
dú
;

126 i‡(!
	`°rcmp
(
¨gv
[
i
 + 
cuº
], "-d")) {

128 
wrôeSubDú
 = 0;

129 
i
++;

131 c⁄° *
dú«me
 = 
¨gv
[
i
 + 
cuº
];

132 *
±r
;

133 i‡((
±r
 = 
	`°rchr
(
dú«me
, '/'))) {

134 *
±r
 = '\0';

135 
±r
++;

137 
wrôeSubDú
 = 1;

138 
dú
 = (
dúe˘‹yE¡ry
 *Ë
	`mÆloc
(512);

139 
	`°∫˝y
(
dú
->
fûeName
, 
±r
, (dir->fileName));

142 
dú
 = 
	`ÆlocDúE¡ry
(
dúe˘‹y
);

143 
fûeCou¡
++;

144 
	`°∫˝y
(
dú
->
fûeName
, 
dú«me
, (dir->fileName));

147 
dú
->
dúe˘‹y
 = 1;

148 
dú
->
fûeSize
 = 
SECTOR_SIZE
;

149 
dú
->
fú°Block
 = 
fú°FªeBlock
;

151 
Át
[
fú°FªeBlock
] = firstFreeBlock + 1;

152 ++
fú°FªeBlock
;

153 
Át
[
fú°FªeBlock
++] = 
FAT_ENTRY_EOF
;

155 i‡(
wrôeSubDú
) {

157 
j
;

158 
j
 = 0; j < 
fûeCou¡
; j++) {

159 i‡(!
	`°rcmp
(
dúe˘‹y
[
j
].
fûeName
, 
dú«me
)) {

160 
	`l£ek
(
fd
, 
dúe˘‹y
[
j
].
fú°Block
 * 
SECTOR_SIZE
,

161 
SEEK_SET
);

162 
	`wrôe
(
fd
, 
dú
, 512);

166 i‡(
i
 =
fûeCou¡
)

167 
	`ab‹t
();

168 
wrôeSubDú
 = 0;

172 c⁄° *
fûíame
 = 
¨gv
[
i
 + 
cuº
];

174 
dú
 = 
	`ÆlocDúE¡ry
(
dúe˘‹y
);

176 
dú
->
fú°Block
 = 
fú°FªeBlock
;

178 
ªt
 = 
	`°©
(
fûíame
, &
sbuf
);

179 i‡(
ªt
 != 0) {

180 
	`¥ötf
("Eº‹ sèt()ög %s\n", 
fûíame
);

181 
	`exô
(-1);

183 
	`as£π
(
ªt
 == 0);

184 
numBlocks
 = 
	`roundToNextBlock
(
sbuf
.
°_size
Ë/ 
SECTOR_SIZE
;

185 
dú
->
fûeSize
 = 
sbuf
.
°_size
;

187 i‡(
wrôeBoŸ
) {

188 i‡(
i
 == 0) {

190 
bSe˘‹
.
£tupSèπ
 = 
fú°FªeBlock
;

191 
bSe˘‹
.
£tupSize
 = 
numBlocks
;

192 
	`¥ötf
("setup file startsát %d, %d sectorsÜong\n",

193 
bSe˘‹
.
£tupSèπ
, bSe˘‹.
£tupSize
);

194 } i‡(
i
 == 1) {

196 
bSe˘‹
.
kî√lSèπ
 = 
fú°FªeBlock
;

197 
bSe˘‹
.
kî√lSize
 = 
numBlocks
;

198 
	`¥ötf
("kernel file startsát %d, %d sectorsÜong\n",

199 
bSe˘‹
.
kî√lSèπ
, bSe˘‹.
kî√lSize
);

202 
j
 = 0; j < 
numBlocks
 - 1; j++) {

203 
Át
[
fú°FªeBlock
] = firstFreeBlock + 1;

204 ++
fú°FªeBlock
;

206 i‡(
fú°FªeBlock
 > (
diskSize
 / 
SECTOR_SIZE
)) {

207 
	`¥ötf
("Eº‹: %†i†fuŒ\n", 
imageFûe
);

208 
	`exô
(-1);

211 
Át
[
fú°FªeBlock
++] = 
FAT_ENTRY_EOF
;

213 
	`l£ek
(
fd
, 
dú
->
fú°Block
 * 
SECTOR_SIZE
, 
SEEK_SET
);

216 
fd2
 = 
	`›í
(
fûíame
, 
O_RDONLY
, 0);

217 
	`as£π
(
fd2
 >= 0);

220 i‡(
	`°ºchr
(
fûíame
, '/') != 0)

221 
fûíame
 = 
	`°ºchr
(filename, '/') + 1;

223 i‡(
	`°æí
(
fûíame
Ë> (
dú
->
fûeName
)) {

224 
	`¥ötf
("warning: file %sÇameÅooÜong, will beÅruncated!\n",

225 
fûíame
);

229 
	`°∫˝y
(
dú
->
fûeName
, 
fûíame
, (dir->fileName));

234 
	`l£ek
(
fd
, 
dú
->
fú°Block
 * 
SECTOR_SIZE
, 
SEEK_SET
);

237 
j
 = 0; j < 
numBlocks
; j++) {

238 
ªt2
;

239 
buf„r
[
SECTOR_SIZE
];

241 
ªt
 = 
	`ªad
(
fd2
, 
buf„r
, 
SECTOR_SIZE
);

242 
	`as£π
(
ªt
 >= 0);

243 
ªt2
 = 
	`wrôe
(
fd
, 
buf„r
, 
ªt
);

244 
	`as£π
(
ªt2
 =
ªt
);

246 
	`˛o£
(
fd2
);

248 
fûeCou¡
++;

252 
bSe˘‹
.
roŸDúe˘‹yCou¡
 = 
fûeCou¡
;

254 
	`l£ek
(
fd
, 
SECTOR_SIZE
, 
SEEK_SET
);

255 
ªt
 = 
	`wrôe
(
fd
, 
Át
, (Ë* 
blocks
);

256 
	`as£π
(
ªt
 =()((Ë* 
blocks
));

258 
	`l£ek
(
fd
, 
bSe˘‹
.
roŸDúe˘‹yOff£t
 * 
SECTOR_SIZE
, 
SEEK_SET
);

259 
	`¥ötf
("puâögÅhêdúe˘‹y wôh %d fûe†© se˘‹ %d\n", 
fûeCou¡
,

260 
bSe˘‹
.
roŸDúe˘‹yOff£t
);

261 
ªt
 = 
	`wrôe
(
fd
, 
dúe˘‹y
, (
dúe˘‹yE¡ry
Ë* 
fûeCou¡
);

262 
	`as£π
(
ªt
 =()((
dúe˘‹yE¡ry
Ë* 
fûeCou¡
));

265 
	`l£ek
(
fd
, 
PFAT_BOOT_RECORD_OFFSET
, 
SEEK_SET
);

266 
ªt
 = 
	`wrôe
(
fd
, &
bSe˘‹
, (bSector));

267 
	`as£π
(
ªt
 =(
bSe˘‹
));

269 
	`˛o£
(
fd
);

271 
	`exô
(0);

272 
	}
}

	@src/tools/fake-blockdev.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<°dlib.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<sys/mm™.h
>

7 
	~<f˙é.h
>

8 
	~<°rög.h
>

9 
	~<°d¨g.h
>

10 
	~<î∫o.h
>

11 
	~<as£π.h
>

13 #i‚de‡
GEEKOS


14 
	#GEEKOS


	)

17 
	~<gìkos/s¸ìn.h
>

18 
	~<gìkos/synch.h
>

19 
	~<gìkos/vfs.h
>

22 
	$Gë_CPU_ID
() {

24 
	}
}

26 *
	$AŒoc_Page
() {

27  
	`mÆloc
(4096);

28 
	}
}

29 
	$Fªe_Page
(*
pg
) {

30 
	`‰ì
(
pg
);

31 
	}
}

32 *
	$MÆloc
(
size_t
 
size
) {

33  (
	`mÆloc
(
size
));

34 
	}
}

35 
	$Fªe
(*
m
) {

36 
	`‰ì
(
m
);

37 
	}
}

39 
	$Pröt
(c⁄° *
fmt
, ...) {

40 
va_li°
 
¨gs
;

41 
	`va_°¨t
(
¨gs
, 
fmt
);

42 
	`v¥ötf
(
fmt
, 
¨gs
);

43 
	`va_íd
(
¨gs
);

44 
	}
}

46 
Kî√l_Thªad
 *
	gg_cuºítThªads
[] = { 
NULL
, NULL, NULL, NULL };

48 
Së_Cuºít_Aâr
(
©å
 
__©åibuã__
 ((
unu£d
))) {

59 
	$Muãx_Inô
(
Muãx
 *
muãx
) {

60 
muãx
->
°©e
 = 
MUTEX_UNLOCKED
;

61 
muãx
->
ow√r
 = (
Kî√l_Thªad
 *)
g_cuºítThªads
[0];

62 
	}
}

63 
	$Muãx_Lock
(
Muãx
 *
muãx
) {

64 
	`KASSERT
(
muãx
->
°©e
 =
MUTEX_UNLOCKED
);

65 
muãx
->
°©e
 = 
MUTEX_LOCKED
;

66 
	`KASSERT
(
muãx
->
ow√r
 =(
Kî√l_Thªad
 *)
g_cuºítThªads
[0]);

67 
	}
}

68 
	$Muãx_U∆ock
(
Muãx
 *
muãx
) {

69 
	`KASSERT
(
muãx
->
°©e
 =
MUTEX_LOCKED
);

70 
muãx
->
°©e
 = 
MUTEX_UNLOCKED
;

71 
	`KASSERT
(
muãx
->
ow√r
 =(
Kî√l_Thªad
 *)
g_cuºítThªads
[0]);

72 
	}
}

78 
	$C⁄d_Inô
(
C⁄dôi⁄
 *
c⁄d
) {

79 
c⁄d
 = cond;

80 
	}
}

81 
	$C⁄d_Waô
(
C⁄dôi⁄
 *
c⁄d
, 
Muãx
 *
muãx
) {

82 
c⁄d
 = cond;

83 
muãx
 = mutex;

84 
	}
}

85 
	$C⁄d_Sig«l
(
C⁄dôi⁄
 *
c⁄d
) {

86 
c⁄d
 = cond;

87 
	}
}

88 
	$C⁄d_Brﬂdˇ°
(
C⁄dôi⁄
 *
c⁄d
) {

89 
c⁄d
 = cond;

90 
	}
}

92 
	gdevi˚_fd
;

94 *
	gdevi˚_mm≠
;

95 
£tup_devi˚_mm≠
(*
fûíame
, 
blocksize


96 
__©åibuã__
 ((
unu£d
)), 
∑ges


97 
__©åibuã__
 ((
unu£d
))) {

98 i‡(
	gdevi˚_fd
 == 0) {

99 
devi˚_fd
 = 
›í
(
fûíame
, 
O_RDWR
);

100 i‡(
	gdevi˚_fd
 < 0) {

101 
Ârötf
(
°dîr
, "ÁûedÅÿ›í %s: %s", 
fûíame
,

102 
°ªº‹
(
î∫o
));

103 
exô
(
EXIT_FAILURE
);

114 
	#SECTOR_SIZE
 512

	)

115 
	gBlock_Devi˚
;

117 
Block_Wrôe
(
Block_Devi˚
 *
dev
 
__©åibuã__
 ((
unu£d
)),

118 
block_ödex
, *
block_d©a
) {

119 
as£π
(
block_d©a
);

124 
l£ek
(
devi˚_fd
, 
block_ödex
 * 
SECTOR_SIZE
, 
SEEK_SET
);

125 
wrôe
(
devi˚_fd
, 
block_d©a
, 
SECTOR_SIZE
);

130 
Block_Ród
(
Block_Devi˚
 *
dev
 
__©åibuã__
 ((
unu£d
)),

131 
block_ödex
, *
block_d©a
) {

134 
as£π
(
block_d©a
);

138 
l£ek
(
devi˚_fd
, 
block_ödex
 * 
SECTOR_SIZE
, 
SEEK_SET
);

139 
ªad
(
devi˚_fd
, 
block_d©a
, 
SECTOR_SIZE
);

144 
	$as£πi⁄_Áûed_ídÀss_lo›
() {

145 
	`ab‹t
();

146 
	}
}

148 
Fûe
 *
	$AŒoˇã_Fûe
(
Fûe_Ops
 *
›s
, 
fûePos
, 
ídPos
,

149 *
fsD©a
, 
mode
,

150 
Mou¡_Poöt
 *
mou¡Poöt
) {

151 
Fûe
 *
ªt
 = (Fûê*)
	`mÆloc
((File));

152 
ªt
->
›s
 = ops;

153 
ªt
->
fûePos
 = filePos;

154 
ªt
->
ídPos
 =ÉndPos;

155 
ªt
->
fsD©a
 = fsData;

156 
ªt
->
mode
 = mode;

157 
ªt
->
mou¡Poöt
 = mountPoint;

158  
ªt
;

159 
	}
}

161 
Fûesy°em_Ops
 *
	ggfs2_›s
;

163 
boﬁ
 
Regi°î_Fûesy°em
(c⁄° *
fsName


164 
__©åibuã__
 ((
unu£d
)),

165 
Fûesy°em_Ops
 *
fsOps
) {

166 
	ggfs2_›s
 = 
fsOps
;

170 
	gsubmôTe°ög
;

172 
	$H¨dw¨e_Shutdown
() {

173 
	}
}

	@src/tools/gfs2f.c

1 
	~<gìkos/gfs2.h
>

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<°dlib.h
>

5 
	~<°rögs.h
>

6 
	~<°rög.h
>

7 
	~<f˙é.h
>

8 
	~<as£π.h
>

9 
	~<î∫o.h
>

10 
	~<m©h.h
>

13 
	#GEEKOS


	)

14 
	~<gìkos/vfs.h
>

15 
	~<gìkos/blockdev.h
>

16 
	~<gìkos/bô£t.h
>

18 
	#Debug


	)

20 
gfs2_su≥rblock
 
	gthe_su≥r
;

23 
	$maö
(
¨gc
, c⁄° *
¨gv
[]) {

25 i‡(
¨gc
 < 2) {

26 
¥ötf


28 
	`exô
(
EXIT_FAILURE
);

31 
the_su≥r
.
block_size
 = 
	`©oi
(
¨gv
[2]);

32 i‡(
the_su≥r
.
block_size
 != 512 &&

33 
the_su≥r
.
block_size
 != 1024 &&Åhe_super.block_size != 4096) {

34 
	`¥ötf
("unsuµ‹ãd blocksize: %s\n", 
¨gv
[1]);

35 
	`exô
(
EXIT_FAILURE
);

38 
the_su≥r
.
blocks_≥r_disk
 = 
	`©oi
(
¨gv
[3]);

39 i‡(
the_su≥r
.
blocks_≥r_disk
 < 10) {

40 
	`¥ötf
("unsuµ‹ãd blocks_≥r_disk: %s\n", 
¨gv
[2]);

41 
	`exô
(
EXIT_FAILURE
);

44 
	`exô
(
EXIT_SUCCESS
);

45 
	}
}

	@src/user/arp.c

14 
	~<√t.h
>

15 
	~<c⁄io.h
>

16 
	~<°rög.h
>

17 
	~<gìkos/î∫o.h
>

18 
	~<ù.h
>

20 
	$maö
(
¨gc
, **
¨gv
) {

21 
boﬁ
 
ùVÆid
;

22 
uch¨_t
 
ùAddªss
[4];

23 
uch¨_t
 
macAddªss
[6];

24 
rc
 = 0;

25 
i
;

27 i‡(
¨gc
 != 2) {

28 
	`Pröt
("Ußge:\n\t%†ù_addªss\n", 
¨gv
[0]);

32 
ùVÆid
 = 
	`P¨£_IP
(
¨gv
[1], 
ùAddªss
);

33 i‡(!
ùVÆid
) {

34 
	`Pröt
("IP Addªs†%†nŸ vÆid\n", 
¨gv
[1]);

38 
rc
 = 
	`AΩ
(
ùAddªss
, 
macAddªss
);

39 i‡(
rc
 =
ETIMEOUT
) {

40 
	`Pröt
("ARPÅimed out\n");

41  
rc
;

42 } i‡(
rc
 != 0) {

43 
	`Pröt
("ARP faûed wôhÉº‹ codê%d\n", 
rc
);

44  
rc
;

47 
	`Pröt
("Found MACáddress: ");

48 
i
 = 0; i < 6; ++i) {

49 
	`Pröt
("%x:", 
macAddªss
[
i
]);

52 
	`Pröt
("\n");

56 
	}
}

	@src/user/b.c

15 
	~<c⁄io.h
>

17 
	$maö
(
¨gc
, **
¨gv
) {

18 
i
;

19 
	`Pröt_Såög
("IámÅhe bÖrogram\n");

20 
i
 = 0; i < 
¨gc
; ++i) {

21 
	`Pröt
("Arg %d i†%s\n", 
i
, 
¨gv
[i]);

24 
	}
}

	@src/user/c.c

15 
	~<c⁄io.h
>

16 
	~<gìkos/sysˇŒ.h
>

18 
	$maö
() {

19 
badsys
 = -1, 
rc
;

21 
	`Pröt_Såög
("IámÅhe cÖrogram\n");

24 
__asm__
 
	`__vﬁ©ûe__
(
SYSCALL
:"˜"(
rc
)

25 :"a"(
badsys
)

29 
	}
}

	@src/user/cat.c

14 
	~<c⁄io.h
>

15 
	~<¥o˚ss.h
>

16 
	~<fûeio.h
>

18 
	$maö
(
¨gc
, **
¨gv
) {

19 
ªt
;

20 
ªad
;

21 
öFd
;

22 
VFS_Fûe_Sèt
 
°©
;

23 
buf„r
[1025];

25 i‡(
¨gc
 != 2) {

26 
	`Pröt
("usage: cat <file>\n");

27 
	`Exô
(-1);

30 
öFd
 = 
	`O≥n
(
¨gv
[1], 
O_READ
);

31 i‡(
öFd
 < 0) {

32 
	`Pröt
("u«bÀÅÿ›í %s\n", 
¨gv
[1]);

33 
	`Exô
(-1);

36 
ªt
 = 
	`FSèt
(
öFd
, &
°©
);

37 i‡(
ªt
 != 0) {

38 
	`Pröt
("error stating file\n");

40 i‡(
°©
.
isDúe˘‹y
) {

41 
	`Pröt
("cp canÇot copy directories\n");

42 
	`Exô
(-1);

45 
ªad
 = 0;Ñód < 
°©
.
size
;Ñód +
ªt
) {

46 
ªt
 = 
	`Ród
(
öFd
, 
buf„r
, (buffer) - 1);

47 i‡(
ªt
 < 0) {

48 
	`Pröt
("errorÑeading file for copy\n");

49 
	`Exô
(-1);

52 
buf„r
[
ªt
] = '\0';

53 
	`Pröt
("%s", 
buf„r
);

56 
	`Clo£
(
öFd
);

58 
	}
}

	@src/user/cp.c

15 
	~<c⁄io.h
>

16 
	~<¥o˚ss.h
>

17 
	~<fûeio.h
>

19 
	$maö
(
¨gc
, *
¨gv
[]) {

20 
ªt
;

21 
ªad
;

22 
öFd
;

23 
outFd
;

24 
VFS_Fûe_Sèt
 
°©
;

25 
buf„r
[1024];

27 i‡(
¨gc
 != 3) {

28 
	`Pröt
("usage: cp <file1> <file2>\n");

29 
	`Exô
(1);

32 
öFd
 = 
	`O≥n
(
¨gv
[1], 
O_READ
);

33 i‡(
öFd
 < 0) {

34 
	`Pröt
("Eº‹: U«bÀÅÿ›í %s: %s\n", 
¨gv
[1],

35 
	`Gë_Eº‹_Såög
(
öFd
));

36 
	`Exô
(1);

39 
ªt
 = 
	`FSèt
(
öFd
, &
°©
);

40 i‡(
ªt
 != 0) {

41 
	`Pröt
("Eº‹: couldÇŸ sèàfûê%s: %s\n", 
¨gv
[1],

42 
	`Gë_Eº‹_Såög
(
ªt
));

43 
	`Exô
(1);

45 i‡(
°©
.
isDúe˘‹y
) {

46 
	`Pröt
("Error: cp canÇot copy directories\n");

47 
	`Exô
(1);

51 
outFd
 = 
	`O≥n
(
¨gv
[2], 
O_WRITE
 | 
O_CREATE
);

52 i‡(
outFd
 < 0) {

53 
	`Pröt
("Eº‹: u«bÀÅÿ›í %s: %s", 
¨gv
[2],

54 
	`Gë_Eº‹_Såög
(
outFd
));

55 
	`Exô
(1);

58 
ªad
 = 0;Ñód < 
°©
.
size
;Ñód +
ªt
) {

59 
ªt
 = 
	`Ród
(
öFd
, 
buf„r
, (buffer));

60 i‡(
ªt
 < 0) {

61 
	`Pröt
("Eº‹Ñódög fûêf‹ c›y: %s\n", 
	`Gë_Eº‹_Såög
(
ªt
));

62 
	`Exô
(1);

65 
ªt
 = 
	`Wrôe
(
outFd
, 
buf„r
,Ñet);

66 i‡(
ªt
 < 0) {

67 
	`Pröt
("Eº‹ wrôög fûêf‹ c›y: %s\n", 
	`Gë_Eº‹_Såög
(
ªt
));

68 
	`Exô
(1);

72 
	`Clo£
(
öFd
);

73 
	`Clo£
(
outFd
);

76 
	}
}

	@src/user/echoclnt.c

16 
	~<sockë.h
>

17 
	~<c⁄io.h
>

18 
	~<°rög.h
>

19 
	~<ù.h
>

21 
	$maö
(
¨gc
, **
¨gv
) {

22 
fd
;

23 
buf„r
[256];

24 
buf„r2
[256];

25 
rc
;

26 
uch¨_t
 
ùAddªss
[4];

30 
fd
 = 
	`Sockë
(
SOCK_STREAM
, 0);

31 i‡(
fd
 < 0) {

32 
	`Pröt
("CouldÇot create socket\n");

33  
fd
;

36 i‡(
¨gc
 < 2) {

37 
	`Pröt
("Expected IPáddressás firstárgument\n");

41 
	`P¨£_IP
(
¨gv
[1], 
ùAddªss
);

44 
rc
 = 
	`C⁄√˘
(
fd
, 7, 
ùAddªss
);

45 i‡(
rc
 != 0) {

46 
	`Pröt
("CouldÇŸ c⁄√˘Åÿ%s:7\n", 
¨gv
[1]);

50 
	`Pröt
("CONNECTED TO THE SERVER\n");

52 
	`Pröt
("Enterá word: ");

54 
	`Ród_Löe
(
buf„r
, 256);

56 
rc
 = 
	`Síd
(
fd
, (
uch¨_t
 *Ë
buf„r
, 256);

58 
rc
 = 
	`Re˚ive
(
fd
, (
uch¨_t
 *Ë
buf„r2
, 256);

59 i‡(
rc
 > 0) {

60 
	`Pröt
("Wêª˚ived %d byãs!\n", 
rc
);

62 
	`Pröt
("%s\n", 
buf„r2
);

65 
	`Clo£_Sockë
(
fd
);

68 
	}
}

	@src/user/echoserv.c

1 
	~<sockë.h
>

2 
	~<c⁄io.h
>

3 
	~<°rög.h
>

5 
	$maö
() {

6 
rc
;

7 
buf„r
[256];

9 
	`mem£t
(
buf„r
, 0, 256);

11 
fd
 = 
	`Sockë
(
SOCK_STREAM
, 0);

12 i‡(
fd
 < 0) {

13 
	`Pröt
("CouldÇot create socket\n");

14  
fd
;

17 
rc
 = 
	`Böd
(
fd
, 7, 
INADDR_ANY
);

18 i‡(
rc
 != 0) {

19 
	`Pröt
("CouldÇot doá multihomed bindÅoÖort 7\n");

23 
rc
 = 
	`Li°í
(
fd
, 10);

24 i‡(
rc
 != 0) {

25 
	`Pröt
("CouldÇotÜisten forá connection\n");

31 
√wSockë
;

32 
uch¨_t
 
˛õ¡Addªss
[4];

33 
ush‹t_t
 
˛õ¡P‹t
;

36 
√wSockë
 = 
	`Ac˚±
(
fd
, &
˛õ¡P‹t
, 
˛õ¡Addªss
);

37 i‡(
√wSockë
 < 0) {

38 
	`Pröt
("CouldÇotácceptÅhe connection\n");

42 
rc
 = 
	`Re˚ive
(
√wSockë
, (
uch¨_t
 *Ë
buf„r
, 256);

43 i‡(
rc
 >= 0) {

44 
	`Pröt
("Echoing data back\n");

45 
	`Síd
(
√wSockë
, (
uch¨_t
 *Ë
buf„r
, 256);

48 
	`Clo£_Sockë
(
√wSockë
);

50 } 
	`°rcmp
(
buf„r
, "exit") != 0);

53 
	}
}

	@src/user/ethrecv.c

1 
	~<√t.h
>

2 
	~<c⁄io.h
>

3 
	~<°rög.h
>

5 
	$maö
() {

6 
uch¨_t
 
buf„r
[
ETH_MAX_DATA
];

7 
rc
 = 0;

9 
	`mem£t
(
buf„r
, '\0', 
ETH_MAX_DATA
);

11 
rc
 = 
	`EthPackëRe˚ive
(
buf„r
, 
ETH_MAX_DATA
);

13 i‡(
rc
 == 0)

14 
	`Pröt
("Re˚ived: %s\n", 
buf„r
);

16 
	`Pröt
("Receive failed\n");

18  
rc
;

20 
	}
}

	@src/user/ethsend.c

1 
	~<√t.h
>

2 
	~<c⁄io.h
>

3 
	~<°rög.h
>

5 
	$maö
(
¨gc
, **
¨gv
) {

7 c⁄° 
de°
[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

9 i‡(
¨gc
 == 1) {

10 
	`Pröt
("\tUßge: %†°rög\n", 
¨gv
[0]);

14 
rc
 = 
	`EthPackëSíd
(
¨gv
[1], 
	`°æí
◊rgv[1]), 
de°
, "eth0");

15  
rc
;

16 
	}
}

	@src/user/ethsendx.c

1 
	~<√t.h
>

2 
	~<c⁄io.h
>

3 
	~<°rög.h
>

5 
	$maö
(
¨gc
, **
¨gv
) {

6 
uch¨_t
 
buf„r
[
ETH_MAX_DATA
];

7 
∑ckëSize
;

8 
numPackës
;

9 
i
, 
j
;

11 
uch¨_t
 
de°Addr
[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

13 i‡(
¨gc
 != 3) {

14 
	`Pröt
("Ußge:\n\t%†∑ckë_sizênum_∑ckës\n", 
¨gv
[0]);

18 
	`mem£t
(
buf„r
, '\0', 
ETH_MAX_DATA
);

20 
∑ckëSize
 = 
	`©oi
(
¨gv
[1]);

21 
numPackës
 = 
	`©oi
(
¨gv
[2]);

23 i‡(
∑ckëSize
 < 
ETH_MIN_DATA
)

24 
∑ckëSize
 = 
ETH_MIN_DATA
;

26 i‡(
∑ckëSize
 > 
ETH_MAX_DATA
 - 1)

27 
∑ckëSize
 = 
ETH_MAX_DATA
 - 1;

29 
	`Pröt
("Packë size: %d\n", 
∑ckëSize
);

30 
	`Pröt
("NumÖackës: %d\n", 
numPackës
);

32 
i
 = 0; i < 
numPackës
; ++i) {

33 
j
 = 0; j < 
∑ckëSize
; ++j) {

34 
buf„r
[
j
] = 'a' + (
i
 % 26);

36 
	`EthPackëSíd
(
buf„r
, 
∑ckëSize
 + 1, 
de°Addr
, "eth0");

41 
	}
}

	@src/user/execr1.c

1 
	~<c⁄io.h
>

2 
	~<¥o˚ss.h
>

3 
	~<sched.h
>

4 
	~<£ma.h
>

5 
	~<°rög.h
>

6 
	~<fûeio.h
>

8 
	$maö
(
¨gc
, *
¨gv
[]) {

9 
comm™d_löe
[256];

10 
ªcursi⁄_dïth
;

11 
r
;

13 
	`as£π
(
¨gc
 > 0);

14 i‡(
¨gc
 == 1) {

15 
	`Pröt
("usage:Éxecr1 <recursion depth>\n");

16 
	`Exô
(-2);

18 
	`as£π
(
¨gv
[1][0] >= '0' &&árgv[1][0] <= '9');

19 
ªcursi⁄_dïth
 = 
	`©oi
(
¨gv
[1]);

20 i‡(
ªcursi⁄_dïth
 == 0) {

21 
	`Pröt
("done!\n");

22 
	`Exô
(0);

24 
	`Pröt
("%d...\n", 
ªcursi⁄_dïth
);

25 
	`¢¥ötf
(
comm™d_löe
, 256, "exe¸1 %d", 
ªcursi⁄_dïth
 - 1);

26 
r
 = 
	`Exe˛
("/c/exe¸1.exe", 
comm™d_löe
);

27 
	`Pröt
("returned from Execl.Çot good.\n");

28 
	`as£π
(0);

31 
	}
}

	@src/user/execr2.c

1 
	~<c⁄io.h
>

2 
	~<¥o˚ss.h
>

3 
	~<sched.h
>

4 
	~<£ma.h
>

5 
	~<°rög.h
>

6 
	~<fûeio.h
>

8 
	$maö
(
¨gc
, *
¨gv
[]) {

9 
comm™d_löe
[256];

10 
ªcursi⁄_dïth
;

11 
r
;

13 
	`as£π
(
¨gc
 > 0);

14 i‡(
¨gc
 == 1) {

15 
	`Pröt
("usage:Éxecr2 <recursion depth>\n");

16 
	`Exô
(-2);

18 
	`as£π
(
¨gv
[1][0] >= '0' &&árgv[1][0] <= '9');

19 
ªcursi⁄_dïth
 = 
	`©oi
(
¨gv
[1]);

20 i‡(
ªcursi⁄_dïth
 == 0) {

21 
	`Pröt
("done!\n");

22 
	`Exô
(0);

24 
	`Pröt
(".%d...\n", 
ªcursi⁄_dïth
);

25 
	`¢¥ötf
(
comm™d_löe
, 256, "exe¸3 %d", 
ªcursi⁄_dïth
 - 1);

26 
r
 = 
	`Exe˛
("/c/exe¸3.exe", 
comm™d_löe
);

27 
	`Pröt
("returned from Execl.Çot good.\n");

28 
	`as£π
(0);

31 
	}
}

	@src/user/execr3.c

1 
	~<c⁄io.h
>

2 
	~<¥o˚ss.h
>

3 
	~<sched.h
>

4 
	~<£ma.h
>

5 
	~<°rög.h
>

6 
	~<fûeio.h
>

8 
	$maö
(
¨gc
, *
¨gv
[]) {

9 
comm™d_löe
[256];

10 
ªcursi⁄_dïth
;

11 
r
;

13 
	`as£π
(
¨gc
 > 0);

14 i‡(
¨gc
 == 1) {

15 
	`Pröt
("usage:Éxecr3 <recursion depth>\n");

16 
	`Exô
(-2);

18 
	`as£π
(
¨gv
[1][0] >= '0' &&árgv[1][0] <= '9');

19 
ªcursi⁄_dïth
 = 
	`©oi
(
¨gv
[1]);

20 i‡(
ªcursi⁄_dïth
 == 0) {

21 
	`Pröt
("done!\n");

22 
	`Exô
(0);

24 
	`Pröt
("_%d...\n", 
ªcursi⁄_dïth
);

25 
	`¢¥ötf
(
comm™d_löe
, 256, "exe¸2 %d", 
ªcursi⁄_dïth
 - 1);

26 
r
 = 
	`Exe˛
("/c/exe¸2.exe", 
comm™d_löe
);

27 
	`Pröt
("returned from Execl.Çot good.\n");

28 
	`as£π
(0);

31 
	}
}

	@src/user/fork-p1.c

13 
	~<c⁄io.h
>

14 
	~<¥o˚ss.h
>

15 
	~<sched.h
>

16 
	~<£ma.h
>

17 
	~<°rög.h
>

18 
	~<fûeio.h
>

20 
	gglobÆ
 = 0;

22 
	$maö
(
¨gc
, **
¨gv
) {

23 
n
 = 0;

24 
chûd_pid
 = 0;

25 
	`Pröt
("original\n");

26 
chûd_pid
 = 
	`F‹k
();

27 
n
++;

28 
globÆ
 ++;

29 i‡(
chûd_pid
 > 0) {

30 
	`Pröt
("∑ª¡Ç=%d, globÆ=%d, chûd_pid=%d, my_pid=%d\n", 
n
, 
globÆ
,

31 
chûd_pid
, 
	`Gë_PID
());

32 } i‡(
chûd_pid
 == 0) {

33 
	`Pröt
("chûdÇ=%d, globÆ=%d, chûd_pid=%d, my_pid=%d\n", 
n
, 
globÆ
,

34 
chûd_pid
, 
	`Gë_PID
());

36 
	`Pröt
("f‹k faûed: %†(%d)\n", 
	`Gë_Eº‹_Såög
(
chûd_pid
),

37 
chûd_pid
);

41 
	}
}

	@src/user/forkexec.c

13 
	~<c⁄io.h
>

14 
	~<¥o˚ss.h
>

15 
	~<sched.h
>

16 
	~<£ma.h
>

17 
	~<°rög.h
>

18 
	~<fûeio.h
>

19 
	~<gìkos/î∫o.h
>

21 
	$maö
(
¨gc
, **
¨gv
) {

22 
chûd_pid
 = 
	`F‹k
();

23 
rc
;

25 i‡(
chûd_pid
 > 0) {

26 
	`Pröt
("waôög f‹ %d\n", 
chûd_pid
);

27 
rc
 = 
	`Waô
(
chûd_pid
);

28 
	`Pröt
("ThêchûdÉxôed %d\n", 
rc
);

29 } i‡(
chûd_pid
 == 0) {

30 
rc
 = 
	`Exe˛
("/c/b.exe", "bÖrogramárgument");

31 
	`Pröt
("exe¯Áûed: %d\n", 
rc
);

33 
	`Pröt
("f‹k faûed: %†(%d)\n", 
	`Gë_Eº‹_Såög
(
chûd_pid
),

34 
chûd_pid
);

37 
	}
}

	@src/user/forkpipe.c

13 
	~<c⁄io.h
>

14 
	~<¥o˚ss.h
>

15 
	~<sched.h
>

16 
	~<£ma.h
>

17 
	~<°rög.h
>

18 
	~<fûeio.h
>

19 
	~<gìkos/î∫o.h
>

21 
	gglobÆ
 = 0;

23 
	$maö
(
¨gc
, **
¨gv
) {

24 
n
 = 0;

25 
chûd_pid
 = 0;

26 
i
;

27 
ªad_fd
, 
wrôe_fd
;

28 
ªad_byãs
, 
wrôãn_byãs
, 
pùe_ªtvÆ
;

29 
buf
[256];

32 
	`Pröt
("‹igöÆÖid=%d\n", 
	`Gë_PID
());

33 
pùe_ªtvÆ
 = 
	`Pùe
(&
ªad_fd
, &
wrôe_fd
);

34 
	`as£π
(
pùe_ªtvÆ
 == 0);

36 
chûd_pid
 = 
	`F‹k
();

39 
n
++;

40 
globÆ
 ++;

42 i‡(
chûd_pid
) {

43 
	`Pröt
("parentÇ=%d, global=%d, child_pid=%d, my_pid=%d\n",

44 
n
, 
globÆ
, 
chûd_pid
, 
	`Gë_PID
());

45 (
ªad_byãs
 = 
	`Ród
(
ªad_fd
, 
buf
, 4)Ë=
EWOULDBLOCK
) {

46 
	`Gë_PID
();

47 
	`Gë_PID
();

49 
	`Pröt
("chûdÑód %d byãs\n", 
ªad_byãs
);

50 
	`as£π
(
ªad_byãs
 == 4);

51 
	`as£π
(
	`°∫cmp
(
buf
, "boop", 4) == 0);

52 
	`Clo£
(
ªad_fd
);

54 
	`Waô
(
chûd_pid
);

56 
wrôãn_byãs
 = 
	`Wrôe
(
wrôe_fd
, "nope", 4);

57 
	`as£π
(
wrôãn_byãs
 =
EPIPE
);

58 
	`Clo£
(
wrôe_fd
);

60 
	`Clo£
(
ªad_fd
);

61 
	`Pröt
("childÇ=%d, global=%d, child_pid=%d, my_pid=%d\n",

62 
n
, 
globÆ
, 
chûd_pid
, 
	`Gë_PID
());

63 
wrôãn_byãs
 = 
	`Wrôe
(
wrôe_fd
, "boop", 4);

64 i‡(
wrôãn_byãs
 != 4) {

65 
	`Pröt
("FAIL: WroteÅhe wrongÇumber of bytesÅo fd %d: %d\n",

66 
wrôe_fd
, 
wrôãn_byãs
);

68 
	`Clo£
(
wrôe_fd
);

72 
	}
}

	@src/user/gfs2f.c

16 
	~<c⁄io.h
>

17 
	~<¥o˚ss.h
>

18 
	~<fûeio.h
>

19 
	~<gìkos/gfs2.h
>

21 
	$maö
(
¨gc
, *
¨gv
[]) {

22 
rc
 = -1;

24 i‡(
¨gc
 != 4) {

25 
	`Pröt
("Usage: gfs2f <devname> <size MB> <block size KB>\n");

26 
	`Exô
(-1);

37 i‡(
rc
 != 0) {

38 
	`Pröt
("Eº‹: CouldÇŸ f‹m© gfs2 o¿%s\n", 
¨gv
[1]);

39 
	`Exô
(-1);

43 
	}
}

	@src/user/halt.c

13 
	~<¥o˚ss.h
>

14 
	$maö
() {

15 
	`ShutDown
();

17 
	}
}

	@src/user/ifconfig.c

1 
	~<√t.h
>

2 
	~<°rög.h
>

3 
	~<c⁄io.h
>

4 
	~<ù.h
>

6 
	#NUMBER_OF_DEVICES
 10

	)

8 
	gaddªssComm™d
[] = "address";

9 
	g√tmaskComm™d
[] = "netmask";

11 
	$maö
(
¨gc
, **
¨gv
) {

12 i‡(
¨gc
 == 1 ||árgc == 2) {

13 
IP_Devi˚_Info
 
devi˚Info
[
NUMBER_OF_DEVICES
];

14 
i
;

15 *
öãrÁ˚
 = (
¨gc
 =1Ë? 
NULL
 : 
¨gv
[1];

16 
rc
 =

17 
	`Gë_IP_Info
(
devi˚Info
, 
NUMBER_OF_DEVICES
, 
öãrÁ˚
,

18 
	`°æí
(
öãrÁ˚
));

19 i‡(
rc
 < 0)

20  
rc
;

22 
i
 = 0; i < 
rc
; ++i) {

23 
IP_Devi˚_Info
 *
devi˚
 = 
devi˚Info
 + 
i
;

24 
	`Pröt
("%-10s", 
devi˚
->
«me
);

25 
	`Pröt
("HWaddr %02x:%02x:%02x:%02x:%02x:%02x\n",

26 
devi˚
->
mac
[0],

27 
devi˚
->
mac
[1],

28 
devi˚
->
mac
[2],

29 
devi˚
->
mac
[3], device->mac[4], device->mac[5]);

30 
	`Pröt
(" inetáddr:%d.%d.%d.%d Mask:%d.%d.%d.%d\n",

31 
devi˚
->
ùAddªss
.
±r
[0],

32 
devi˚
->
ùAddªss
.
±r
[1],

33 
devi˚
->
ùAddªss
.
±r
[2],

34 
devi˚
->
ùAddªss
.
±r
[3],

35 
devi˚
->
√tmask
.
±r
[0],

36 
devi˚
->
√tmask
.
±r
[1],

37 
devi˚
->
√tmask
.
±r
[2], device->netmask.ptr[3]);

38 
	`Pröt
(" RXÖackets:%ldÉrrors:%ld\n",

39 
devi˚
->
rxPackës
, devi˚->
rxPackëEº‹s
);

40 
	`Pröt
(" TXÖackets:%ldÉrrors:%ld\n",

41 
devi˚
->
txPackës
, devi˚->
txPackëEº‹s
);

42 
	`Pröt
(" RX bytes:%ld TX bytes:%ld\n",

43 
devi˚
->
rxByãs
, devi˚->
txByãs
);

44 
	`Pröt
(" Interrupt: %d I/O Port: %lx\n",

45 
devi˚
->
öãºu±
, devi˚->
i›‹t
);

46 
	`Pröt
("\n\n");

50 } i‡(
¨gc
 == 4) {

51 
rc
;

53 
uch¨_t
 
buf„r
[4];

54 
boﬁ
 
ªsu…
 = 
	`P¨£_IP
(
¨gv
[3], 
buf„r
);

55 i‡(!
ªsu…
) {

56 
	`Pröt
("InvalidáddressÉntered\n");

61 i‡(
	`°rcmp
(
¨gv
[2], 
addªssComm™d
) == 0) {

62 
rc
 = 
	`IP_C⁄figuª
(
¨gv
[1], 
	`°æí
◊rgv[1]), 
buf„r
, 
NULL
);

63 } i‡(
	`°rcmp
(
¨gv
[2], 
√tmaskComm™d
) == 0) {

64 
rc
 = 
	`IP_C⁄figuª
(
¨gv
[1], 
	`°æí
◊rgv[1]), 
NULL
, 
buf„r
);

66 
	`Pröt
("Invalid command specified\n");

70  
rc
;

73 
	}
}

	@src/user/ipsend.c

1 
	~<ù.h
>

2 
	~<√t.h
>

3 
	~<c⁄io.h
>

4 
	~<°rög.h
>

6 
	$maö
(
¨gc
, **
¨gv
) {

7 
rc
;

8 
uch¨_t
 
ùAddªss
[4];

10 i‡(
¨gc
 != 3) {

11 
	`Pröt
("Ußge:\n%†<ù_addªss> <mesßge>\n", 
¨gv
[0]);

15 
	`P¨£_IP
(
¨gv
[1], 
ùAddªss
);

17 
rc
 = 
	`IP_Síd
(
ùAddªss
, 
¨gv
[2], 
	`°æí
(argv[2]));

18 i‡(
rc
 != 0) {

19 
	`Pröt
("IPÖacketÅransmit failed\n");

22  
rc
;

24 
	}
}

	@src/user/kill.c

5 
	~<c⁄io.h
>

6 
	~<¥o˚ss.h
>

7 
	~<°rög.h
>

8 
	~<sig«l.h
>

10 
	$maö
(
¨gc
, **
¨gv
) {

11 
i
, 
rc
;

12 
i
 = 1; i < 
¨gc
; ++i) {

13 
vi˘im_pid
 = 
	`©oi
(
¨gv
[
i
]);

14 
rc
 = 
	`Kûl
(
vi˘im_pid
, 1);

15 i‡(
rc
 < 0) {

16 
	`Pröt
("FaûedÅÿkûl,Éº %d\n", 
rc
);

17 
	`Exô
(
rc
);

21 
	}
}

	@src/user/long.c

13 
	~"libu£r.h
"

14 
	~"¥o˚ss.h
"

16 
	$maö
() {

17 
i
, 
j
;

18 
s¸_£m
;

19 
now
, 
°¨t
, 
ñ≠£d
;

21 
°¨t
 = 
	`Gë_Time_Of_Day
();

22 
s¸_£m
 = 
	`O≥n_Sem≠h‹e
("screen", 1);

24 
i
 = 0; i < 200; i++) {

25 
j
 = 0; j < 10000; j++);

26 
now
 = 
	`Gë_Time_Of_Day
();

28 
ñ≠£d
 = 
	`Gë_Time_Of_Day
(Ë- 
°¨t
;

29 
	`P
(
s¸_£m
);

30 
	`Pröt
("Pro˚s†L⁄g i†d⁄ê©Åime: %d\n", 
ñ≠£d
);

31 
	`V
(
s¸_£m
);

35 
	}
}

	@src/user/ls.c

15 
	~<c⁄io.h
>

16 
	~<fûeio.h
>

17 
	~<¥o˚ss.h
>

19 
	$Li°_Fûe
(c⁄° *
fûíame
, 
VFS_Fûe_Sèt
 *
°©
) {

20 
VFS_ACL_E¡ry
 
ow√r
 = 
°©
->
a˛s
[0];

21 
boﬁ
 
isDú
 = 
°©
->
isDúe˘‹y
;

23 
	`Pröt
("%c%c%c % 6d % 10d %s%s%s\n",

24 
isDú
 ? 'd' : '-',

25 
ow√r
.
≥rmissi⁄
 & 
O_READ
 ? 'r' : '-',

26 
ow√r
.
≥rmissi⁄
 & 
O_WRITE
 ? 'w' : '-',

27 
ow√r
.
uid
,

28 
°©
->
size
, 
isDú
 ? "[" : "", 
fûíame
, isDir ? "]" : "");

29 
	}
}

31 
	$maö
(
¨gc
, **
¨gv
) {

32 
rc
;

33 
VFS_Fûe_Sèt
 
°©
;

34 c⁄° *
fûíame
;

36 i‡(
¨gc
 != 2) {

37 
	`Pröt
("Usage:Üs <filename>\n");

41 
fûíame
 = 
¨gv
[1];

43 
rc
 = 
	`Sèt
(
fûíame
, &
°©
);

44 i‡(
rc
 != 0) {

45 
	`Pröt
("CouldÇŸ sèà%s: %s\n", 
¨gv
[1], 
	`Gë_Eº‹_Såög
(
rc
));

49 i‡(!
°©
.
isDúe˘‹y
) {

50 
	`Li°_Fûe
(
¨gv
[1], &
°©
);

52 
fd
 = 
	`O≥n_Dúe˘‹y
(
¨gv
[1]);

53 
VFS_Dú_E¡ry
 
dúít
;

55 i‡(
fd
 < 0) {

56 
	`Pröt
("CouldÇŸ o≥¿%s: %s\n", 
fûíame
, 
	`Gë_Eº‹_Såög
(
fd
));

57 
	`Exô
(1);

60 
	`Pröt
("Dúe˘‹y %s\n", 
fûíame
);

62 
r
 = 
	`Ród_E¡ry
(
fd
, &
dúít
);

63 i‡(
r
 > 0)

65 i‡(
r
 == 0)

66 
	`Li°_Fûe
(
dúít
.
«me
, &dúít.
°©s
);

68 
	`Pröt
("CouldÇotÑead directoryÉntry: %s\n",

69 
	`Gë_Eº‹_Såög
(
rc
));

70 
	`Exô
(1);

74 i‡((
rc
 = 
	`Clo£
(
fd
)) < 0) {

75 
	`Pröt
("CouldÇŸ clo£ dúe˘‹y %s: %s\n", 
fûíame
,

76 
	`Gë_Eº‹_Såög
(
rc
));

77 
	`Exô
(1);

82 
	}
}

	@src/user/mkdir.c

18 
	~<c⁄io.h
>

19 
	~<¥o˚ss.h
>

20 
	~<fûeio.h
>

22 
	$maö
(
¨gc
, *
¨gv
[]) {

23 
rc
;

25 i‡(
¨gc
 != 2) {

26 
	`Pröt
("Usage: mkdir <directory>\n");

27 
	`Exô
(1);

30 
rc
 = 
	`Cª©e_Dúe˘‹y
(
¨gv
[1]);

31 i‡(
rc
 != 0)

32 
	`Pröt
("CouldÇŸ cª©êdúe˘‹y: %s\n", 
	`Gë_Eº‹_Såög
(
rc
));

34  !(
rc
 == 0);

35 
	}
}

	@src/user/mount.c

19 
	~<c⁄io.h
>

20 
	~<¥o˚ss.h
>

21 
	~<fûeio.h
>

23 
	$maö
(
¨gc
, *
¨gv
[]) {

24 
ªt
;

26 i‡(
¨gc
 != 4) {

27 
	`Pröt
("usage: mount <blockdev> <directory> <fstype>\n");

28 
	`Exô
(1);

31 
ªt
 = 
	`Mou¡
(
¨gv
[1],árgv[2],árgv[3]);

32 i‡(
ªt
 != 0) {

33 
	`Pröt
("Mou¡ faûed: %s\n", 
	`Gë_Eº‹_Såög
(
ªt
));

34 
	`Exô
(1);

38 
	}
}

	@src/user/nsp5test.c

19 
	~<c⁄io.h
>

20 
	~<¥o˚ss.h
>

21 
	~<fûeio.h
>

22 
	~<°rög.h
>

23 
	~<gìkos/gfs2.h
>

24 
	~<gìkos/vfs.h
>

25 
	~<gìkos/¥oje˘s.h
>

26 
	~<gìkos/î∫o.h
>

28 
	#doTe°OrDõ
(
t
,
f
,
p
,
s
,
â
,
°
Ëdÿ{ if(
	`doTe°
—,f,p,s,â,°Ë< 0Ë{ 
	`Exô
(1); } } 0)

	)

30 
	gblocksize
 = 4096;

31 
	gdisksize_mb
 = 2;

32 
boﬁ
 
	gÁû_immedüãly
 = 
Ál£
;

33 
	#VFS_NO_MORE_DIR_ENTRIES
 1

	)

35 
doTe°
(c⁄° *
ã°Name
,

36 (*
ã°Fun˘i⁄
Ë(), 
poöts
, *
sc‹e
, *
tŸÆTe°s
,

37 *
suc˚ssfulTe°s
) {

38 
	gªt
;

40 (*
	gtŸÆTe°s
)++;

42 
Pröt
("Te°ög: %s...", 
ã°Name
);

44 
	gªt
 = 
ã°Fun˘i⁄
();

46 i‡(
	gªt
 < 0) {

47 
Pröt
("FAILED (%d)", 
ªt
);

48 i‡(
	gÁû_immedüãly
) {

49 
Exô
(-1);

52 
Pröt
("PASSED (%d)", 
ªt
);

53 (*
	gsc‹e
Ë+
poöts
;

54 (*
	gsuc˚ssfulTe°s
)++;

57 
Pröt
(" cπ sc‹e: %d \n", (*
sc‹e
));

59  
	gªt
;

63 
	$âe°F‹m©
() {

65 
pid
;

66 
comm™dlöe
[250];

67 i‡(
Ál£
) {

68 ()
	`¢¥ötf
(
comm™dlöe
, 249, "gfs2f.exêide1 %u %u", 
disksize_mb
,

69 
blocksize
);

70 
pid
 = 
	`S∑wn_Wôh_P©h
("gfs2f.exe", 
comm™dlöe
, "/c:/a", 0);

71  
	`Waô
(
pid
);

76 
	}
}

78 
	$âe°Mou¡
() {

79  
	`Mou¡
("ide1", "/d", "gfs2");

80 
	}
}

82 
	$tO≥nI√xi°ítFûe
() {

83  (
	`O≥n
("/d/I√xi°ítFûe", 
O_READ
) < 0) ? 1 : -1;

84 
	}
}

86 
	$tCª©
() {

87 
ªtC
;

89 
fd
 = 
	`O≥n
("/d/somefûe", 
O_CREATE
 | 
O_READ
);

90 i‡(
fd
 < 0)

93 
ªtC
 = 
	`Clo£
(
fd
);

95 ()
	`Dñëe
("/d/somefûe", 
Ál£
);

97  (
ªtC
 >= 0) ? 1 : -1;

98 
	}
}

100 
	$tCª©L⁄gFûíame
() {

101 
ªtC
;

103 
fd
 = 
	`O≥n
("/d/somePªâyL⁄gFûeNameToBeCª©ed", 
O_CREATE
 | 
O_READ
);

104 i‡(
fd
 < 0)

107 
ªtC
 = 
	`Clo£
(
fd
);

109 ()
	`Dñëe
("/d/somePªâyL⁄gFûeNameToBeCª©ed", 
Ál£
);

111  (
ªtC
 >= 0) ? 1 : -1;

112 
	}
}

114 
	$tCª©I√xi°ítP©h
() {

115 
fd
;

117 
fd
 = 
	`O≥n
("/d/I√xi°ítP©h/fûe", 
O_CREATE
 | 
O_READ
);

119  (
fd
 < 0) ? 1 : -1;

120 
	}
}

122 
	$tBasicRódWrôe
() {

123 
fd
, 
ªtW
, 
ªtR
;

124 
buf„r
[100];

126 
	`mem£t
(
buf„r
, 'g', 100);

128 
fd
 = 
	`O≥n
("/d/basic", 
O_CREATE
 | 
O_WRITE
);

129 i‡(
fd
 < 0)

132 
ªtW
 = 
	`Wrôe
(
fd
, 
buf„r
, 10);

133 i‡(
ªtW
 < 0) {

134 
	`Pröt
("wrôêªtu∫ %d < 10\n", 
ªtW
);

138 i‡(
	`Clo£
(
fd
) < 0) {

139 
	`Pröt
("failedÅo close");

143 
fd
 = 
	`O≥n
("/d/basic", 
O_READ
);

144 i‡(
fd
 < 0) {

145 
	`Pröt
("couldn'àª›í f‹Ñódög: %d %s\n", 
fd
,

146 
	`Gë_Eº‹_Såög
(
fd
));

150 
ªtR
 = 
	`Ród
(
fd
, 
buf„r
, 10);

151 i‡(
ªtR
 < 0) {

152 
	`Pröt
("ªadÑëu∫ %d < 10\n", 
ªtR
);

156 i‡(
	`Clo£
(
fd
) < 0) {

157 
	`Pröt
("failedÅo close");

161 ()
	`Dñëe
("/d/basic", 
Ál£
);

163  ((
ªtW
 =10Ë|| (
ªtR
 == 10)) ? 1 : -1;

164 
	}
}

167 
	$tRódFromWrôeO∆y
() {

168 
fd
, 
ªtR
, 
ªtW
;

169 
buf„r
[100];

171 
fd
 = 
	`O≥n
("/d/basic2f", 
O_CREATE
 | 
O_WRITE
);

172 i‡(
fd
 < 0)

175 
	`mem£t
(
buf„r
, 'n', (buffer));

177 
ªtW
 = 
	`Wrôe
(
fd
, 
buf„r
, 10);

178 i‡(
ªtW
 < 0)

181 i‡(
	`Clo£
(
fd
) < 0) {

182 
	`Pröt
("failedÅo close");

186 
fd
 = 
	`O≥n
("/d/basic2f", 
O_WRITE
);

187 i‡(
fd
 < 0)

190 
ªtR
 = 
	`Ród
(
fd
, 
buf„r
, 10);

192 i‡(
	`Clo£
(
fd
) < 0) {

193 
	`Pröt
("failedÅo close");

197 ()
	`Dñëe
("/d/basic2f", 
Ál£
);

200  (
ªtR
 < 0) ? 1 : -1;

201 
	}
}

203 
	$tWrôeToRódO∆y
() {

204 
fd
, 
ªtW
;

205 
buf„r
[100];

207 
fd
 = 
	`O≥n
("/d/basic3f", 
O_CREATE
 | 
O_WRITE
);

208 i‡(
fd
 < 0)

211 
	`mem£t
(
buf„r
, 'n', (buffer));

212 
ªtW
 = 
	`Wrôe
(
fd
, 
buf„r
, 10);

213 i‡(
ªtW
 < 0)

216 i‡(
	`Clo£
(
fd
) < 0) {

217 
	`Pröt
("failedÅo close");

221 
fd
 = 
	`O≥n
("/d/basic3f", 
O_READ
);

222 i‡(
fd
 < 0)

225 
ªtW
 = 
	`Wrôe
(
fd
, 
buf„r
, 10);

227 i‡(
	`Clo£
(
fd
) < 0) {

228 
	`Pröt
("failedÅo close");

232 ()
	`Dñëe
("/d/basic3f", 
Ál£
);

235  (
ªtW
 < 0) ? 1 : -1;

236 
	}
}

238 
	$tClo£Twi˚
() {

239 
fd
, 
ªtC
;

241 
fd
 = 
	`O≥n
("/d/basic4f", 
O_CREATE
 | 
O_WRITE
);

242 i‡(
fd
 < 0)

245 i‡(
	`Clo£
(
fd
) < 0) {

246 
	`Pröt
("failedÅo close");

250 
ªtC
 = 
	`Clo£
(
fd
);

252 ()
	`Dñëe
("/d/basic4f", 
Ál£
);

254  (
ªtC
 < 0) ? 1 : -1;

255 
	}
}

258 
	$tClo£Abîø¡Fd
() {

259 
ªtC
;

261 
ªtC
 = 
	`Clo£
(100000);

263  (
ªtC
 < 0) ? 1 : -1;

264 
	}
}

266 
	$tBasicDñëe
() {

267 
fd
, 
ªtD
, 
ªtS
;

268 
VFS_Fûe_Sèt
 
s
;

270 
fd
 = 
	`O≥n
("/d/basic5f", 
O_CREATE
 | 
O_WRITE
);

271 i‡(
fd
 < 0)

274 i‡(
	`Clo£
(
fd
) < 0) {

275 
	`Pröt
("failedÅo close");

279 
ªtD
 = 
	`Dñëe
("/d/basic5f", 
Ál£
);

281 
ªtS
 = 
	`Sèt
("/d/basic5f", &
s
);

283  (
ªtD
 >0 && 
ªtS
 < 0) ? 1 : -1;

284 
	}
}

286 
	$tDñëeI√xi°ítFûe
() {

287 
ªtD
;

289 
ªtD
 = 
	`Dñëe
("/d/I√xi°ítFûe2", 
Ál£
);

291  (
ªtD
 < 0) ? 1 : -1;

292 
	}
}

294 
	$tBasicCª©eDúe˘‹y
() {

295 
ªtC
;

297 
ªtC
 = 
	`Cª©e_Dúe˘‹y
("/d/dir1d");

299 ()
	`Dñëe
("/d/dú1d", 
Ál£
);

301  (
ªtC
 >= 0) ? 1 : -1;

302 
	}
}

304 
	$tRecursivñyCª©eDúe˘‹y
() {

305 
ªtC
;

307 
ªtC
 = 
	`Cª©e_Dúe˘‹y
("/d/dir2d");

309 i‡(
ªtC
 < 0)

312 
ªtC
 = 
	`Cª©e_Dúe˘‹y
("/d/dir2d/dir3d");

314  (
ªtC
 >= 0) ? 1 : -1;

315 
	}
}

317 
	$tFûeInRecursivñyCª©edDúe˘‹y
() {

318 
fd
 = 
	`O≥n
("/d/dú2d/dú3d/fûe4f", 
O_CREATE
 | 
O_READ
);

319 i‡(
	`Clo£
(
fd
) < 0) {

320 
	`Pröt
("failedÅo close");

324 ()
	`Dñëe
("/d/dú2d/dú3d/fûe4f", 
Ál£
);

325 ()
	`Dñëe
("/d/dú2d/dú3d", 
Ál£
);

326 ()
	`Dñëe
("/d/dú2d", 
Ál£
);

329  (
fd
 >= 0) ? 1 : -1;

330 
	}
}

333 
	$tDñëeEm±yDúe˘‹y
() {

334 
ªtC
, 
ªtD
;

336 
ªtC
 = 
	`Cª©e_Dúe˘‹y
("/d/dir3d");

337 i‡(
ªtC
 < 0)

340 
ªtD
 = 
	`Dñëe
("/d/dú3d", 
Ál£
);

342  (
ªtD
 >= 0) ? 1 : -1;

343 
	}
}

346 
	$tDñëeN⁄Em±yDúe˘‹y
() {

347 
ªtC
, 
ªtD
, 
fd
;

349 
ªtC
 = 
	`Cª©e_Dúe˘‹y
("/d/dir4d");

350 i‡(
ªtC
 < 0)

353 
fd
 = 
	`O≥n
("/d/dú4d/fûe", 
O_CREATE
 | 
O_READ
);

354 i‡(
fd
 < 0)

357 i‡(
	`Clo£
(
fd
) < 0) {

358 
	`Pröt
("failedÅo close");

362 
ªtD
 = 
	`Dñëe
("/d/dú4d", 
Ál£
);

364 ()
	`Dñëe
("/d/dú4d/fûe", 
Ál£
);

365 ()
	`Dñëe
("/d/dú4d", 
Ál£
);

367  (
ªtD
 >= 0) ? -1 : 1;

368 
	}
}

370 
	$tBasicSìk
() {

371 
fd
, 
ªtW
, 
ªtS1
, 
ªtS2
;

372 
buf„r
[11];

374 
fd
 = 
	`O≥n
("/d/basic6f", 
O_CREATE
 | 
O_WRITE
);

375 i‡(
fd
 < 0)

378 
ªtW
 = 
	`Wrôe
(
fd
, 
buf„r
, 10);

379 i‡(
ªtW
 < 0)

382 
ªtS1
 = 
	`Sìk
(
fd
, 0);

383 
ªtS2
 = 
	`Sìk
(
fd
, 9);

385 i‡(
	`Clo£
(
fd
) < 0) {

386 
	`Pröt
("failedÅo close");

389 ()
	`Dñëe
("/d/basic6f", 
Ál£
);

391  ((
ªtS1
 >0Ë&& (
ªtS2
 >= 0)) ? 1 : -1;

392 
	}
}

394 
	$tSìkRîód
() {

395 
fd
, 
ªtW
, 
ªtR
, 
ªtS
;

396 
buf„r
[11] = "0123456789\0", 
buf„r2
[2], 
buf„r3
[2];

398 
fd
 = 
	`O≥n
("/d/basic7f", 
O_CREATE
 | 
O_WRITE
);

399 i‡(
fd
 < 0)

402 
ªtW
 = 
	`Wrôe
(
fd
, 
buf„r
, 10);

403 i‡(
ªtW
 < 0)

406 i‡(
	`Clo£
(
fd
) < 0) {

407 
	`Pröt
("failedÅo close");

411 
fd
 = 
	`O≥n
("/d/basic7f", 
O_READ
);

412 i‡(
fd
 < 0)

415 
ªtS
 = 
	`Sìk
(
fd
, 0);

416 i‡(
ªtS
 < 0)

419 
ªtR
 = 
	`Ród
(
fd
, 
buf„r2
, 1);

420 i‡(
ªtR
 < 0)

423 
ªtS
 = 
	`Sìk
(
fd
, 9);

424 i‡(
ªtS
 < 0)

427 
ªtR
 = 
	`Ród
(
fd
, 
buf„r3
, 1);

428 i‡(
ªtR
 < 0)

431 i‡(
	`Clo£
(
fd
) < 0) {

432 
	`Pröt
("failedÅo close");

435 ()
	`Dñëe
("/d/basic7f", 
Ál£
);

437  ((
buf„r2
[0] ='0'Ë&& (
buf„r3
[0] == '9')) ? 1 : -1;

438 
	}
}

440 
	$tBasicSèt
() {

441 
fd
, 
ªtS
;

442 
VFS_Fûe_Sèt
 
s
;

444 
fd
 = 
	`O≥n
("/d/basic8f", 
O_CREATE
 | 
O_WRITE
);

445 i‡(
fd
 < 0)

448 i‡(
	`Clo£
(
fd
) < 0) {

449 
	`Pröt
("failedÅo close");

453 
fd
 = 
	`O≥n
("/d/basic8f", 
O_READ
);

454 i‡(
fd
 < 0)

457 
ªtS
 = 
	`FSèt
(
fd
, &
s
);

459 i‡(
	`Clo£
(
fd
) < 0) {

460 
	`Pröt
("failedÅo close");

463 ()
	`Dñëe
("/d/basic8f", 
Ál£
);

465  (
ªtS
 >= 0) ? 1 : -1;

466 
	}
}

468 
	$tSètFûe
() {

469 
fd
, 
ªtW
, 
ªtS
;

470 
buf„r
[11];

471 
VFS_Fûe_Sèt
 
s
;

473 
fd
 = 
	`O≥n
("/d/basic9f", 
O_CREATE
 | 
O_WRITE
);

474 i‡(
fd
 < 0)

477 
ªtW
 = 
	`Wrôe
(
fd
, 
buf„r
, 10);

478 i‡(
ªtW
 < 0)

481 i‡(
	`Clo£
(
fd
) < 0) {

482 
	`Pröt
("failedÅo close");

486 
ªtS
 = 
	`Sèt
("/d/basic9f", &
s
);

488 ()
	`Dñëe
("/d/basic9f", 
Ál£
);

490  ((
ªtS
 >0Ë&& (
s
.
size
 == 10)) ? 1 : -1;

491 
	}
}

493 
	$tSètDúe˘‹y
() {

494 
fd
, 
ªtS
, 
ªtC
;

495 
VFS_Fûe_Sèt
 
s
;

497 
ªtC
 = 
	`Cª©e_Dúe˘‹y
("/d/basic10d");

498 i‡(
ªtC
 < 0) {

499 
	`Pröt
("couldn'à¸óã basic10d: %d %s\n", 
ªtC
,

500 
	`Gë_Eº‹_Såög
(
ªtC
));

504 
fd
 = 
	`O≥n_Dúe˘‹y
("/d/basic10d");

505 i‡(
fd
 < 0) {

506 
	`Pröt
("couldn'àª›í basic10d: %d %s\n", 
fd
, 
	`Gë_Eº‹_Såög
(fd));

510 
ªtS
 = 
	`FSèt
(
fd
, &
s
);

512 i‡(
	`Clo£
(
fd
) < 0) {

513 
	`Pröt
("failedÅo close");

516 ()
	`Dñëe
("/d/basic10d", 
Ál£
);

518 i‡(
ªtS
 < 0) {

519 
	`Pröt
("couldn'àf°© o≥√d basic10d: %d %s\n", 
ªtS
,

520 
	`Gë_Eº‹_Såög
(
ªtS
));

522 i‡(!
s
.
isDúe˘‹y
) {

523 
	`Pröt
("fstat didn'tÅhink basic10d wasá directory\n");

527  ((
ªtS
 >0Ë&& (
s
.
isDúe˘‹y
)) ? 1 : -1;

528 
	}
}

530 
	$tRecursiveSèt
() {

531 
ªtC
, 
ªtS
, 
fd
;

532 
VFS_Fûe_Sèt
 
s
;

534 
ªtC
 = 
	`Cª©e_Dúe˘‹y
("/d/recursive_stat1");

535 i‡(
ªtC
 < 0)

538 
ªtC
 = 
	`Cª©e_Dúe˘‹y
("/d/recursive_stat1/recursive_stat2");

539 i‡(
ªtC
 < 0)

542 
ªtC
 =

543 
Cª©e_Dúe˘‹y


545 i‡(
ªtC
 < 0)

548 
fd
 = 
O≥n


550 
O_CREATE
 | 
O_WRITE
);

551 i‡(
fd
 < 0)

554 
ªtC
 = 
	`Clo£
(
fd
);

556 
ªtS
 = 
	`Sèt
("/d/ªcursive_°©1", &
s
);

557 i‡(
ªtS
 < 0)

560 
ªtS
 = 
	`Sèt
("/d/ªcursive_°©1x", &
s
);

561 i‡(
ªtS
 == 0)

564 
ªtS
 = 
	`Sèt
("/d/ªcursive_°©1/ªcursive_°©2", &
s
);

565 i‡(
ªtS
 < 0)

568 
ªtS
 = 
	`Sèt
("/d/ªcursive_°©1x/ªcursive_°©2", &
s
);

569 i‡(
ªtS
 == 0)

572 
ªtS
 = 
	`Sèt
("/d/ªcursive_°©1/../ªcursive_°©1", &
s
);

573 i‡(
ªtS
 < 0)

576 
ªtS
 = 
	`Sèt
("/d/ªcursive_°©1/../ªcursive_°©2", &
s
);

577 i‡(
ªtS
 == 0)

580 
ªtS
 = 
	`Sèt
("/d/ªcursive_°©1/./ªcursive_°©2", &
s
);

581 i‡(
ªtS
 < 0)

584 
ªtS
 = 
	`Sèt
("/d/ªcursive_°©1/./ªcursive_°©1", &
s
);

585 i‡(
ªtS
 == 0)

588 
ªtS
 =

589 
Sèt


591 &
s
);

592 i‡(
ªtS
 < 0)

595 
ªtS
 =

596 
Sèt


598 &
s
);

599 i‡(
ªtS
 == 0)

602 
ªtS
 =

603 
Sèt


605 &
s
);

606 i‡(
ªtS
 < 0)

609 
ªtS
 =

610 
Sèt


612 &
s
);

613 i‡(
ªtS
 == 0)

617 
Dñëe


619 
Ál£
);

620 ()
	`Dñëe
("/d/ªcursive_°©1/ªcursive_°©2/ªcursive_°©3", 
Ál£
);

621 ()
	`Dñëe
("/d/ªcursive_°©1/ªcursive_°©2", 
Ál£
);

622 ()
	`Dñëe
("/d/ªcursive_°©1", 
Ál£
);

626 
	}
}

628 
	$tRódE¡ry
() {

629 
fd
, 
ªtR
, 
ªtC
;

630 
VFS_Dú_E¡ry
 
dúE¡ry
;

632 
ªtC
 = 
	`Cª©e_Dúe˘‹y
("/d/basic11d");

633 i‡(
ªtC
 < 0) {

634 
	`Pröt
("couldn'à¸óã basic11d: %d %s\n", 
ªtC
,

635 
	`Gë_Eº‹_Såög
(
ªtC
));

639 
ªtC
 = 
	`Cª©e_Dúe˘‹y
("/d/basic11d/d1");

640 i‡(
ªtC
 < 0) {

641 
	`Pröt
("couldn'à¸óã basic11d/d1: %d %s\n", 
ªtC
,

642 
	`Gë_Eº‹_Såög
(
ªtC
));

646 
ªtC
 = 
	`Cª©e_Dúe˘‹y
("/d/basic11d/d2");

647 i‡(
ªtC
 < 0) {

648 
	`Pröt
("couldn'à¸óã basic11d/d2: %d %s\n", 
ªtC
,

649 
	`Gë_Eº‹_Såög
(
ªtC
));

653 
fd
 = 
	`O≥n
("/d/basic11d/f1", 
O_CREATE
);

654 i‡(
fd
 < 0) {

655 
	`Pröt
("couldn'à›í basic11d/f1: %d %s\n", 
fd
, 
	`Gë_Eº‹_Såög
(fd));

659 i‡(
	`Clo£
(
fd
) < 0) {

660 
	`Pröt
("failedÅo close");

664 
fd
 = 
	`O≥n_Dúe˘‹y
("/d/basic11d");

665 i‡(
fd
 < 0) {

666 
	`Pröt
("couldn'à›ídú basic11d: %d %s\n", 
fd
, 
	`Gë_Eº‹_Såög
(fd));

670 
ªtR
 = 
	`Ród_E¡ry
(
fd
, &
dúE¡ry
);

672 i‡((
ªtR
 < 0) ||

673 (
	`°∫cmp
(
dúE¡ry
.
«me
, "d1", 2) != 0) ||

674 (!
dúE¡ry
.
°©s
.
isDúe˘‹y
))

677 
ªtR
 = 
	`Ród_E¡ry
(
fd
, &
dúE¡ry
);

679 i‡((
ªtR
 < 0) ||

680 (
	`°∫cmp
(
dúE¡ry
.
«me
, "d2", 2) != 0) ||

681 (!
dúE¡ry
.
°©s
.
isDúe˘‹y
))

684 
ªtR
 = 
	`Ród_E¡ry
(
fd
, &
dúE¡ry
);

686 i‡((
ªtR
 < 0) ||

687 (
	`°∫cmp
(
dúE¡ry
.
«me
, "f1", 2) != 0) ||

688 (
dúE¡ry
.
°©s
.
isDúe˘‹y
))

691 i‡(
	`Clo£
(
fd
) < 0) {

692 
	`Pröt
("failedÅo close");

696 
fd
 = 
	`O≥n_Dúe˘‹y
("/d/basic11d");

697 i‡(
fd
 < 0)

711 i‡(
	`Clo£
(
fd
) < 0) {

712 
	`Pröt
("failedÅo close");

716 ()
	`Dñëe
("/d/basic11d/d1", 
Ál£
);

717 ()
	`Dñëe
("/d/basic11d/d2", 
Ál£
);

718 ()
	`Dñëe
("/d/basic11d/f1", 
Ál£
);

720 ()
	`Dñëe
("/d/basic11d", 
Ál£
);

723 
	}
}

725 
	$tWrôeRîód
(
howM™yKBs
, c⁄° *
fûeName
,

726 
boﬁ
 
ªvî£Wrôe
) {

727 
fd
, 
ªtW
, 
ªtR
, 
ªtS
;

728 
i
;

729 
j
;

730 
buf„r
[100], 
buf„r2
[100];

731 
ªt
 = 1;

732 
VFS_Fûe_Sèt
 
s
;

735 i‡(
howM™yKBs
 > ((
blocksize
 / 4) + 4) * blocksize / 1024) {

736 
howM™yKBs
 = ((
blocksize
 / 4) + 4) * blocksize / 1024;

737 
	`Pröt
("ˇµögÑîódÅe°áà%d KB\n", 
howM™yKBs
);

740 
j
 = 0; j < 100; j++)

741 
buf„r
[
j
] = j;

743 
fd
 = 
	`O≥n
(
fûeName
, 
O_CREATE
 | 
O_WRITE
);

744 i‡(
fd
 < 0)

747 i‡(
ªvî£Wrôe
) {

748 
i
 = (
howM™yKBs
 * 10) - 1; i >= 0; i--) {

749 
buf„r
[0] = 
i
 % 256;

750 
ªtS
 = 
	`Sìk
(
fd
, 
i
 * 100);

751 i‡(
ªtS
 != 0) {

752 
	`Pröt
("seek failed\n");

753 
ªt
 = -1;

756 
ªtW
 = 
	`Wrôe
(
fd
, 
buf„r
, 100);

757 i‡(
ªtW
 != 100) {

758 
	`Pröt
("wrôê%d faûed\n", 
i
);

759 
ªt
 = -1;

763 
ªtS
 = 
	`FSèt
(
fd
, &
s
);

764 i‡(
ªtS
 != 0) {

765 
	`Pröt
("fstat failed\n");

766 
ªt
 = -1;

769 i‡(()
s
.
size
 !
howM™yKBs
 * 1000) {

770 
	`Pröt
("f°© sizêcheck faûed: %d !%u\n", 
s
.
size
,

771 
howM™yKBs
 * 1000);

772 
ªt
 = -1;

775 i‡(
s
.
isDúe˘‹y
) {

776 
	`Pröt
("fstat isDirectory check failed\n");

777 
ªt
 = -1;

781 i‡(
i
 % 50 == 0)

782 
	`Pröt
(" %d", 
i
);

785 
i
 = 0; i < ()(
howM™yKBs
 * 10); i++) {

786 
buf„r
[0] = 
i
 % 256;

787 
ªtW
 = 
	`Wrôe
(
fd
, 
buf„r
, 100);

788 i‡(
ªtW
 != 100) {

789 
ªt
 = -1;

792 
ªtS
 = 
	`FSèt
(
fd
, &
s
);

793 i‡(
ªtS
 != 0) {

794 
	`Pröt
("fstat failed\n");

795 
ªt
 = -1;

798 i‡(
s
.
size
 !(
i
 + 1) * 100) {

799 
	`Pröt
("f°© sizêcheck faûed: %d !%d\n", 
s
.
size
,

800 (
i
 + 1) * 100);

801 
ªt
 = -1;

804 i‡(
s
.
isDúe˘‹y
) {

805 
	`Pröt
("fstat isDirectory check failed\n");

806 
ªt
 = -1;

811 i‡(
i
 % 50 == 0)

812 
	`Pröt
(" %d", 
i
);

816 i‡(
	`Clo£
(
fd
) < 0) {

817 
	`Pröt
("failedÅo close");

821 
ªtS
 = 
	`Sèt
(
fûeName
, &
s
);

822 i‡(
ªtS
 != 0) {

823 
	`Pröt
("stat failed\n");

824 
ªt
 = -1;

826 i‡(()
s
.
size
 !
howM™yKBs
 * 1000) {

827 
	`Pröt
("°© sizêcheck faûed: %d !%d\n", 
s
.
size
,

828 
howM™yKBs
 * 1000);

829 
ªt
 = -1;

831 i‡(
s
.
isDúe˘‹y
) {

832 
	`Pröt
("stat isDirectory check failed\n");

833 
ªt
 = -1;

837 i‡(
ªt
 != -1) {

838 
fd
 = 
	`O≥n
(
fûeName
, 
O_READ
);

839 i‡(
fd
 < 0)

842 
i
 = 0; i < ()(
howM™yKBs
 * 10); i++) {

843 
ªtR
 = 
	`Ród
(
fd
, 
buf„r2
, 100);

845 i‡(
ªtR
 != 100) {

846 
	`Pröt
("ªad %d faûed", 
i
);

847 
ªt
 = -1;

851 i‡(()
buf„r2
[0] !()(
i
 % 256)) {

852 
	`Pröt
("mism©ched idíà%d !%d", 
buf„r2
[0], 
i
 % 256);

853 
ªt
 = -1;

856 
j
 = 1; j < 100; j++) {

857 i‡(
buf„r2
[
j
] != j) {

858 
ªt
 = -1;

863 i‡(
ªt
 < 0)

866 i‡(
i
 % 50 == 0)

867 
	`Pröt
(" %d", 
i
);

870 i‡(
	`Clo£
(
fd
) < 0) {

871 
	`Pröt
("failedÅo close");

874 ()
	`Dñëe
(
fûeName
, 
Ál£
);

877  
ªt
;

878 
	}
}

880 
	$t10KWrôeRîód
() {

881  
	`tWrôeRîód
(10, "/d/fûe_10k", 
Ál£
);

882 
	}
}

884 
	$t100KWrôeRîód
() {

885  
	`tWrôeRîód
(100, "/d/fûe_100k", 
Ál£
);

886 
	}
}

887 
	$t10KWrôeRîódR
() {

888  
	`tWrôeRîód
(10, "/d/fûe_10kr", 
åue
);

889 
	}
}

891 
	$t100KWrôeRîódR
() {

892  
	`tWrôeRîód
(100, "/d/fûe_100kr", 
åue
);

893 
	}
}

895 
	$tBigDú
() {

896 
ªtC
, 
ªtD
, 
fi
, 
ªtS
;

897 
‚ame
[50];

898 
VFS_Fûe_Sèt
 
s
;

900 
ªtC
 = 
	`Cª©e_Dúe˘‹y
("/d/bigdir");

901 i‡(
ªtC
 =
EEXIST
) {

902 
	`Dñëe
("/d/bigdú", 
Ál£
);

903 
ªtC
 = 
	`Cª©e_Dúe˘‹y
("/d/bigdir");

905 i‡(
ªtC
 != 0) {

906 
	`Pröt
("couldn'à¸óã /d/bigdú: %d\n", 
ªtC
);

910 
fi
 = 0; fi < 100; fi++) {

911 
fd
;

913 
	`¢¥ötf
(
‚ame
, 50, "/d/bigdir/%04dabcdefghijklmnopqrstuvwxyz%04d",

914 
fi
, fi);

915 
	`Pröt
((
fi
 % 25 == 0) ? ":" : ".");

916 
fd
 = 
	`O≥n
(
‚ame
, 
O_WRITE
 | 
O_CREATE
);

917 i‡(
fd
 < 0) {

918 
	`Pröt
("bad o≥n/¸óà© %d\n", 
fi
);

921 i‡(
	`Clo£
(
fd
) < 0) {

922 
	`Pröt
("failedÅo close");

925 
ªtS
 = 
	`Sèt
(
‚ame
, &
s
);

926 i‡(
ªtS
 < 0) {

927 
	`Pröt
("bad sèà© %d\n", 
fi
);

932 
	`¢¥ötf
(
‚ame
, 50, "/d/bigdú/%04dabcdefghijklmn›qr°uvwxyz%04d", 
fi
,

933 
fi
);

934 
ªtS
 = 
	`Sèt
(
‚ame
, &
s
);

935 i‡(
ªtS
 == 0) {

936 
	`Pröt
("badÉxå®°©áà%d\n", 
fi
);

940 
fi
 = 0; fi < 100; fi++) {

941 
	`¢¥ötf
(
‚ame
, 50, "/d/bigdir/%04dabcdefghijklmnopqrstuvwxyz%04d",

942 
fi
, fi);

943 
	`Pröt
((
fi
 % 25 == 0) ? ":" : ".");

944 ()
	`Dñëe
(
‚ame
, 
Ál£
);

945 
ªtS
 = 
	`Sèt
(
‚ame
, &
s
);

946 i‡(
ªtS
 == 0) {

951 
ªtD
 = 
	`Dñëe
("/d/bigdú", 
Ál£
);

952 i‡(
ªtD
 != 0) {

953 
	`Pröt
("ÁûedÅÿªmovê/d/bigdú: %d", 
ªtD
);

954  
ªtD
;

958 
	}
}

963 
	$tExhau°Disk
() {

965 
max_fûe_size_k
 = ((
blocksize
 / 4) + 4) * blocksize / 1024;

966 
fûes_√eded_to_fûl_disk
 =

967 
disksize_mb
 * 1024 * 63 / 64 / 
max_fûe_size_k
;

968 
fûes_√eded_to_u£_öodes
 =

969 
disksize_mb
 * 1024 * 1024 / 64 / (
gfs2_öode
);

970 
i
;

971 
fi
, 
ªtC
, 
ªtW
, 
ªtD
;

972 
wrôeme
[512];

973 
‚ame
[50];

974 
dú«me
[25] = "";

975 
ª≥tôi⁄
;

978 
	`Pröt
("need %d filesÅo fill disk, %dÅo useáll inodes\n",

979 
fûes_√eded_to_fûl_disk
, 
fûes_√eded_to_u£_öodes
);

981 i‡(
fûes_√eded_to_fûl_disk
 > 
fûes_√eded_to_u£_öodes
) {

982 
fûes_√eded_to_fûl_disk
 = 
fûes_√eded_to_u£_öodes
;

984 
	#MARK
 
	`Pröt
("%d:", 
__LINE__
);

	)

985 
ªtC
 = 
	`Cª©e_Dúe˘‹y
("/d/exhaust");

986 i‡(
ªtC
 != 0) {

987 
	`Pröt
("couldn't create /d/exhaust\n");

991 
i
 = 0; i < (
wrôeme
); i++) {

992 
wrôeme
[
i
] = i % 256;

995 
ª≥tôi⁄
 = 0;Ñepetition < 3;Ñepetition++) {

996 
fûes_w‹ked_⁄
;

997 
ªtW
 = 0;

998 
fi
 = 0; 
ªtW
 >0 && fò< 
fûes_√eded_to_fûl_disk
; fi++) {

999 
fd
;

1000 
b
;

1002 i‡(
fi
 % 100 == 0) {

1003 
	`¢¥ötf
(
dú«me
, 25, "/d/exhau°/%d", 
fi
 / 100);

1004 
ªtC
 = 
	`Cª©e_Dúe˘‹y
(
dú«me
);

1005 
	`Pröt
("%d/%d", 
fi
, 
fûes_√eded_to_fûl_disk
);

1008 
	`¢¥ötf
(
‚ame
, 50, "%s/%d", 
dú«me
, 
fi
);

1009 
	`Pröt
((
fi
 % 25 == 0) ? ":" : ".");

1011 
fd
 = 
	`O≥n
(
‚ame
, 
O_WRITE
 | 
O_CREATE
);

1012 i‡(
fd
 < 0) {

1013 
	`Pröt
("ÁûedÅÿ›í %s\n", 
‚ame
);

1017 
b
 = 0; b < ()
max_fûe_size_k
 * 1024 - 100;

1018 
b
 +
ªtW
) {

1019 
ªtW
 = 
	`Wrôe
(
fd
, 
wrôeme
, 100);

1020 i‡(
ªtW
 < 0) {

1021 
	`Pröt
("wrôê%†%lu faûed: %d", 
‚ame
, 
b
, 
ªtW
);

1026 i‡(
	`Clo£
(
fd
) < 0) {

1027 
	`Pröt
("failedÅo close");

1031 
fûes_w‹ked_⁄
 = 
fi
;

1032 ; 
fi
 >= 0; fi--) {

1033 
	`¢¥ötf
(
dú«me
, 25, "/d/exhau°/%d", 
fi
 / 100);

1034 
	`¢¥ötf
(
‚ame
, 50, "%s/%d", 
dú«me
, 
fi
);

1035 ()
	`Dñëe
(
‚ame
, 
Ál£
);

1037 
fi
 = 0; fò< 
fûes_w‹ked_⁄
; fi += 100) {

1038 
	`¢¥ötf
(
dú«me
, 25, "/d/exhau°/%d", 
fi
 / 100);

1039 i‡(
	`Dñëe
(
dú«me
, 
Ál£
) < 0) {

1040 
	`Pröt
("could¡Ñemovê%s", 
dú«me
);

1047 
ªtD
 = 
	`Dñëe
("/d/exhau°", 
Ál£
);

1048 i‡(
ªtD
 != 0) {

1049 
	`Pröt
("ÁûedÅÿªmovê/d/exhau°: %d", 
ªtD
);

1050  
ªtD
;

1054 
	}
}

1056 
	$tSync
() {

1057  
	`Sync
();

1058 
	}
}

1060 
	$tCÀ™
() {

1061 
VFS_Dú_E¡ry
 
dúE¡ry
;

1062 
fd
, 
ªtR
, 
i
;

1063 
fd
 = 
	`O≥n_Dúe˘‹y
("/d");

1064 
i
 = 0;

1065 (
ªtR
 = 
	`Ród_E¡ry
(
fd
, &
dúE¡ry
)Ë=0 && dúE¡ry.
«me
[0] == '.';

1066 
i
++);

1067 i‡(
dúE¡ry
.
«me
[0] != '.') {

1070 i‡(
i
 > 2) {

1073 i‡(
ªtR
 !
VFS_NO_MORE_DIR_ENTRIES
) {

1077 
	}
}

1079 
	$maö
(
¨gc
, **
¨gv
) {

1082 
sc‹e
 = 0;

1083 
tŸÆTe°s
 = 0;

1084 
suc˚ssfulTe°s
 = 0;

1086 i‡(
¨gc
 > 2) {

1087 
disksize_mb
 = 
	`©oi
(
¨gv
[1]);

1088 
blocksize
 = 
	`©oi
(
¨gv
[2]);

1089 i‡(
blocksize
 != 512 && blocksize != 1024 && blocksize != 4096) {

1090 
	`Pröt
("ûÀgÆ blocksizê%s", 
¨gv
[2]);

1091 
	`Pröt
("usageÖ5test [disksize_mb blocksize_b]");

1093 i‡(
disksize_mb
 == 0 || disksize_mb > 32) {

1094 
	`Pröt
("ûÀgÆ disksizê%s", 
¨gv
[1]);

1095 
	`Pröt
("usageÖ5test [disksize_mb blocksize_b]");

1097 } i‡(
¨gc
 > 1) {

1098 
	`Pröt
("will failás soonásáÅest fails.");

1099 
Áû_immedüãly
 = 
åue
;

1104 
	`doTe°OrDõ
("Mou¡", 
âe°Mou¡
, 1, &
sc‹e
, &
tŸÆTe°s
,

1105 &
suc˚ssfulTe°s
);

1107 
	`doTe°
("O≥n-I√xi°íàFûe", 
tO≥nI√xi°ítFûe
, 1, &
sc‹e
,

1108 &
tŸÆTe°s
, &
suc˚ssfulTe°s
);

1110 
	`doTe°OrDõ
("Cª©", 
tCª©
, 2, &
sc‹e
, &
tŸÆTe°s
, &
suc˚ssfulTe°s
);

1112 
	`doTe°
("Cª©-L⁄g Fûíame", 
tCª©L⁄gFûíame
, 3, &
sc‹e
, &
tŸÆTe°s
,

1113 &
suc˚ssfulTe°s
);

1115 
	`doTe°
("Cª©-I√xi°íàP©h", 
tCª©I√xi°ítP©h
, 3, &
sc‹e
,

1116 &
tŸÆTe°s
, &
suc˚ssfulTe°s
);

1118 
	`doTe°
("Basi¯Ród/Wrôe", 
tBasicRódWrôe
, 5, &
sc‹e
, &
tŸÆTe°s
,

1119 &
suc˚ssfulTe°s
);

1122 
	`doTe°
("Ród from WrôeO∆y", 
tRódFromWrôeO∆y
, 3, &
sc‹e
, &
tŸÆTe°s
,

1123 &
suc˚ssfulTe°s
);

1125 
	`doTe°
("WrôêtÿRódO∆y", 
tWrôeToRódO∆y
, 3, &
sc‹e
, &
tŸÆTe°s
,

1126 &
suc˚ssfulTe°s
);

1129 
	`doTe°
("Clo£ Twi˚", 
tClo£Twi˚
, 3, &
sc‹e
, &
tŸÆTe°s
,

1130 &
suc˚ssfulTe°s
);

1132 
	`doTe°
("Clo£ IŒegÆ FD", 
tClo£Abîø¡Fd
, 1, &
sc‹e
, &
tŸÆTe°s
,

1133 &
suc˚ssfulTe°s
);

1136 
	`doTe°
("Basi¯Dñëe", 
tBasicDñëe
, 3, &
sc‹e
, &
tŸÆTe°s
,

1137 &
suc˚ssfulTe°s
);

1139 
	`doTe°
("Dñëe-I√xi°íàFûe", 
tDñëeI√xi°ítFûe
, 1, &
sc‹e
,

1140 &
tŸÆTe°s
, &
suc˚ssfulTe°s
);

1143 
	`doTe°
("Basi¯Cª©êDúe˘‹y", 
tBasicCª©eDúe˘‹y
, 3, &
sc‹e
,

1144 &
tŸÆTe°s
, &
suc˚ssfulTe°s
);

1146 
	`doTe°
("Recursivñy Cª©êDúe˘‹y", 
tRecursivñyCª©eDúe˘‹y
, 5,

1147 &
sc‹e
, &
tŸÆTe°s
, &
suc˚ssfulTe°s
);

1149 
	`doTe°
("Create File in Recursively Created Directory",

1150 
tFûeInRecursivñyCª©edDúe˘‹y
, 3, &
sc‹e
, &
tŸÆTe°s
,

1151 &
suc˚ssfulTe°s
);

1154 
	`doTe°
("Basi¯Sìk", 
tBasicSìk
, 2, &
sc‹e
, &
tŸÆTe°s
,

1155 &
suc˚ssfulTe°s
);

1157 
	`doTe°
("Sìk w/ Rîód", 
tSìkRîód
, 5, &
sc‹e
, &
tŸÆTe°s
,

1158 &
suc˚ssfulTe°s
);

1161 
	`doTe°
("Basi¯Sèt", 
tBasicSèt
, 2, &
sc‹e
, &
tŸÆTe°s
,

1162 &
suc˚ssfulTe°s
);

1164 
	`doTe°
("Sèt-Fûe", 
tSètFûe
, 2, &
sc‹e
, &
tŸÆTe°s
, &
suc˚ssfulTe°s
);

1166 
	`doTe°
("Sèt-Dúe˘‹y", 
tSètDúe˘‹y
, 2, &
sc‹e
, &
tŸÆTe°s
,

1167 &
suc˚ssfulTe°s
);

1169 
	`doTe°
("RecursivêSèt", 
tRecursiveSèt
, 4, &
sc‹e
, &
tŸÆTe°s
,

1170 &
suc˚ssfulTe°s
);

1172 
	`doTe°
("DñëêEm±y Dúe˘‹y", 
tDñëeEm±yDúe˘‹y
, 3, &
sc‹e
,

1173 &
tŸÆTe°s
, &
suc˚ssfulTe°s
);

1175 
	`doTe°
("DñëêN⁄-Em±y Dúe˘‹y", 
tDñëeN⁄Em±yDúe˘‹y
, 2, &
sc‹e
,

1176 &
tŸÆTe°s
, &
suc˚ssfulTe°s
);

1178 
	`doTe°
("Sync", 
tSync
, 1, &
sc‹e
, &
tŸÆTe°s
, &
suc˚ssfulTe°s
);

1181 
	`doTe°
("10k Wrôe/Rîód", 
t10KWrôeRîód
, 4, &
sc‹e
, &
tŸÆTe°s
,

1182 &
suc˚ssfulTe°s
);

1184 
	`doTe°
("100k Wrôe/Rîód", 
t100KWrôeRîód
, 6, &
sc‹e
, &
tŸÆTe°s
,

1185 &
suc˚ssfulTe°s
);

1188 
	`doTe°
("10k Wrôe/Rîód Revî£", 
t10KWrôeRîódR
, 4, &
sc‹e
,

1189 &
tŸÆTe°s
, &
suc˚ssfulTe°s
);

1191 
	`doTe°
("100k Wrôe/Rîód Revî£", 
t100KWrôeRîódR
, 6, &
sc‹e
,

1192 &
tŸÆTe°s
, &
suc˚ssfulTe°s
);

1195 
	`doTe°
("Big Dúe˘‹y", 
tBigDú
, 7, &
sc‹e
, &
tŸÆTe°s
,

1196 &
suc˚ssfulTe°s
);

1198 
	`doTe°
("Exhau° Disk", 
tExhau°Disk
, 7, &
sc‹e
, &
tŸÆTe°s
,

1199 &
suc˚ssfulTe°s
);

1201 
	`doTe°
("Hou£ I†CÀ™", 
tCÀ™
, 2, &
sc‹e
, &
tŸÆTe°s
,

1202 &
suc˚ssfulTe°s
);

1204 
	`Pröt
("********************************************\n");

1205 
	`Pröt
("Te°†©ãm±ed: %d. Pas£d: %d. Faûed: %d\n", 
tŸÆTe°s
,

1206 
suc˚ssfulTe°s
, (
tŸÆTe°s
 - successfulTests));

1207 
	`Pröt
("SCORE: %d\n", 
sc‹e
);

1210 
	}
}

	@src/user/null.c

15 
	~<¥o˚ss.h
>

17 
	$maö
() {

18 
	`NuŒ
();

23 
	}
}

	@src/user/pipe-p1.c

13 
	~<c⁄io.h
>

14 
	~<¥o˚ss.h
>

15 
	~<sched.h
>

16 
	~<£ma.h
>

17 
	~<°rög.h
>

18 
	~<fûeio.h
>

20 
	$maö
(
¨gc
, **
¨gv
) {

21 
i
;

22 
ªad_fd
, 
wrôe_fd
;

23 
ªad_byãs
, 
wrôãn_byãs
, 
pùe_ªtvÆ
;

24 
buf
[256];

27 
pùe_ªtvÆ
 = 
	`Pùe
(&
ªad_fd
, &
wrôe_fd
);

28 
	`as£π
(
pùe_ªtvÆ
 == 0);

30 
i
 = 0; i < 5; i++) {

31 
wrôãn_byãs
 = 
	`Wrôe
(
wrôe_fd
, "beep", 4);

32 
	`as£π
(
wrôãn_byãs
 == 4);

33 
ªad_byãs
 = 
	`Ród
(
ªad_fd
, 
buf
, 256);

35 
	`as£π
(
ªad_byãs
 == 4);

36 
	`as£π
(
	`°∫cmp
(
buf
, "beep", 4) == 0);

39 
	`Clo£
(
wrôe_fd
);

41 
ªad_byãs
 = 
	`Ród
(
ªad_fd
, 
buf
, 256);

42 
	`as£π
(
ªad_byãs
 == 0);

44 
	`Clo£
(
ªad_fd
);

46 
wrôãn_byãs
 = 
	`Wrôe
(
wrôe_fd
, "beep", 4);

47 
	`as£π
(
wrôãn_byãs
 <= -1);

48 
ªad_byãs
 = 
	`Ród
(
ªad_fd
, 
buf
, 256);

49 
	`as£π
(
ªad_byãs
 <= -1);

52 
	}
}

	@src/user/pipe-p2.c

13 
	~<c⁄io.h
>

14 
	~<¥o˚ss.h
>

15 
	~<sched.h
>

16 
	~<£ma.h
>

17 
	~<°rög.h
>

18 
	~<fûeio.h
>

19 
	~<gìkos/î∫o.h
>

21 
	$maö
(
¨gc
, **
¨gv
) {

22 
i
, 
j
;

23 
ªad_fd
, 
wrôe_fd
;

24 
ªad_byãs
, 
wrôãn_byãs
, 
pùe_ªtvÆ
;

25 
buf
[1024];

27 
i
 = 0; i < 1024; i++) {

28 
buf
[
i
] = i;

32 
pùe_ªtvÆ
 = 
	`Pùe
(&
ªad_fd
, &
wrôe_fd
);

33 
	`as£π
(
pùe_ªtvÆ
 == 0);

35 
i
 = 0; i < 10; i++) {

36 
wrôãn_byãs
 = 
	`Wrôe
(
wrôe_fd
, 
buf
, 1024);

37 
	`as£π
(
wrôãn_byãs
 == 1024);

40 
i
 = 0; i < 10; i++) {

41 
ªad_byãs
 = 
	`Ród
(
ªad_fd
, 
buf
, 1024);

42 
	`as£π
(
ªad_byãs
 == 1024);

43 
j
 = 0; j < 1024; j++) {

44 i‡(
buf
[
j
] != ()j) {

45 
	`Pröt
("mism©cháàôî %d index %d, buf[j] = %d\n", 
i
, 
j
,

46 
buf
[
j
]);

48 
	`as£π
(
buf
[
j
] == ()j);

52 
ªad_byãs
 = 
	`Ród
(
ªad_fd
, 
buf
, 256);

53 i‡(
ªad_byãs
 !
EWOULDBLOCK
) {

54 
	`Pröt
("FAIL:Éxpected EWOULDBLOCK (%d), got %dÑeadingátÅheÉnd\n",

55 
EWOULDBLOCK
, 
ªad_byãs
);

56 
	`as£π
(
ªad_byãs
 =
EWOULDBLOCK
);

59 
	`Clo£
(
wrôe_fd
);

61 
ªad_byãs
 = 
	`Ród
(
ªad_fd
, 
buf
, 256);

62 
	`as£π
(
ªad_byãs
 == 0);

64 
	`Clo£
(
ªad_fd
);

66 
wrôãn_byãs
 = 
	`Wrôe
(
wrôe_fd
, "beep", 4);

67 
	`as£π
(
wrôãn_byãs
 <= -1);

69 
ªad_byãs
 = 
	`Ród
(
ªad_fd
, 
buf
, 256);

70 
	`as£π
(
ªad_byãs
 <= -1);

73 
	}
}

	@src/user/ps.c

14 
	~<c⁄io.h
>

15 
	~<¥o˚ss.h
>

18 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


19 
__©åibuã__
 ((
unu£d
))) {

	@src/user/rec.c

21 
	~<c⁄io.h
>

22 
	~<°rög.h
>

23 
	~<¥o˚ss.h
>

24 
	~<libu£r.h
>

26 
	#PARANOIA


	)

28 
	gQuõt
 = 0;

30 *
_E¡ry
(), *
_íd
;

31 *
MÆloc
();

34 
	göãgrôy_check_íabÀd
;

36 
	$check_°©ic
() {

37 
f
;

38 i‡(
f
 == 0) {

43 
	}
}

46 
	$Check_I¡egrôy_Or_Dõ
() {

47 
°‹ed_code_checksum
;

48 *
t›
;

50 i‡(!
öãgrôy_check_íabÀd
) {

54 i‡(
t›
 == 0x0) {

55 
t›
 = 
MÆloc
;

56 i‡(
t›
 < (*)
¢¥ötf
) {

57 
t›
 = 
¢¥ötf
;

61 *
p
;

62 
w‹kög_checksum
 = 0;

63 i‡((*)
_E¡ry
 >
t›
) {

64 
	`Pröt
("Code Integrity Checkássumption failed.\n");

65 i‡((*)
_E¡ry
 >= (*)0x1000) {

66 
	`Pröt
("Dëaû: _E¡ry %p.\n", &
_E¡ry
);

69 i‡((*)
t›
 <= (*)0x2000) {

70 
	`Pröt
("Dëaû:Å› %p.\n", 
t›
);

72 i‡((*)
t›
 >= (*)0x3000) {

73 
	`Pröt
("Dëaû:Å› %p.\n", 
t›
);

79 i‡(
t›
 > (*)&top) {

80 
Pröt


82 
	`Pröt
("Dëaû:Å› %∞ex˚ed†&t› %p.\n", 
t›
, &top);

84 i‡((*)
t›
 < (*)&top - 0x2000) {

85 
	`Pröt
("Code Integrity Check is Weak.\n");

86 
	`Pröt
("Dëaû:Å› %∞wayÜowîÅh™ &t› %p.\n", 
t›
, &top);

89 i‡((*)
_E¡ry
 < (*)0x1000) {

90 
	`Pröt
("Code Integrity Check InternalÉrror _EntryÅoo small: %p",

91 
_E¡ry
);

92 
öãgrôy_check_íabÀd
 = 
Ál£
;

96 
p
 = (*)
_E¡ry
;Ö < (*)
t›
;Ö++) {

97 
w‹kög_checksum
 +*
p
;

99 i‡(
°‹ed_code_checksum
 == 0) {

100 
°‹ed_code_checksum
 = 
w‹kög_checksum
;

101 } i‡(
°‹ed_code_checksum
 !
w‹kög_checksum
) {

102 
	`Pröt
("Code Integrity Check Failed.\n");

103 
	`Pröt
("Detail: Code Integrity Check Failed %x != %x.\n",

104 
°‹ed_code_checksum
, 
w‹kög_checksum
);

105 
	`Exô
(-1);

107 
	}
}

109 
	$Recur£
(
x
) {

110 vﬁ©ûê
°uff
[512];

112 i‡(
x
 == 0)

115 #ifde‡
PARANOIA


117 
°uff
[1] = 1; stuff[1] < 510; stuff[1] += 1)

118 
°uff
[stuff[1]] = stuff[1];

119 
°uff
[1] = 1;

121 
°uff
[0] = stuff[511] = 
x
;

123 i‡(!
Quõt
 || 
x
 % 100 == 0)

124 
	`Pröt
("ˇŒ %d, %x\n", 
x
, ()
°uff
);

125 
	`Check_I¡egrôy_Or_Dõ
();

126 
	`Recur£
(
x
 - 1);

127 i‡(
°uff
[0] !
x
 || stuff[511] != x) {

128 
	`Pröt
("rec failed: whenÑeturning, stack variables had changed.\n");

129 
	`Exô
(-1);

131 #ifde‡
PARANOIA


133 
°uff
[1] = 1; stuff[1] < 510; stuff[1] += 1) {

134 i‡(
°uff
[stuff[1]] != stuff[1]) {

135 
Pröt


137 
	`Exô
(-1);

141 i‡(!
Quõt
 || 
x
 % 100 == 0)

142 
	`Pröt
("ªtu∫ %d\n", 
x
);

143 
	}
}

145 
	$maö
(
¨gc
, **
¨gv
) {

147 
dïth
 = 512;

149 i‡(
	`check_°©ic
()) {

150 
öãgrôy_check_íabÀd
 = 1;

152 
	`Pröt
("Integrity check disabled, since staticsáre busted.\n");

153 
öãgrôy_check_íabÀd
 = 0;

157 
	`Check_I¡egrôy_Or_Dõ
();

159 i‡(
¨gc
 > 1) {

160 
dïth
 = 
	`©oi
(
¨gv
[1]);

161 
	`Pröt
("Dïth i†%d\n", 
dïth
);

163 i‡(
¨gc
 > 2) {

164 
Quõt
 = 1;

167 
	`Recur£
(
dïth
);

169 
	`Pröt
("Re¯%d suc˚ss\n", 
dïth
);

172 
	}
}

	@src/user/recvbyte.c

10 
	~<sockë.h
>

11 
	~<c⁄io.h
>

12 
	~<°rög.h
>

13 
	~<√t.h
>

14 
	~<ù.h
>

16 
	#MAX_BUFFER_SIZE
 8192

	)

18 
	gª˚iveBuf„r
[
MAX_BUFFER_SIZE
];

20 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


21 
__©åibuã__
 ((
unu£d
))) {

22 
	gfd
 = 
Sockë
(
SOCK_STREAM
, 0);

23 i‡(
	gfd
 < 0) {

27 
	grc
 = 
Böd
(
fd
, 4600, 
INADDR_ANY
);

28 i‡(
	grc
 != 0) {

32 
	grc
 = 
Li°í
(
fd
, 1);

33 i‡(
	grc
 != 0) {

37 
ush‹t_t
 
	gp‹t
;

38 
uch¨_t
 
	gaddªss
[4];

40 
	gns
 = 
Ac˚±
(
fd
, &
p‹t
, 
addªss
);

41 i‡(
	gns
 < 0) {

45 
Pröt
("Socket is connected\n");

47 
	gbyãsRód
;

48 
	gbuf„rPå
 = 0;

49 
	gbuf„rIndex
 = 0;

52 
	gbyãsRód
 = 
Re˚ive
(
ns
, ((
uch¨_t
 *Ë
ª˚iveBuf„r
Ë+ 
buf„rPå
, 256);

53 i‡(
	gbyãsRód
 < 0) {

54 
Pröt
("Receive failed\n");

55 
Clo£_Sockë
(
ns
);

59 
	gbuf„rPå
 +
byãsRód
;

60 
	gbuf„rIndex
 +
byãsRód
 / 4;

64 
	gª˚iveBuf„r
[
buf„rIndex
 - 1] != -1);

66 
Clo£_Sockë
(
ns
);

68 
Clo£_Sockë
(
fd
);

	@src/user/rm.c

14 
	~<c⁄io.h
>

15 
	~<fûeio.h
>

16 
	~<¥o˚ss.h
>

17 
	~<°rög.h
>

19 
	$maö
(
¨gc
, **
¨gv
) {

20 
rc
;

21 c⁄° *
fûíame
;

22 
boﬁ
 
ªcursive
 = 
Ál£
;

23 
VFS_Fûe_Sèt
 
°©
;

25 i‡(
¨gc
 =3 && !
	`°rcmp
(
¨gv
[1], "-r")) {

26 
ªcursive
 = 
åue
;

27 
¨gv
[1] =árgv[2];

28 } i‡(
¨gc
 != 2) {

29 
	`Pröt
("Usage:Ñm [-r] <filename>\n");

33 
fûíame
 = 
¨gv
[1];

35 
rc
 = 
	`Sèt
(
fûíame
, &
°©
);

36 i‡(
rc
 != 0) {

37 
	`Pröt
("FûênŸ found %s\n", 
¨gv
[1]);

41 i‡(!
°©
.
isDúe˘‹y
 || 
ªcursive
) {

42 
rc
 = 
	`Dñëe
(
¨gv
[1], 
ªcursive
);

43 i‡(
rc
 <= 0) {

44 
	`Pröt
("Eº‹ dñëög %s: %s\n", 
¨gv
[1], 
	`Gë_Eº‹_Såög
(
rc
));

48 
	`Pröt
("rm %s:ˇn'àdñëêDúe˘‹y yë\n", 
fûíame
);

52 
	}
}

	@src/user/route.c

1 
	~<√t.h
>

2 
	~<°rög.h
>

3 
	~<c⁄io.h
>

4 
	~<ù.h
>

6 
	#NUMBER_OF_ROUTES
 25

	)

8 
	gaddComm™d
[] = "add";

9 
	gdñComm™d
[] = "del";

11 
	gde°ö©i⁄O±i⁄
[] = "dest";

12 
	gg©ewayO±i⁄
[] = "gw";

13 
	g√tmaskO±i⁄
[] = "netmask";

14 
	gdevi˚O±i⁄
[] = "dev";

16 
	$maö
(
¨gc
, **
¨gv
) {

18 i‡(
¨gc
 == 1) {

19 
i
, 
rc
;

20 
IP_Rouã
 
rouãs
[
NUMBER_OF_ROUTES
];

21 
buf„r
[16];

22 
rc
 = 
	`Gë_Rouãs
(
rouãs
, 
NUMBER_OF_ROUTES
);

23 i‡(
rc
 < 0) {

24 
	`Pröt
("Cannot displayÑoutingÅable\n");

25  
rc
;

28 
	`Pröt
("%-16s%-16s%-16s%-6s%-8s%-10s\n",

32 
i
 = 0; i < 
rc
; ++i) {

33 
IP_Rouã
 *
rouã
 = 
rouãs
 + 
i
;

37 
	`¢¥ötf
(
buf„r
, 16, "%d.%d.%d.%d",

38 
rouã
->
de°ö©i⁄
.
±r
[0],

39 
rouã
->
de°ö©i⁄
.
±r
[1],

40 
rouã
->
de°ö©i⁄
.
±r
[2],Ñoute->destination.ptr[3]);

41 
	`Pröt
("%-16s", 
buf„r
);

45 i‡(
rouã
->
fG©eway
 == 1) {

46 
	`¢¥ötf
(
buf„r
, 16, "%d.%d.%d.%d",

47 
rouã
->
g©eway
.
±r
[0],

48 
rouã
->
g©eway
.
±r
[1],

49 
rouã
->
g©eway
.
±r
[2],Ñoute->gateway.ptr[3]);

50 
	`Pröt
("%-16s", 
buf„r
);

52 
	`Pröt
("%-16s", "*");

56 
	`¢¥ötf
(
buf„r
, 16, "%d.%d.%d.%d",

57 
rouã
->
√tmask
.
±r
[0],

58 
rouã
->
√tmask
.
±r
[1],

59 
rouã
->
√tmask
.
±r
[2],Ñoute->netmask.ptr[3]);

60 
	`Pröt
("%-16s", 
buf„r
);

63 *
buf„r
 = '\0';

64 i‡(
rouã
->
fUp
 == 1) {

65 
	`°rˇt
(
buf„r
, "U");

67 i‡(
rouã
->
fG©eway
 == 1) {

68 
	`°rˇt
(
buf„r
, "G");

71 
	`Pröt
("%-6s", 
buf„r
);

74 
	`Pröt
("%-8d", 
rouã
->
mëric
);

77 
	`Pröt
("%s\n", 
rouã
->
öãrÁ˚
);

81 
	`Pröt
("\n");

86 i‡(
¨gc
 > 2) {

88 i‡(
	`°rcmp
(
¨gv
[1], 
addComm™d
Ë=0 && !(
¨gc
 & 1)) {

89 
uch¨_t
 
de°ö©i⁄
[4];

90 
uch¨_t
 
√tmask
[4];

91 
uch¨_t
 
g©eway
[4];

92 *
devi˚
 = 
NULL
;

93 
boﬁ
 
fDe°ö©i⁄
 = 
Ál£
;

94 
boﬁ
 
fNëmask
 = 
Ál£
;

95 
boﬁ
 
fG©eway
 = 
Ál£
;

96 
boﬁ
 
fDevi˚
 = 
Ál£
;

97 
rc
;

99 
ödex
 = 2;

100 
ödex
 < 
¨gc
) {

101 i‡(
	`°rcmp
(
¨gv
[
ödex
], 
de°ö©i⁄O±i⁄
) == 0) {

102 
fDe°ö©i⁄
 = 
åue
;

103 
rc
 = 
	`P¨£_IP
(
¨gv
[
ödex
 + 1], 
de°ö©i⁄
);

104 i‡(!
rc
) {

105 
	`Pröt
("IP destinationáddress invalid\n");

106  
rc
;

109 
ödex
 += 2;

110 } i‡(
	`°rcmp
(
¨gv
[
ödex
], 
g©ewayO±i⁄
) == 0) {

111 
fG©eway
 = 
åue
;

112 
rc
 = 
	`P¨£_IP
(
¨gv
[
ödex
 + 1], 
g©eway
);

113 i‡(!
rc
) {

114 
	`Pröt
("IP gatewayáddress invalid\n");

115  
rc
;

118 
ödex
 += 2;

119 } i‡(
	`°rcmp
(
¨gv
[
ödex
], 
√tmaskO±i⁄
) == 0) {

120 
fNëmask
 = 
åue
;

121 
rc
 = 
	`P¨£_IP
(
¨gv
[
ödex
 + 1], 
√tmask
);

122 i‡(!
rc
) {

123 
	`Pröt
("Netmaskáddress invalid\n");

124  
rc
;

127 
ödex
 += 2;

128 } i‡(
	`°rcmp
(
¨gv
[
ödex
], 
devi˚O±i⁄
) == 0) {

129 
fDevi˚
 = 
åue
;

130 
devi˚
 = 
¨gv
[
ödex
 + 1];

131 
ödex
 += 2;

133 
	`Pröt
("UnreconziedÑoute option");

142 i‡(!
fDe°ö©i⁄
 || !
fNëmask
 || !
fDevi˚
) {

143 
	`Pröt
("NotÉnough informationÖrovidedÅoÅhe command\n");

148 
rc
 = 
	`Rouã_Add
(
de°ö©i⁄
, 
√tmask
, (
fG©eway
 ? 
g©eway
 : 
NULL
),

149 
devi˚
, 
	`°æí
(device));

150 i‡(
rc
 != 0) {

151 
	`Pröt
("Routeádd failed\n");

152  
rc
;

160 i‡(
	`°rcmp
(
¨gv
[1], 
dñComm™d
) == 0) {

161 
uch¨_t
 
de°ö©i⁄
[4];

162 
uch¨_t
 
√tmask
[4];

163 
boﬁ
 
fDe°ö©i⁄
 = 
Ál£
;

164 
boﬁ
 
fNëmask
 = 
Ál£
;

165 
rc
, 
ödex
 = 2;

167 i‡(
¨gc
 != 6) {

168 
Pröt


173 
ödex
 !
¨gc
) {

174 i‡(
	`°rcmp
(
¨gv
[
ödex
], 
de°ö©i⁄O±i⁄
) == 0) {

175 
fDe°ö©i⁄
 = 
åue
;

176 
rc
 = 
	`P¨£_IP
(
¨gv
[
ödex
 + 1], 
de°ö©i⁄
);

177 i‡(!
rc
) {

178 
	`Pröt
("IP destinationáddress invalid\n");

179  
rc
;

182 
ödex
 += 2;

183 } i‡(
	`°rcmp
(
¨gv
[
ödex
], 
√tmaskO±i⁄
) == 0) {

184 
fNëmask
 = 
åue
;

185 
rc
 = 
	`P¨£_IP
(
¨gv
[
ödex
 + 1], 
√tmask
);

186 i‡(!
rc
) {

187 
	`Pröt
("Netmaskáddress invalid\n");

188  
rc
;

191 
ödex
 += 2;

195 i‡(!
fDe°ö©i⁄
 || !
fNëmask
) {

196 
	`Pröt
("NotÉnough informationÖrovidedÅo command\n");

200 
rc
 = 
	`Rouã_Dñëe
(
de°ö©i⁄
, 
√tmask
);

201 i‡(
rc
 != 0) {

202 
	`Pröt
("Route delete command failed\n");

203  
rc
;

211 
	`Pröt
("Unreconized command options\n");

216 
	`Pröt
("Invalid command\n");

218 
	}
}

	@src/user/sched1.c

13 
	~<c⁄io.h
>

14 
	~<¥o˚ss.h
>

15 
	~<sched.h
>

16 
	~<£ma.h
>

17 
	~<°rög.h
>

19 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


20 
__©åibuã__
 ((
unu£d
))) {

22 
	gi
, 
	gj
;

23 
	ghﬁdsched3_£m
;

25 
	ghﬁdsched3_£m
 = 
O≥n_Sem≠h‹e
("holdsched3_sem", 0);

27 
	gi
 = 0; i < 10; i++) {

28 
	gj
 = 0; j < 20000; j++);

29 
Pröt
("1");

32 
V
(
hﬁdsched3_£m
);

34 
	gi
 = 0; i < 10; i++) {

35 
	gj
 = 0; j < 20000; j++);

36 
Pröt
("1");

39 
Clo£_Sem≠h‹e
(
hﬁdsched3_£m
);

	@src/user/sched2.c

13 
	~<c⁄io.h
>

14 
	~<¥o˚ss.h
>

15 
	~<sched.h
>

16 
	~<£ma.h
>

17 
	~<°rög.h
>

19 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


20 
__©åibuã__
 ((
unu£d
))) {

22 
	gi
, 
	gj
;

24 
	gi
 = 0; i < 20; i++) {

25 
	gj
 = 0; j < 20000; j++);

26 
Pröt
("2");

	@src/user/sched3.c

13 
	~<c⁄io.h
>

14 
	~<¥o˚ss.h
>

15 
	~<sched.h
>

16 
	~<£ma.h
>

17 
	~<°rög.h
>

19 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


20 
__©åibuã__
 ((
unu£d
))) {

22 
	ghﬁdsched3_£m
;

24 
	ghﬁdsched3_£m
 = 
O≥n_Sem≠h‹e
("holdsched3_sem", 0);

26 
P
(
hﬁdsched3_£m
);

27 
Pröt
("3");

28 
V
(
hﬁdsched3_£m
);

30 
Clo£_Sem≠h‹e
(
hﬁdsched3_£m
);

	@src/user/schedtst.c

13 
	~<c⁄io.h
>

14 
	~<¥o˚ss.h
>

15 
	~<sched.h
>

16 
	~<£ma.h
>

17 
	~<°rög.h
>

19 #i‡!
deföed
 (
NULL
)

20 
	#NULL
 0

	)

23 
	$maö
(
¨gc
, **
¨gv
) {

24 
pﬁicy
 = -1;

25 
hﬁdsched3_£m
;

27 
id1
, 
id2
, 
id3
;

28 
hﬁdsched3_£m
 = 
	`O≥n_Sem≠h‹e
("holdsched3_sem", 0);

30 i‡(
¨gc
 >= 2) {

31 i‡(!
	`°rcmp
(
¨gv
[1], "rr")) {

32 
pﬁicy
 = 0;

33 } i‡(!
	`°rcmp
(
¨gv
[1], "mys")) {

34 
pﬁicy
 = 1;

36 
	`Pröt
("ußge: %†[º|mys]\n", 
¨gv
[0]);

37 
	`Exô
(1);

39 
	`Së_Schedulög_Pﬁicy
(
pﬁicy
, 10);

41 
	`Pröt
("ußge: %†[º|mys]\n", 
¨gv
[0]);

42 
	`Exô
(1);

45 
id3
 = 
	`S∑wn_Progøm
("/c/sched3.exe", "/c/sched3.exe", 0);

46 
id1
 = 
	`S∑wn_Progøm
("/c/sched1.exe", "/c/sched1.exe", 0);

47 
id2
 = 
	`S∑wn_Progøm
("/c/sched2.exe", "/c/sched2.exe", 0);

50 
	`Waô
(
id1
);

51 
	`Waô
(
id2
);

52 
	`Waô
(
id3
);

54 
	`Pröt
("\n");

56 
	`Clo£_Sem≠h‹e
(
hﬁdsched3_£m
);

59 
	}
}

	@src/user/sem-p1.c

13 
	~<c⁄io.h
>

14 
	~<¥o˚ss.h
>

15 
	~<sched.h
>

16 
	~<£ma.h
>

17 
	~<°rög.h
>

19 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


20 
__©åibuã__
 ((
unu£d
))) {

22 
	gi
;

23 
	gs¸_£m
;

24 
	g¥od_£m
, 
	gc⁄s_£m
;

26 
	gs¸_£m
 = 
O≥n_Sem≠h‹e
("screen", 1);

27 
	g¥od_£m
 = 
O≥n_Sem≠h‹e
("prod_sem", 0);

28 
	gc⁄s_£m
 = 
O≥n_Sem≠h‹e
("cons_sem", 1);

30 
	gi
 = 0; i < 5; i++) {

31 
P
(
c⁄s_£m
);

32 
Pröt
("Produ˚d %d\n", 
i
);

33 
V
(
¥od_£m
);

36 
Clo£_Sem≠h‹e
(
s¸_£m
);

37 
Clo£_Sem≠h‹e
(
¥od_£m
);

38 
Clo£_Sem≠h‹e
(
c⁄s_£m
);

	@src/user/sem-p2.c

14 
	~<c⁄io.h
>

15 
	~<¥o˚ss.h
>

16 
	~<sched.h
>

17 
	~<£ma.h
>

18 
	~<°rög.h
>

20 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


21 
__©åibuã__
 ((
unu£d
))) {

22 
	gi
;

23 
	gs¸_£m
;

24 
	g¥od_£m
, 
	gc⁄s_£m
;

25 
	ghﬁdp3_£m
;

27 
	gs¸_£m
 = 
O≥n_Sem≠h‹e
("screen", 1);

28 
	g¥od_£m
 = 
O≥n_Sem≠h‹e
("prod_sem", 0);

29 
	gc⁄s_£m
 = 
O≥n_Sem≠h‹e
("cons_sem", 1);

30 
	ghﬁdp3_£m
 = 
O≥n_Sem≠h‹e
("holdp3_sem", 0);

32 
	gi
 = 0; i < 5; i++) {

33 
P
(
¥od_£m
);

34 
Pröt
("C⁄sumed %d\n", 
i
);

35 
V
(
c⁄s_£m
);

38 
V
(
hﬁdp3_£m
);

40 
Clo£_Sem≠h‹e
(
s¸_£m
);

41 
Clo£_Sem≠h‹e
(
¥od_£m
);

42 
Clo£_Sem≠h‹e
(
c⁄s_£m
);

43 
Clo£_Sem≠h‹e
(
hﬁdp3_£m
);

	@src/user/sem-p3.c

13 
	~<c⁄io.h
>

14 
	~<¥o˚ss.h
>

15 
	~<sched.h
>

16 
	~<£ma.h
>

17 
	~<°rög.h
>

19 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


20 
__©åibuã__
 ((
unu£d
))) {

21 
	gs¸_£m
, 
	ghﬁdp3_£m
;

22 
	gs¸_£m
 = 
O≥n_Sem≠h‹e
("screen", 1);

23 
	ghﬁdp3_£m
 = 
O≥n_Sem≠h‹e
("holdp3_sem", 0);

25 
P
(
hﬁdp3_£m
);

27 
P
(
s¸_£m
);

28 
Pröt
("p3Éxecuted\n");

29 
V
(
s¸_£m
);

31 
V
(
hﬁdp3_£m
);

33 
Clo£_Sem≠h‹e
(
s¸_£m
);

34 
Clo£_Sem≠h‹e
(
hﬁdp3_£m
);

	@src/user/sem-ping.c

13 
	~<c⁄io.h
>

14 
	~<¥o˚ss.h
>

15 
	~<sched.h
>

16 
	~<£ma.h
>

17 
	~<°rög.h
>

19 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


20 
__©åibuã__
 ((
unu£d
))) {

21 
	gi
, 
	gj
;

22 
	gs¸_£m
;

23 
	gtime
;

24 
	gpög
, 
	gp⁄g
;

26 
	gtime
 = 
Gë_Time_Of_Day
();

27 
	gs¸_£m
 = 
O≥n_Sem≠h‹e
("screen", 1);

28 
	gpög
 = 
O≥n_Sem≠h‹e
("ping", 1);

29 
	gp⁄g
 = 
O≥n_Sem≠h‹e
("pong", 0);

31 
	gi
 = 0; i < 5; i++) {

32 
P
(
p⁄g
);

34 
P
(
s¸_£m
);

35 
Pröt
("Ping\n");

36 
V
(
s¸_£m
);

38 
	gj
 = 0; j < 35; j++);

39 
V
(
pög
);

42 
	gtime
 = 
Gë_Time_Of_Day
(Ë- 
time
;

43 
P
(
s¸_£m
);

44 
Pröt
("Pro˚s†Pög i†d⁄ê©Åime: %d\n", 
time
);

45 
V
(
s¸_£m
);

47 
Clo£_Sem≠h‹e
(
p⁄g
);

48 
Clo£_Sem≠h‹e
(
pög
);

49 
Clo£_Sem≠h‹e
(
s¸_£m
);

	@src/user/sem-pong.c

13 
	~<c⁄io.h
>

14 
	~<¥o˚ss.h
>

15 
	~<sched.h
>

16 
	~<£ma.h
>

17 
	~<°rög.h
>

19 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


20 
__©åibuã__
 ((
unu£d
))) {

21 
	gi
, 
	gj
;

22 
	gs¸_£m
;

23 
	gtime
;

24 
	gpög
, 
	gp⁄g
;

26 
	gtime
 = 
Gë_Time_Of_Day
();

27 
	gs¸_£m
 = 
O≥n_Sem≠h‹e
("screen", 1);

28 
	gpög
 = 
O≥n_Sem≠h‹e
("ping", 1);

29 
	gp⁄g
 = 
O≥n_Sem≠h‹e
("pong", 0);

31 
	gi
 = 0; i < 5; i++) {

32 
P
(
pög
);

34 
P
(
s¸_£m
);

35 
Pröt
("Pong\n");

36 
V
(
s¸_£m
);

38 
	gj
 = 0; j < 35; j++);

39 
V
(
p⁄g
);

42 
	gtime
 = 
Gë_Time_Of_Day
(Ë- 
time
;

43 
P
(
s¸_£m
);

44 
Pröt
("Pro˚s†P⁄g i†d⁄ê©Åime: %d\n", 
time
);

45 
V
(
s¸_£m
);

	@src/user/semtest.c

14 
	~"libu£r.h
"

15 
	~"c⁄io.h
"

17 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


18 
__©åibuã__
 ((
unu£d
))) {

19 
	g£mkey
, 
	gªsu…
;

21 
Pröt
("Open_Semaphore()...\n");

22 
	g£mkey
 = 
O≥n_Sem≠h‹e
("semtest", 3);

23 
Pröt
("O≥n_Sem≠h‹e(Ëªtu∫ed %d\n", 
£mkey
);

25 i‡(
	g£mkey
 < 0)

28 
Pröt
("P()...\n");

29 
	gªsu…
 = 
P
(
£mkey
);

30 
Pröt
("P(Ëªtu∫ed %d\n", 
ªsu…
);

32 
Pröt
("P()...\n");

33 
	gªsu…
 = 
P
(
£mkey
);

34 
Pröt
("P(Ëªtu∫ed %d\n", 
ªsu…
);

36 
Pröt
("V()...\n");

37 
	gªsu…
 = 
V
(
£mkey
);

38 
Pröt
("V(Ëªtu∫ed %d\n", 
ªsu…
);

41 
Pröt
("Close_Semaphore()...\n");

42 
	gªsu…
 = 
Clo£_Sem≠h‹e
(
£mkey
);

43 
Pröt
("Clo£_Sem≠h‹e(Ëªtu∫ed %d\n", 
ªsu…
);

	@src/user/semtest1.c

13 
	~<c⁄io.h
>

14 
	~<¥o˚ss.h
>

15 
	~<sched.h
>

16 
	~<£ma.h
>

17 
	~<°rög.h
>

19 #i‡!
deföed
 (
NULL
)

20 
	#NULL
 0

	)

23 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


24 
__©åibuã__
 ((
unu£d
))) {

25 
	gs¸_£m
, 
	ghﬁdp3_£m
;

26 
	gid1
, 
	gid2
, 
	gid3
;

28 
	ghﬁdp3_£m
 = 
O≥n_Sem≠h‹e
("holdp3_sem", 0);

29 
	gs¸_£m
 = 
O≥n_Sem≠h‹e
("screen", 1);

32 
P
(
s¸_£m
);

33 
Pröt
("Semtest1 begins\n");

34 
V
(
s¸_£m
);

37 
	gid3
 = 
S∑wn_Progøm
("/c/p3.exe", "/c/p3.exe", 0);

38 
P
(
s¸_£m
);

39 
Pröt
("p3 created\n");

40 
V
(
s¸_£m
);

41 
	gid1
 = 
S∑wn_Progøm
("/c/p1.exe", "/c/p2.exe", 0);

42 
	gid2
 = 
S∑wn_Progøm
("/c/p2.exe", "/c/p1.exe", 0);

45 
Waô
(
id1
);

46 
Waô
(
id2
);

47 
Waô
(
id3
);

49 
Clo£_Sem≠h‹e
(
s¸_£m
);

50 
Clo£_Sem≠h‹e
(
hﬁdp3_£m
);

	@src/user/semtest2.c

13 
	~<c⁄io.h
>

14 
	~<¥o˚ss.h
>

15 
	~<sched.h
>

16 
	~<£ma.h
>

17 
	~<°rög.h
>

19 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


20 
__©åibuã__
 ((
unu£d
))) {

21 
	g£mkey
, 
	gªsu…
;

24 
	gªsu…
 = 
P
(0);

25 i‡(
	gªsu…
 < 0)

26 
Pröt
("+ Identified unauthorized call\n");

28 
Pröt
("- Not checking foráuthority\n");

31 
	gªsu…
 = 
P
(-1);

32 i‡(
	gªsu…
 < 0)

33 
Pröt
("+ Identified invalid SID\n");

35 
Pröt
("- Not checking for invalid SID\n");

37 
Pröt
("Open_Semaphore() called\n");

38 
	g£mkey
 = 
O≥n_Sem≠h‹e
("test", 1);

39 
Pröt
("O≥n_Sem≠h‹e(Ëªtu∫ed %d\n", 
£mkey
);

41 i‡(
	g£mkey
 < 0)

44 
Pröt
("P() called\n");

45 
	gªsu…
 = 
P
(
£mkey
);

46 
Pröt
("P(Ëªtu∫ed %d\n", 
ªsu…
);

48 
Pröt
("V() called\n");

49 
	gªsu…
 = 
V
(
£mkey
);

50 
Pröt
("V(Ëªtu∫ed %d\n", 
ªsu…
);

53 
Pröt
("Close_Semaphore() called\n");

54 
	gªsu…
 = 
Clo£_Sem≠h‹e
(
£mkey
);

55 
Pröt
("Clo£_Sem≠h‹e(Ëªtu∫ed %d\n", 
ªsu…
);

58 
	gªsu…
 = 
V
(
£mkey
);

59 i‡(
	gªsu…
 < 0)

60 
Pröt
("+ Removedáuthorityáfter finish\n");

62 
Pröt
("- NotÑemovedáuthorityáfter finish\n");

	@src/user/sendbyte.c

3 
	~<sockë.h
>

4 
	~<c⁄io.h
>

5 
	~<°rög.h
>

6 
	~<√t.h
>

7 
	~<ù.h
>

9 
	#SEND_BUFFER_SIZE
 2000

	)

11 
	g£ndBuf„r
[
SEND_BUFFER_SIZE
];

13 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


14 
__©åibuã__
 ((
unu£d
))) {

15 
uch¨_t
 
	gaddªss
[4];

16 
	grc
, 
	gfd
;

17 
	gbyãs
;

19 
	gfd
 = 
Sockë
(
SOCK_STREAM
, 0);

20 i‡(
	gfd
 < 0) {

21 
Pröt
("CouldÇot create socket\n");

22  
	gfd
;

25 
P¨£_IP
(
¨gv
[1], 
addªss
);

28 
	grc
 = 
C⁄√˘
(
fd
, 4600, 
addªss
);

29 i‡(
	grc
 != 0) {

30 
Pröt
("CouldÇŸ c⁄√˘Åÿ%s:4600\n", 
¨gv
[1]);

34 
	gi
;

35 
	gcurVÆue
 = 0;

36 
	gbyãs
 = 
©oi
(
¨gv
[2]);

37 
	gbyãs
 != 0) {

38 
byãsToSíd
 = 
MIN
(
byãs
, 
SEND_BUFFER_SIZE
 / 4);

39 
	gi
 = 0; i < 
	gbyãsToSíd
; ++i)

40 
	g£ndBuf„r
[
i
] = 
curVÆue
++;

42 
	grc
 = 
Síd
(
fd
, 
£ndBuf„r
, 
byãsToSíd
 * 4);

43 i‡(
	grc
 < 0) {

44 
Pröt
("CouldÇot send bytes\n");

48 
	gbyãs
 -
byãsToSíd
;

52 
	g£ndBuf„r
[0] = -1;

54 
	grc
 = 
Síd
(
fd
, 
£ndBuf„r
, 4);

55 i‡(
	grc
 != 0) {

56 
Pröt
("CouldÇot send EOF\n");

59 
Clo£_Sockë
(
fd
);

	@src/user/setacl.c

3 
	~<c⁄io.h
>

4 
	~<fûeio.h
>

5 
	~<¥o˚ss.h
>

6 
	~<°rög.h
>

8 
	$maö
(
¨gc
, *
¨gv
[]) {

9 
ªt
;

10 
≥rm
;

12 i‡(
¨gc
 != 4) {

13 
	`Pröt
("Usage: setacl <file> <uid> [r | w |Ñw | owner | clear\n");

14 
	`Exô
(-1);

17 i‡(!
	`°rcmp
(
¨gv
[3], "r")) {

18 
≥rm
 = 
O_READ
;

19 } i‡(!
	`°rcmp
(
¨gv
[3], "rw")) {

20 
≥rm
 = 
O_READ
 | 
O_WRITE
;

21 } i‡(!
	`°rcmp
(
¨gv
[3], "w")) {

22 
≥rm
 = 
O_WRITE
;

23 } i‡(!
	`°rcmp
(
¨gv
[3], "owner")) {

24 
≥rm
 = 
O_OWNER
;

25 } i‡(!
	`°rcmp
(
¨gv
[3], "clear")) {

26 
≥rm
 = 0;

28 
	`Pröt
("Usage: setacl <file> <uid> [r | w |Ñw | clear\n");

29 
	`Exô
(-1);

32 
ªt
 = 
	`SëA˛
(
¨gv
[1], 
	`©oi
◊rgv[2]), 
≥rm
);

33 i‡(
ªt
) {

34 
	`Pröt
("SëA˛Ñëu∫ed %d\n", 
ªt
);

37 
	}
}

	@src/user/setuid.c

3 
	~<c⁄io.h
>

4 
	~<fûeio.h
>

5 
	~<¥o˚ss.h
>

6 
	~<°rög.h
>

8 
	$maö
(
¨gc
, *
¨gv
[]) {

9 
ªt
;

10 
≥rm
;

12 i‡(
¨gc
 != 3) {

13 
	`Pröt
("Usage: setuid <file> set | clear\n");

14 
	`Exô
(-1);

17 i‡(!
	`°rcmp
(
¨gv
[2], "set")) {

18 
≥rm
 = 1;

19 } i‡(!
	`°rcmp
(
¨gv
[2], "clear")) {

20 
≥rm
 = 0;

22 
	`Pröt
("Usage: setuid <file> set | clear\n");

23 
	`Exô
(-1);

26 
ªt
 = 
	`SëSëUid
(
¨gv
[1], 
≥rm
);

27 i‡(
ªt
) {

28 
	`Pröt
("SëSëuidÑëu∫ed %d\n", 
ªt
);

31 
	}
}

	@src/user/shell.c

18 
	~<gìkos/î∫o.h
>

19 
	~<c⁄io.h
>

20 
	~<¥o˚ss.h
>

21 
	~<°rög.h
>

23 
	#BUFSIZE
 79

	)

24 
	#DEFAULT_PATH
 "/c:/a"

	)

28 
	#ISSPACE
(
c
Ë((cË=' ' || (cË='\t')

	)

30 
	sPro˚ss
 {

31 
	m¥ogøm
[
BUFSIZE
 + 1];

32 *
	mcomm™d
;

33 
	mpid
;

36 *
Såù_Lódög_Whôe•a˚
(*
s
);

37 
Trim_Newlöe
(*
s
);

38 *
C›y_Tokí
(*
tokí
, *
s
);

39 
S∑wn_SögÀ_Comm™d
(
Pro˚ss
 *
¥oc
, c⁄° *
∑th
);

41 
boﬁ
 
	$Idítify_™d_Såù_Am≥rßnd
(*
comm™d
) {

42 *
c
;

43 
c
 = 
comm™d
; *c != '\0'; c++);

44 
c
--;

45 i‡(*
c
 == '&') {

46 *
c
 = '\0';

47 
c
--; 
	`ISSPACE
(*c); c--) {

48 *
c
 = '\0';

50  
åue
;

52  
Ál£
;

53 
	}
}

55 
boﬁ
 
	gbackground
;

57 
	gexôCodes
 = 0;

59 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


60 
__©åibuã__
 ((
unu£d
))) {

61 
	gcomm™dBuf
[
BUFSIZE
 + 1];

62 
Pro˚ss
 
	g¥oc
;

63 
	g∑th
[
BUFSIZE
 + 1] = 
DEFAULT_PATH
;

64 *
	gcomm™d
;

67 
Pröt
("\x1B[37m");

69 
	gåue
) {

71 
Pröt
("\x1B[1;36m$\x1B[37m ");

74 
Ród_Löe
(
comm™dBuf
, (commandBuf));

75 
	gcomm™d
 = 
Såù_Lódög_Whôe•a˚
(
comm™dBuf
);

76 
Trim_Newlöe
(
comm™d
);

77 
	gbackground
 = 
Idítify_™d_Såù_Am≥rßnd
(
comm™d
);

82 i‡(
°rcmp
(
comm™d
, "exit") == 0) {

85 } i‡(
°rcmp
(
comm™d
, "pid") == 0) {

87 
Pröt
("%d\n", 
Gë_PID
());

89 } i‡(
°rcmp
(
comm™d
, "exitCodes") == 0) {

91 
exôCodes
 = 1;

93 } i‡(
°∫cmp
(
comm™d
, "path=", 5) == 0) {

95 
°r˝y
(
∑th
, 
comm™d
 + 5);

97 } i‡(
°rcmp
(
comm™d
, "") == 0) {

102 
	g¥oc
.
	gcomm™d
 = 
Såù_Lódög_Whôe•a˚
(
comm™d
);

103 i‡(!
C›y_Tokí
(
¥oc
.
¥ogøm
,Öroc.
comm™d
)) {

104 
Pröt
("Error: invalid command\n");

107 
S∑wn_SögÀ_Comm™d
(&
¥oc
, 
∑th
);

110 
Pröt_Såög
("DONE!\n");

119 *
	$Såù_Lódög_Whôe•a˚
(*
s
) {

120 
	`ISSPACE
(*
s
))

121 ++
s
;

122  
s
;

123 
	}
}

129 
	$Trim_Newlöe
(*
s
) {

130 *
c
 = 
	`°rchr
(
s
, '\n');

131 i‡(
c
 != 0)

132 *
c
 = '\0';

133 
	}
}

142 *
	$C›y_Tokí
(*
tokí
, *
s
) {

143 *
t
 = 
tokí
;

145 
	`ISSPACE
(*
s
))

146 ++
s
;

147 *
s
 !'\0' && !
	`ISSPACE
(*s))

148 *
t
++ = *
s
++;

149 *
t
 = '\0';

151  *
tokí
 !'\0' ? 
s
 : 0;

152 
	}
}

160 
	$S∑wn_SögÀ_Comm™d
(
Pro˚ss
 *
¥oc
, c⁄° *
∑th
) {

161 
pid
;

163 
pid
 = 
¥oc
->pid =

164 
	`S∑wn_Wôh_P©h
(
¥oc
->
¥ogøm
,Öroc->
comm™d
, 
∑th
, 
background
);

165 i‡(
pid
 < 0) {

166 
	`Pröt
("CouldÇŸ s∑w¿¥o˚ss: %s\n", 
	`Gë_Eº‹_Såög
(
pid
));

168 i‡(
background
) {

169 
	`Pröt
("[%d]\n", 
pid
);

171 
exôCode
 = 
	`Waô
(
pid
);

172 i‡(
exôCodes
)

173 
	`Pröt
("Exô codêwa†%d\n", 
exôCode
);

176 
	}
}

	@src/user/spin.c

12 
	~<c⁄io.h
>

13 
	~<¥o˚ss.h
>

14 
	~<sched.h
>

15 
	~<£ma.h
>

16 
	~<°rög.h
>

17 
	~<fûeio.h
>

18 
	~<gìkos/î∫o.h
>

20 
	$maö
(
¨gc
, **
¨gv
) {

21 
rc
;

26 
	}
}

	@src/user/sum.c

15 
	~<fûeio.h
>

16 
	~<c⁄io.h
>

17 
	~<¥o˚ss.h
>

19 
	gbuf„r
[1024];

23 
	$maö
(
¨gc
, *
¨gv
[]) {

24 
i
;

25 
fd
;

26 
ch
;

27 
checksum
 = 0;

28 
cou¡
;

29 
blocksRód
 = 0;

31 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_READ
);

32 i‡(
fd
 < 0) {

33 
	`Pröt
("ERROR: u¬abÀÅÿ›í %s\n", 
¨gv
[1]);

34 
	`Exô
(-1);

37 
cou¡
 = 
	`Ród
(
fd
, 
buf„r
, 1024);

38 i‡(
cou¡
 <= 0)

40 
blocksRód
++;

41 
i
 = 0; i < 
cou¡
; i++) {

42 
ch
 = 
buf„r
[
i
];

43 
checksum
 = (checksum >> 1) + ((checksum & 1) << 15);

44 
checksum
 +
ch
;

45 
checksum
 &= 0xffff;

49 
	`Pröt
("%d %d\n", 
checksum
, 
blocksRód
);

51 
	}
}

	@src/user/sync.c

17 
	~<c⁄io.h
>

18 
	~<¥o˚ss.h
>

19 
	~<fûeio.h
>

21 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


22 
__©åibuã__
 ((
unu£d
))) {

23 
	grc
;

25 
	grc
 = 
Sync
();

26 i‡(
	grc
 != 0)

27 
Pröt
("CouldÇŸ syn¯fûesy°ems: %s\n", 
Gë_Eº‹_Såög
(
rc
));

29  !(
	grc
 == 0);

	@src/user/time.c

13 
	~<c⁄io.h
>

14 
	~<sched.h
>

16 
	$maö
() {

17 
	`Pröt
("%d\n", 
	`Gë_Time_Of_Day
());

19 
	}
}

	@src/user/touch.c

18 
	~<c⁄io.h
>

19 
	~<fûeio.h
>

20 
	~<¥o˚ss.h
>

22 
	$Pröt_Eº‹
(c⁄° *
msg
, 
îr
) {

23 
	`Pröt
("%s: %s\n", 
msg
, 
	`Gë_Eº‹_Såög
(
îr
));

24 
	`Exô
(1);

25 
	}
}

27 
	$maö
(
¨gc
, **
¨gv
) {

28 
fd
;

30 i‡(
¨gc
 != 2) {

31 
	`Pröt
("Usage:Åouch <filename>\n");

32 
	`Exô
(1);

35 
fd
 = 
	`O≥n
(
¨gv
[1], 
O_CREATE
 | 
O_WRITE
 | 
O_RECURSIVE
);

36 i‡(
fd
 < 0)

37 
	`Pröt_Eº‹
("CouldÇŸ o≥¿fûe", 
fd
);

38 i‡(
	`Clo£
(
fd
) < 0)

39 
	`Pröt_Eº‹
("CouldÇŸ clo£ fûe", 
fd
);

42 
	}
}

	@src/user/type.c

13 
	~<c⁄io.h
>

14 
	~<fûeio.h
>

15 
	~<¥o˚ss.h
>

17 
	$Pröt_Eº‹
(c⁄° *
msg
, 
fd
) {

18 
	`Pröt
("%s: %s\n", 
msg
, 
	`Gë_Eº‹_Såög
(
fd
));

19 
	`Exô
(1);

20 
	}
}

22 
	#BUFSIZE
 256

	)

24 
	$maö
(
¨gc
, **
¨gv
) {

25 
fd
, 
rc
;

26 *
fûíame
;

27 
buf
[
BUFSIZE
];

29 i‡(
¨gc
 != 2) {

30 
	`Pröt
("Ußge: %†<fûíame>\n", 
¨gv
[0]);

31 
	`Exô
(1);

33 
fûíame
 = 
¨gv
[1];

35 
fd
 = 
	`O≥n
(
fûíame
, 
O_READ
);

36 i‡(
fd
 < 0)

37 
	`Pröt_Eº‹
("CouldÇŸ o≥¿fûe", 
fd
);

40 
Àn
 = 
	`Ród
(
fd
, 
buf
, 
BUFSIZE
);

41 i‡(
Àn
 == 0)

43 i‡(
Àn
 < 0)

44 
	`Pröt_Eº‹
("RódÉº‹", 
Àn
);

46 
i
;

47 
i
 = 0; i < 
Àn
; ++i)

48 
	`Put_Ch¨
(
buf
[
i
]);

52 
rc
 = 
	`Clo£
(
fd
);

53 i‡(
rc
 < 0)

54 
	`Pröt_Eº‹
("CouldÇŸ clo£ fûe", 
rc
);

57 
	}
}

	@src/user/whoami.c

3 
	~<c⁄io.h
>

4 
	~<fûeio.h
>

5 
	~<¥o˚ss.h
>

6 
	~<°rög.h
>

8 
	$maö
(
¨gc
, *
¨gv
[]) {

9 
	`Pröt
("my uid = %d\n", 
	`GëUid
());

10 i‡(
¨gc
 > 1) {

11 
ex≥˘edUid
 = 
	`©oi
(
¨gv
[1]);

12 i‡(
ex≥˘edUid
 =
	`GëUid
()) {

13 
	`Exô
(0);

15 
	`Exô
(-1);

19 
	}
}

	@src/user/workload.c

44 
	~<c⁄io.h
>

45 
	~<¥o˚ss.h
>

46 
	~<sched.h
>

47 
	~<£ma.h
>

48 
	~<°rög.h
>

50 #i‡!
deföed
 (
NULL
)

51 
	#NULL
 0

	)

54 
	$maö
(
¨gc
, **
¨gv
) {

55 
pﬁicy
 = -1;

56 
°¨t
;

57 
ñ≠£d
;

58 
s¸_£m
;

59 
id1
, 
id2
, 
id3
;

61 i‡(
¨gc
 == 2) {

62 i‡(!
	`°rcmp
(
¨gv
[1], "rr")) {

63 
pﬁicy
 = 0;

64 } i‡(!
	`°rcmp
(
¨gv
[1], "mys")) {

65 
pﬁicy
 = 1;

67 
	`Pröt
("ußge: %†[º|mys]\n", 
¨gv
[0]);

68 
	`Exô
(1);

70 
	`Së_Schedulög_Pﬁicy
(
pﬁicy
, 20);

72 
	`Pröt
("ußge: %†[º|mys]\n", 
¨gv
[0]);

73 
	`Exô
(1);

76 
°¨t
 = 
	`Gë_Time_Of_Day
();

77 
s¸_£m
 = 
	`O≥n_Sem≠h‹e
("screen", 1);

79 
	`P
(
s¸_£m
);

80 
	`Pröt
("************* Start Workload Generator *********\n");

81 
	`V
(
s¸_£m
);

83 
id1
 = 
	`S∑wn_Progøm
("/c/long.exe", "/c/long.exe", 0);

84 
	`P
(
s¸_£m
);

85 
	`Pröt
("Pro˚s†L⁄g ha†bì¿¸óãd wôh ID = %d\n", 
id1
);

86 
	`V
(
s¸_£m
);

89 
id2
 = 
	`S∑wn_Progøm
("/c/long.exe", "/c/long.exe", 0);

91 
	`P
(
s¸_£m
);

92 
	`Pröt
("Pro˚s†L⁄g #1 ha†bì¿¸óãd wôh ID = %d\n", 
id2
);

93 
	`V
(
s¸_£m
);

95 #ifde‡
nŸdef


96 
id2
 = 
	`S∑wn_Progøm
("/c/ping.exe", "/c/ping.exe", 0);

98 
	`P
(
s¸_£m
);

99 
	`Pröt
("Pro˚s†Pög ha†bì¿¸óãd wôh ID = %d\n", 
id2
);

100 
	`V
(
s¸_£m
);

102 
id3
 = 
	`S∑wn_Progøm
("/c/pong.exe", "/c/pong.exe", 0);

103 
	`P
(
s¸_£m
);

104 
	`Pröt
("Pro˚s†P⁄g ha†bì¿¸óãd wôh ID = %d\n", 
id3
);

105 
	`V
(
s¸_£m
);

108 
	`Waô
(
id1
);

109 
	`Waô
(
id2
);

112 
ñ≠£d
 = 
	`Gë_Time_Of_Day
(Ë- 
°¨t
;

113 
	`Pröt
("\nTe°†Com∂ëedáà%d\n", 
ñ≠£d
);

115 
	}
}

	@src/user/write.c

14 
	~<c⁄io.h
>

15 
	~<¥o˚ss.h
>

16 
	~<fûeio.h
>

18 
maö
(
¨gc
 
__©åibuã__
 ((
unu£d
)), **
¨gv


19 
__©åibuã__
 ((
unu£d
))) {

20 
Pröt
("Formatting...\n");

21 
	gpid
;

22 
	gpid
 = 
S∑wn_Wôh_P©h
("gfs2f.exe", "gfs2f.exe ide1 10", "/c:/a", 0);

23 i‡(
Waô
(
pid
) >= 0) {

24 
Pröt
("Mounting...\n");

25 i‡(
Mou¡
("ide1", "/d", "gosfs") >= 0) {

26 
Pröt
("Writing...\n");

27 
	gfd
 = 
O≥n
("/d/ã°Wrôe", 
O_WRITE
 | 
O_CREATE
);

28 i‡(
	gfd
 >= 0) {

29 
buf„r
[100] =

31 i‡(
Wrôe
(
fd
, 
buf„r
, 100) == 100)

32 
Pröt
("Wrote file /d/testWrite\n");

34 
Pröt
("Sync...\n");

35 
Sync
();

36 
Pröt
("Done sync\n");

	@src/user/z.c

1 
	~<c⁄io.h
>

3 
	$maö
(
¨gc
, **
¨gv
)

5 
	`Pröt
("Hello Wodsfarld !!!\n");

7 
	}
}

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


120 #unde‡
°©ic_as£π


121 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/huge_vÆ.h
>

33 #ifde‡
__USE_ISOC99


34 
	~<bôs/huge_vÆf.h
>

35 
	~<bôs/huge_vÆl.h
>

38 
	~<bôs/öf.h
>

41 
	~<bôs/«n.h
>

45 
	~<bôs/m©hdef.h
>

52 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

53 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

54 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

56 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

57 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

58 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

59 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

61 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

62 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

63 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

65 
	#_MdoubÀ_
 

	)

66 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

67 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

68 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

69 
	~<bôs/m©hˇŒs.h
>

70 #unde‡
_MdoubÀ_


71 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


72 #unde‡
_MdoubÀ_END_NAMESPACE


73 #unde‡
__MATH_PRECNAME


75 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


81 #i‚de‡
_MÊﬂt_


82 
	#_MÊﬂt_
 

	)

84 
	#_MdoubÀ_
 
_MÊﬂt_


	)

85 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

86 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

87 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

88 
	~<bôs/m©hˇŒs.h
>

89 #unde‡
_MdoubÀ_


90 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


91 #unde‡
_MdoubÀ_END_NAMESPACE


92 #unde‡
__MATH_PRECNAME


94 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

95 || 
deföed
 
__LDBL_COMPAT


96 #ifde‡
__LDBL_COMPAT


98 #ifde‡
__USE_ISOC99


99 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

100 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

101 #ifde‡
__REDIRECT_NTH


102 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

103 
__∆dbl_√xâow¨df
)

104 
	`__©åibuã__
 ((
__c⁄°__
));

105 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

106 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

107 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

108 (
__x
, 
__y
),

109 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 #unde‡
__MATHDECL_1


114 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

115 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

116 
¨gs
, 
Æüs
)

	)

117 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

118 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

124 #i‚de‡
_Ml⁄g_doubÀ_


125 
	#_Ml⁄g_doubÀ_
 

	)

127 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

128 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

129 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

130 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

131 
	#__MATH_DECLARE_LDOUBLE
 1

	)

132 
	~<bôs/m©hˇŒs.h
>

133 #unde‡
_MdoubÀ_


134 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


135 #unde‡
_MdoubÀ_END_NAMESPACE


136 #unde‡
__MATH_PRECNAME


141 #unde‡
__MATHDECL_1


142 #unde‡
__MATHDECL


143 #unde‡
__MATHCALL


146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


148 
signgam
;

153 #ifde‡
__USE_ISOC99


191 
FP_NAN
 =

192 
	#FP_NAN
 0

	)

193 
FP_NAN
,

194 
FP_INFINITE
 =

195 
	#FP_INFINITE
 1

	)

196 
FP_INFINITE
,

197 
FP_ZERO
 =

198 
	#FP_ZERO
 2

	)

199 
FP_ZERO
,

200 
FP_SUBNORMAL
 =

201 
	#FP_SUBNORMAL
 3

	)

202 
FP_SUBNORMAL
,

203 
FP_NORMAL
 =

204 
	#FP_NORMAL
 4

	)

205 
FP_NORMAL


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
	#Â˛assify
(
x
) \

211 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

213 
	#Â˛assify
(
x
) \

214 ( (
x
) ==  () \

215 ? 
	`__Â˛assifyf
 (
x
) \

216 :  (
x
) ==  () \

217 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

221 #ifde‡
__NO_LONG_DOUBLE_MATH


222 
	#signbô
(
x
) \

223 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

225 
	#signbô
(
x
) \

226 ( (
x
) ==  () \

227 ? 
	`__signbôf
 (
x
) \

228 :  (
x
) ==  () \

229 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

233 #ifde‡
__NO_LONG_DOUBLE_MATH


234 
	#isföôe
(
x
) \

235 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

237 
	#isföôe
(
x
) \

238 ( (
x
) ==  () \

239 ? 
	`__föôef
 (
x
) \

240 :  (
x
) ==  () \

241 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

245 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

249 #ifde‡
__NO_LONG_DOUBLE_MATH


250 
	#i¢™
(
x
) \

251 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

253 
	#i¢™
(
x
) \

254 ( (
x
) ==  () \

255 ? 
	`__i¢™f
 (
x
) \

256 :  (
x
) ==  () \

257 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

261 #ifde‡
__NO_LONG_DOUBLE_MATH


262 
	#isöf
(
x
) \

263 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

265 
	#isöf
(
x
) \

266 ( (
x
) ==  () \

267 ? 
	`__isöff
 (
x
) \

268 :  (
x
) ==  () \

269 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

273 
	#MATH_ERRNO
 1

	)

274 
	#MATH_ERREXCEPT
 2

	)

279 #i‚de‡
__FAST_MATH__


280 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

285 #ifde‡
__USE_GNU


287 #ifde‡
__NO_LONG_DOUBLE_MATH


288 
	#issig«lög
(
x
) \

289 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

291 
	#issig«lög
(
x
) \

292 ( (
x
) ==  () \

293 ? 
	`__issig«lögf
 (
x
) \

294 :  (
x
) ==  () \

295 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

299 #ifdef 
__USE_MISC


303 
_IEEE_
 = -1,

304 
_SVID_
,

305 
_XOPEN_
,

306 
_POSIX_
,

307 
_ISOC_


308 } 
	t_LIB_VERSION_TYPE
;

313 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

317 #ifde‡
__USE_SVID


323 #ifde‡
__˝lu•lus


324 
__ex˚±i⁄


326 
ex˚±i⁄


329 
ty≥
;

330 *
«me
;

331 
¨g1
;

332 
¨g2
;

333 
ªtvÆ
;

334 
	}
};

336 #ifde‡
__˝lu•lus


337 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

339 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

342 
	#X_TLOSS
 1.41484755040568800000e+16

	)

345 
	#DOMAIN
 1

	)

346 
	#SING
 2

	)

347 
	#OVERFLOW
 3

	)

348 
	#UNDERFLOW
 4

	)

349 
	#TLOSS
 5

	)

350 
	#PLOSS
 6

	)

353 
	#HUGE
 3.40282347e+38F

	)

357 #ifde‡
__USE_XOPEN


359 
	#MAXFLOAT
 3.40282347e+38F

	)

366 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


367 
	#M_E
 2.7182818284590452354

	)

368 
	#M_LOG2E
 1.4426950408889634074

	)

369 
	#M_LOG10E
 0.43429448190325182765

	)

370 
	#M_LN2
 0.69314718055994530942

	)

371 
	#M_LN10
 2.30258509299404568402

	)

372 
	#M_PI
 3.14159265358979323846

	)

373 
	#M_PI_2
 1.57079632679489661923

	)

374 
	#M_PI_4
 0.78539816339744830962

	)

375 
	#M_1_PI
 0.31830988618379067154

	)

376 
	#M_2_PI
 0.63661977236758134308

	)

377 
	#M_2_SQRTPI
 1.12837916709551257390

	)

378 
	#M_SQRT2
 1.41421356237309504880

	)

379 
	#M_SQRT1_2
 0.70710678118654752440

	)

385 #ifde‡
__USE_GNU


386 
	#M_El
 2.718281828459045235360287471352662498L

	)

387 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

388 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

389 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

390 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

391 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

392 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

393 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

394 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

395 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

396 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

397 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

398 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

405 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


406 
	#__NO_MATH_INLINES
 1

	)

409 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

416 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

417 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

418 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

419 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

420 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

421 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

425 #ifde‡
__USE_EXTERN_INLINES


426 
	~<bôs/m©hölöe.h
>

431 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

432 
	~<bôs/m©h-föôe.h
>

435 #ifde‡
__USE_ISOC99


439 #i‚de‡
isgª©î


440 
	#isgª©î
(
x
, 
y
) \

441 (
__exãnsi⁄__
 \

442 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

443 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

447 #i‚de‡
isgª©îequÆ


448 
	#isgª©îequÆ
(
x
, 
y
) \

449 (
__exãnsi⁄__
 \

450 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

451 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

455 #i‚de‡
i¶ess


456 
	#i¶ess
(
x
, 
y
) \

457 (
__exãnsi⁄__
 \

458 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

459 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

463 #i‚de‡
i¶es£quÆ


464 
	#i¶es£quÆ
(
x
, 
y
) \

465 (
__exãnsi⁄__
 \

466 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

467 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

471 #i‚de‡
i¶essgª©î


472 
	#i¶essgª©î
(
x
, 
y
) \

473 (
__exãnsi⁄__
 \

474 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

475 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

479 #i‚de‡
isun‹dîed


480 
	#isun‹dîed
(
u
, 
v
) \

481 (
__exãnsi⁄__
 \

482 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

483 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

488 
	g__END_DECLS


	@/usr/include/memory.h

22 #i‚def 
_MEMORY_H


23 
	#_MEMORY_H
 1

	)

25 
	~<„©uªs.h
>

28 #i‚def 
_STRING_H


29 
	~<°rög.h
>

	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

24 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


26 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

36 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

39 
	g__BEGIN_DECLS


41 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


43 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

44 
__THROW
 
__©åibuã_puª__
;

47 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

50 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

53 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


56 *
	`ödex
 (*
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

58 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

59 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

61 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


62 
__exã∫_Æways_ölöe
 *

63 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


65  
	`__buûtö_ödex
 (
__s
, 
__c
);

68 
__exã∫_Æways_ölöe
 const *

69 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


71  
	`__buûtö_ödex
 (
__s
, 
__c
);

74 
	}
}

76 *
	$ödex
 (c⁄° *
__s
, 
__c
)

77 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


84 *
	`rödex
 (*
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

86 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

87 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


90 
__exã∫_Æways_ölöe
 *

91 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


93  
	`__buûtö_rödex
 (
__s
, 
__c
);

96 
__exã∫_Æways_ölöe
 const *

97 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


99  
	`__buûtö_rödex
 (
__s
, 
__c
);

102 
	}
}

104 *
	$rödex
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


112 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
;

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
;

123 #ifdef 
__USE_XOPEN2K8


127 
	~<xloˇÀ.h
>

131 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

132 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

134 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

135 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

136 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

139 
__END_DECLS


	@/usr/include/sys/fcntl.h

1 
	~<f˙é.h
>

	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_BSD


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

30 || 
deföed
 
	g__USE_ATFILE


31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	#__√ed_time_t


	)

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


35 
	#__√ed_time•ec


	)

37 
	~<time.h
>

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


43 #i‚de‡
__dev_t_deföed


44 
__dev_t
 
	tdev_t
;

45 
	#__dev_t_deföed


	)

48 #i‚de‡
__gid_t_deföed


49 
__gid_t
 
	tgid_t
;

50 
	#__gid_t_deföed


	)

53 #i‚de‡
__öo_t_deföed


54 #i‚de‡
__USE_FILE_OFFSET64


55 
__öo_t
 
	töo_t
;

57 
__öo64_t
 
	töo_t
;

59 
	#__öo_t_deföed


	)

62 #i‚de‡
__mode_t_deföed


63 
__mode_t
 
	tmode_t
;

64 
	#__mode_t_deföed


	)

67 #i‚de‡
__∆ök_t_deföed


68 
__∆ök_t
 
	t∆ök_t
;

69 
	#__∆ök_t_deföed


	)

72 #i‚de‡
__off_t_deföed


73 #i‚de‡
__USE_FILE_OFFSET64


74 
__off_t
 
	toff_t
;

76 
__off64_t
 
	toff_t
;

78 
	#__off_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

87 #ifde‡
__USE_UNIX98


88 #i‚de‡
__blk˙t_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__blk˙t_t
 
	tblk˙t_t
;

92 
__blk˙t64_t
 
	tblk˙t_t
;

94 
	#__blk˙t_t_deföed


	)

97 #i‚de‡
__blksize_t_deföed


98 
__blksize_t
 
	tblksize_t
;

99 
	#__blksize_t_deföed


	)

103 
	g__BEGIN_DECLS


105 
	~<bôs/°©.h
>

107 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


108 
	#S_IFMT
 
__S_IFMT


	)

109 
	#S_IFDIR
 
__S_IFDIR


	)

110 
	#S_IFCHR
 
__S_IFCHR


	)

111 
	#S_IFBLK
 
__S_IFBLK


	)

112 
	#S_IFREG
 
__S_IFREG


	)

113 #ifde‡
__S_IFIFO


114 
	#S_IFIFO
 
__S_IFIFO


	)

116 #ifde‡
__S_IFLNK


117 
	#S_IFLNK
 
__S_IFLNK


	)

119 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

120 && 
deföed
 
	g__S_IFSOCK


121 
	#S_IFSOCK
 
__S_IFSOCK


	)

127 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

129 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

130 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

131 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

132 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

133 #ifde‡
__S_IFIFO


134 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

136 #ifde‡
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

140 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


141 
	#S_ISLNK
(
mode
Ë0

	)

144 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

145 && 
deföed
 
	g__S_IFSOCK


146 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

147 #ñi‡
deföed
 
__USE_XOPEN2K


148 
	#S_ISSOCK
(
mode
Ë0

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (c⁄° *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

365 c⁄° 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 c⁄° *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #ifde‡
__USE_EXTERN_INLINES


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

26 #ifde‡
__MATH_DECLARE_LDOUBLE


27 #ifde‡
__NO_LONG_DOUBLE_MATH


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

30 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


36 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

37 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

38 #ifde‡
__MATH_DECLARE_LDOUBLE


39 #ifde‡
__NO_LONG_DOUBLE_MATH


40 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

42 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

48 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

49 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 #ifde‡
__NO_LONG_DOUBLE_MATH


52 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

54 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

59 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

60 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

61 #ifde‡
__MATH_DECLARE_LDOUBLE


62 #ifde‡
__NO_LONG_DOUBLE_MATH


63 
__REDIRECT_NTH
 (
©™2l
, (, ),

64 
__©™2_föôe
);

66 
__REDIRECT_NTH
 (
©™2l
, (, ),

67 
__©™2l_föôe
);

71 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


73 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

74 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

75 #ifde‡
__MATH_DECLARE_LDOUBLE


76 #ifde‡
__NO_LONG_DOUBLE_MATH


77 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

79 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

85 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

86 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

87 #ifde‡
__MATH_DECLARE_LDOUBLE


88 #ifde‡
__NO_LONG_DOUBLE_MATH


89 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

91 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

96 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

97 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

102 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

106 #ifde‡
__USE_GNU


108 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

109 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

110 #ifde‡
__MATH_DECLARE_LDOUBLE


111 #ifde‡
__NO_LONG_DOUBLE_MATH


112 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

114 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

119 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

120 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

121 #ifde‡
__MATH_DECLARE_LDOUBLE


122 #ifde‡
__NO_LONG_DOUBLE_MATH


123 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

125 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

130 #ifde‡
__USE_ISOC99


132 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

133 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

134 #ifde‡
__MATH_DECLARE_LDOUBLE


135 #ifde‡
__NO_LONG_DOUBLE_MATH


136 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

138 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

144 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

145 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 #ifde‡
__NO_LONG_DOUBLE_MATH


148 
__REDIRECT_NTH
 (
fmodl
, (, ),

149 
__fmod_föôe
);

151 
__REDIRECT_NTH
 (
fmodl
, (, ),

152 
__fmodl_föôe
);

156 #ifde‡
__USE_ISOC99


158 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

159 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 #ifde‡
__NO_LONG_DOUBLE_MATH


162 
__REDIRECT_NTH
 (
hypŸl
, (, ),

163 
__hypŸ_föôe
);

165 
__REDIRECT_NTH
 (
hypŸl
, (, ),

166 
__hypŸl_föôe
);

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


173 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

174 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

175 #ifde‡
__MATH_DECLARE_LDOUBLE


176 #ifde‡
__NO_LONG_DOUBLE_MATH


177 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

179 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

184 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

185 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

186 #ifde‡
__MATH_DECLARE_LDOUBLE


187 #ifde‡
__NO_LONG_DOUBLE_MATH


188 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

190 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

195 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

196 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

197 #ifde‡
__MATH_DECLARE_LDOUBLE


198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

201 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

206 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

207 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

208 #ifde‡
__MATH_DECLARE_LDOUBLE


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

212 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

217 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

218 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

219 #ifde‡
__MATH_DECLARE_LDOUBLE


220 #ifde‡
__NO_LONG_DOUBLE_MATH


221 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

223 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

228 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

229 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

230 #ifde‡
__MATH_DECLARE_LDOUBLE


231 #ifde‡
__NO_LONG_DOUBLE_MATH


232 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

234 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

239 #ifde‡
__USE_MISC


241 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

242 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

243 #ifde‡
__MATH_DECLARE_LDOUBLE


244 #ifde‡
__NO_LONG_DOUBLE_MATH


245 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

246 
__lgamma_r_föôe
);

248 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

249 
__lgammÆ_r_föôe
);

254 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


256 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

258 #ifde‡
__USE_ISOC99


259 
__loˇl_signgam
 = 0;

260  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

262  
	`lgamma_r
 (
__d
, &
signgam
);

264 
	}
}

265 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

267 #ifde‡
__USE_ISOC99


268 
__loˇl_signgam
 = 0;

269  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

271  
	`lgammaf_r
 (
__d
, &
signgam
);

273 
	}
}

274 #ifde‡
__MATH_DECLARE_LDOUBLE


275 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

277 #ifde‡
__USE_ISOC99


278 
__loˇl_signgam
 = 0;

279  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

281  
	`lgammÆ_r
 (
__d
, &
signgam
);

283 
	}
}

287 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


289 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

291 #ifde‡
__USE_ISOC99


292 
__loˇl_signgam
 = 0;

293  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

295  
	`lgamma_r
 (
__d
, &
signgam
);

297 
	}
}

298 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

300 #ifde‡
__USE_ISOC99


301 
__loˇl_signgam
 = 0;

302  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

304  
	`lgammaf_r
 (
__d
, &
signgam
);

306 
	}
}

307 #ifde‡
__MATH_DECLARE_LDOUBLE


308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

310 #ifde‡
__USE_ISOC99


311 
__loˇl_signgam
 = 0;

312  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

314  
	`lgammÆ_r
 (
__d
, &
signgam
);

316 
	}
}

321 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

322 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

323 #ifde‡
__MATH_DECLARE_LDOUBLE


324 #ifde‡
__NO_LONG_DOUBLE_MATH


325 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

327 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

332 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

333 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

334 #ifde‡
__MATH_DECLARE_LDOUBLE


335 #ifde‡
__NO_LONG_DOUBLE_MATH


336 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

338 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

342 #ifde‡
__USE_ISOC99


344 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

345 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

346 #ifde‡
__MATH_DECLARE_LDOUBLE


347 #ifde‡
__NO_LONG_DOUBLE_MATH


348 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

350 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

356 
__REDIRECT_NTH
 (
ldexp
, (, ), 
sˇlbn
);

357 
__REDIRECT_NTH
 (
ldexpf
, (, ), 
sˇlbnf
);

358 #ifde‡
__MATH_DECLARE_LDOUBLE


359 
__REDIRECT_NTH
 (
ldex∂
, (, ), 
sˇlb∆
);

363 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

364 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

365 #ifde‡
__MATH_DECLARE_LDOUBLE


366 #ifde‡
__NO_LONG_DOUBLE_MATH


367 
__REDIRECT_NTH
 (
powl
, (, ),

368 
__pow_föôe
);

370 
__REDIRECT_NTH
 (
powl
, (, ),

371 
__powl_föôe
);

376 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

377 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

378 #ifde‡
__MATH_DECLARE_LDOUBLE


379 #ifde‡
__NO_LONG_DOUBLE_MATH


380 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

381 
__ªmaödî_föôe
);

383 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

384 
__ªmaödîl_föôe
);

388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


390 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

391 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

395 
__sˇlb_föôe
);

397 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

398 
__sˇlbl_föôe
);

404 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

405 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

406 #ifde‡
__MATH_DECLARE_LDOUBLE


407 #ifde‡
__NO_LONG_DOUBLE_MATH


408 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

410 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

415 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

416 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

417 #ifde‡
__MATH_DECLARE_LDOUBLE


418 #ifde‡
__NO_LONG_DOUBLE_MATH


419 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

421 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

425 #ifde‡
__USE_ISOC99


427 
__gamma_r_föôe
 (, *);

428 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

430 
__loˇl_signgam
 = 0;

431 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

432  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

433 
	}
}

434 
__gammaf_r_föôe
 (, *);

435 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

437 
__loˇl_signgam
 = 0;

438 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

439  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

440 
	}
}

441 #ifde‡
__MATH_DECLARE_LDOUBLE


442 
__gammÆ_r_föôe
 (, *);

443 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

445 
__loˇl_signgam
 = 0;

446 #ifde‡
__NO_LONG_DOUBLE_MATH


447 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

449 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

451  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

452 
	}
}

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


201 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

204 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

207 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

211 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


215 
__BEGIN_NAMESPACE_C99


217 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

218 
	g__END_NAMESPACE_C99


221 #ifde‡
__USE_ISOC99


222 
__BEGIN_NAMESPACE_C99


224 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

225 
	g__END_NAMESPACE_C99


230 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

237 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

238 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

240 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

241 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

246 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


247 
__BEGIN_NAMESPACE_C99


249 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

250 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

252 
	g__END_NAMESPACE_C99


255 #ifde‡
__USE_ISOC99


256 
__BEGIN_NAMESPACE_C99


258 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

259 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


264 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

267 #ifde‡
__USE_MISC


271 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


276 
__BEGIN_NAMESPACE_C99


279 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

282 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

283 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


284 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

288 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

290 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


292 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

296 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

299 #ifde‡
__USE_ISOC99


301 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

305 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

309 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

313 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

318 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

325 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

326 
__exãnsi⁄__


327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__exãnsi⁄__


333 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

337 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

340 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

343 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

347 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

348 
__©åibuã__
 ((
__c⁄°__
));

351 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

352 
__©åibuã__
 ((
__c⁄°__
));

356 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

359 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


360 
	g__END_NAMESPACE_C99


363 #ifde‡
__USE_GNU


365 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

366 
__©åibuã__
 ((
__c⁄°__
));

369 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


371 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #i‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #i‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #i‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


387 #i‚de‡
__SSE2_MATH__


388 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

389 && 
deföed
 
	g__OPTIMIZE__
)

393 #unde‡
m©h_îrh™dlög


402 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


403 
	#__ölöe_m©h›
(
func
, 
›
) \

404 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

405 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

406 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

407 
	#__ölöe_m©h›NP
(
func
, 
›
) \

408 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

409 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

410 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

412 
	#__ölöe_m©h›
(
func
, 
›
) \

413 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

414 
	#__ölöe_m©h›NP
(
func
, 
›
) \

415 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

418 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

419 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

420 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

421 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

424 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


425 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

426 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

427 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

428 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

429 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

430 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

432 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

434 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

435 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

436 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

437 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

440 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

441 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

442 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

444 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

445 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

447 
Êﬂt_ty≥
 
__ªsu…
; \

448 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

449  
__ªsu…
; \

450 }

	)

453 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


454 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

455 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

456 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

457 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

458 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

460 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

461 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

462 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

463 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

464 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

465 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

466 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

469 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

470 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

471 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

472 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

473 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

474 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

477 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

479 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

480 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

481 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

482 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

483 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

484 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

485 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

486 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

487 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

488 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

489 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

490 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

493 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

494 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

495 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

497 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

498 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

500 
code
; \

501 }

	)

504 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

505 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

506 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

508 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

509 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

511 
code
; \

512 }

	)

514 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

515 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

516 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

518 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

519 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

520 
Êﬂt_ty≥
 
¨g3
)) \

522 
code
; \

523 }

	)

527 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


531 #ifde‡
__FAST_MATH__


532 #ifde‡
__USE_GNU


533 
	#__söcos_code
 \

534 
__co§
; \

535 
__sör
; \

536 
__swtmp
; \

537 
__asm
 
__vﬁ©ûe__
 \

552 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

553 *
__söx
 = 
__sör
; \

554 *
__cosx
 = 
__co§


	)

556 
__MATH_INLINE
 

557 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

559 
__söcos_code
;

560 
	}
}

562 
__MATH_INLINE
 

563 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

565 
__söcos_code
;

566 
	}
}

568 
__MATH_INLINE
 

569 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

571 
__söcos_code
;

572 
	}
}

579 #i‡
__GNUC_PREREQ
 (3, 5)

580 
	#__expm1_code
 \

581 
__ãmp
; \

582 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

583  
__ãmp
 ? __ãm∞: 
__x


	)

585 
	#__expm1_code
 \

586 
__vÆue
; \

587 
__exp⁄ít
; \

588 
__ãmp
; \

589 
__asm
 
__vﬁ©ûe__
 \

598 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

599 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

602 
__ãmp
 -= 1.0; \

603 
__ãmp
 +
__vÆue
; \

604  
__ãmp
 ? __ãm∞: 
__x


	)

606 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

608 #i‡
	`__GNUC_PREREQ
 (3, 4)

609 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

611 
	#__exp_code
 \

612 
__vÆue
; \

613 
__exp⁄ít
; \

614 
__asm
 
__vﬁ©ûe__
 \

622 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

623 
__vÆue
 += 1.0; \

624 
__asm
 
__vﬁ©ûe__
 \

626 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

627  
__vÆue


	)

628 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

629 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

633 #i‡!
	`__GNUC_PREREQ
 (3, 5)

634 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

635 
__vÆue
; \

636 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

637 
__asm
 
__vﬁ©ûe__
 \

639 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

640  
__vÆue
)

645 #i‡
	`__GNUC_PREREQ
 (3, 4)

646 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

647  
	$__buûtö_©™2l
 (
__y
, 
__x
))

649 
	#__©™2_code
 \

650 
__vÆue
; \

651 
__asm
 
__vﬁ©ûe__
 \

653 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

654  
__vÆue


	)

655 #ifde‡
__FAST_MATH__


656 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

658 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

662 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

663 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

664 
__vÆue
; \

665 
__asm
 
__vﬁ©ûe__
 \

670 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

671  
__vÆue
)

675 #ifde‡
__FAST_MATH__


676 #i‡!
	`__GNUC_PREREQ
 (3,3)

677 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

678 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

679 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

681 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

685 #i‡
	`__GNUC_PREREQ
 (2, 8)

686 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

687 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


688 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

689 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

691 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

693 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

694 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

697 #ifde‡
__FAST_MATH__


698 #i‡!
	`__GNUC_PREREQ
 (3, 4)

700 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

702 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

704 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

707 #i‡!
	`__GNUC_PREREQ
 (3, 5)

708 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

711 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

714 #i‡!
	`__GNUC_PREREQ
 (3, 4)

715 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

719 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

720 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

721 { 
__xld
: 
__x
 
	}
}; \

722 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

723 
	g__n
.
	g__xi
[1] = 0x80000000; \

724 
	g__n
.
	g__xi
[0] = 0; \

725  
	g__n
.
	g__xld
)

728 #ifde‡
__FAST_MATH__


730 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

731 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

732  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

734 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

735 
__ex
 = 
	`__ex∂
 (
__x
); \

736  0.5 * (
__ex
 + 1.0 / __ex))

738 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

739 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

740  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

743 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

744 
__vÆue
; \

745 
__ign‹e
; \

746 
__cw
; \

747 
__cwtmp
; \

748 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

756 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

757 "=m" (
__cw
) \

758 : "0" (
__x
)); \

759  
__vÆue
)

761 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

762 
__vÆue
; \

763 
__ign‹e
; \

764 
__cw
; \

765 
__cwtmp
; \

766 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

774 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

775 "=m" (
__cw
) \

776 : "0" (
__x
)); \

777  
__vÆue
)

779 #ifde‡
__FAST_MATH__


780 
	#__ldexp_code
 \

781 
__vÆue
; \

782 
__asm
 
__vﬁ©ûe__
 \

784 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

785  
__vÆue


	)

787 
__MATH_INLINE
 

788 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

790 
__ldexp_code
;

791 
	}
}

796 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


798 #ifde‡
__FAST_MATH__


799 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

803 
	#__M_SQRT2
 1.41421356237309504880L

	)

805 #i‡!
	`__GNUC_PREREQ
 (3, 5)

806 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

807 
__vÆue
; \

808 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

809 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

811 
__asm
 
__vﬁ©ûe__
 \

815 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

816  
__vÆue
)

821 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

822 
__y
 = 
	`__Áb¶
 (
__x
); \

823  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

824 * 
	$__sgn1l
 (
__x
)))

826 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

827  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

829 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

830 
__y
 = 
	`__Áb¶
 (
__x
); \

831  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

834 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

835  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

837 #i‡!
	`__GNUC_PREREQ
 (3, 5)

838 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

839 
__vÆue
; \

840 
__junk
; \

841 
__asm
 
__vﬁ©ûe__
 \

843 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

844  
__vÆue
)

850 #ifde‡
__USE_ISOC99


851 #ifde‡
__FAST_MATH__


853 #i‡!
	`__GNUC_PREREQ
 (3, 5)

854 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

857 
__MATH_INLINE
 

858 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

860 
__ldexp_code
;

861 
	}
}

863 
__MATH_INLINE
 

864 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

866 
__ldexp_code
;

867 
	}
}

869 
__ölöe_m©h›NP
 (
röt
, "frndint")

872 
	#__Ãöt_code
 \

873 
__Ãöåes
; \

874 
__asm__
 
__vﬁ©ûe__
 \

876 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

877  
__Ãöåes


	)

878 
__MATH_INLINE
 

879 
__NTH
 (
	$Ãötf
 (
__x
))

881 
__Ãöt_code
;

882 
	}
}

883 
__MATH_INLINE
 

884 
__NTH
 (
	$Ãöt
 (
__x
))

886 
__Ãöt_code
;

887 
	}
}

888 
__MATH_INLINE
 

889 
__NTH
 (
	$Ãöé
 (
__x
))

891 
__Ãöt_code
;

892 
	}
}

893 #unde‡
__Ãöt_code


895 
	#__Œröt_code
 \

896 
__Œröåes
; \

897 
__asm__
 
__vﬁ©ûe__
 \

899 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

900  
__Œröåes


	)

901 
__exãnsi⁄__


902 
__MATH_INLINE
 

903 
__NTH
 (
	$Œrötf
 (
__x
))

905 
__Œröt_code
;

906 
	}
}

907 
__exãnsi⁄__


908 
__MATH_INLINE
 

909 
__NTH
 (
	$Œröt
 (
__x
))

911 
__Œröt_code
;

912 
	}
}

913 
__exãnsi⁄__


914 
__MATH_INLINE
 

915 
__NTH
 (
	$Œröé
 (
__x
))

917 
__Œröt_code
;

918 
	}
}

919 #unde‡
__Œröt_code


924 #ifde‡
__USE_MISC


926 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

927 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

928 
__vÆue
; \

929 
__˛obbîed
; \

930 
__asm
 
__vﬁ©ûe__
 \

935 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

936  
__vÆue
)

941 
__MATH_INLINE
 

942 
__NTH
 (
	$__föôe
 (
__x
))

944  (
__exãnsi⁄__


945 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

947 
	}
}

952 #unde‡
__©™2_code


953 #ifde‡
__FAST_MATH__


954 #unde‡
__expm1_code


955 #unde‡
__exp_code


956 #unde‡
__söcos_code


963 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


964 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

965 
__ölöe_m©hcode2
 (
__õì754_©™2
, 
__y
, 
__x
,

966 
__vÆue
;

967 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

968 : "Ò" (
__vÆue
)

969 : "0" (
__x
), "u" (
__y
) : "st(1)");

970  
__vÆue
;)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_GROWSDOWN
 0x00100

	)

34 
	#MAP_DENYWRITE
 0x00800

	)

35 
	#MAP_EXECUTABLE
 0x01000

	)

36 
	#MAP_LOCKED
 0x02000

	)

37 
	#MAP_NORESERVE
 0x04000

	)

38 
	#MAP_POPULATE
 0x08000

	)

39 
	#MAP_NONBLOCK
 0x10000

	)

40 
	#MAP_STACK
 0x20000

	)

41 
	#MAP_HUGETLB
 0x40000

	)

45 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	#__PTHREAD_MUTEX_HAVE_ELISION
 1

	)

110 
	m__nu£rs
;

111 
__exãnsi⁄__
 union

115 
	m__e•ös
;

116 
	m__ñisi⁄
;

117 
	#__•ös
 
d
.
__e•ös


	)

118 
	#__ñisi⁄
 
d
.
__ñisi⁄


	)

119 
	#__PTHREAD_MUTEX_HAVE_ELISION
 2

	)

120 } 
	md
;

121 
__±hªad_¶i°_t
 
	m__li°
;

124 } 
	m__d©a
;

125 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

126 
	m__Æign
;

127 } 
	t±hªad_muãx_t
;

131 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

132 
	m__Æign
;

133 } 
	t±hªad_muãx©å_t
;

142 
	m__lock
;

143 
	m__fuãx
;

144 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

145 
__exãnsi⁄__
 
	m__wakeup_£q
;

146 
__exãnsi⁄__
 
	m__wokí_£q
;

147 *
	m__muãx
;

148 
	m__nwaôîs
;

149 
	m__brﬂdˇ°_£q
;

150 } 
	m__d©a
;

151 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

152 
__exãnsi⁄__
 
	m__Æign
;

153 } 
	t±hªad_c⁄d_t
;

157 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

158 
	m__Æign
;

159 } 
	t±hªad_c⁄d©å_t
;

163 
	t±hªad_key_t
;

167 
	t±hªad_⁄˚_t
;

170 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


175 #ifde‡
__x86_64__


178 
	m__lock
;

179 
	m__ƒ_ªadîs
;

180 
	m__ªadîs_wakeup
;

181 
	m__wrôî_wakeup
;

182 
	m__ƒ_ªadîs_queued
;

183 
	m__ƒ_wrôîs_queued
;

184 
	m__wrôî
;

185 
	m__sh¨ed
;

186 
	m__∑d1
;

187 
	m__∑d2
;

190 
	m__Êags
;

191 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

192 } 
	m__d©a
;

196 
	m__lock
;

197 
	m__ƒ_ªadîs
;

198 
	m__ªadîs_wakeup
;

199 
	m__wrôî_wakeup
;

200 
	m__ƒ_ªadîs_queued
;

201 
	m__ƒ_wrôîs_queued
;

204 
	m__Êags
;

205 
	m__sh¨ed
;

206 
	m__∑d1
;

207 
	m__∑d2
;

208 
	m__wrôî
;

209 } 
	m__d©a
;

211 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

212 
	m__Æign
;

213 } 
	t±hªad_rwlock_t
;

217 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

218 
	m__Æign
;

219 } 
	t±hªad_rwlock©å_t
;

223 #ifde‡
__USE_XOPEN2K


225 vﬁ©ûê
	t±hªad_•ölock_t
;

232 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

233 
	m__Æign
;

234 } 
	t±hªad_b¨rõr_t
;

238 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

239 
	m__Æign
;

240 } 
	t±hªad_b¨rõøâr_t
;

244 #i‚de‡
__x86_64__


246 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

111 } 
_sigÁu…
;

116 
si_b™d
;

117 
si_fd
;

118 } 
_sigpﬁl
;

123 *
_ˇŒ_addr
;

124 
_sysˇŒ
;

125 
_¨ch
;

126 } 
_sigsys
;

127 } 
_sifõlds
;

128 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

132 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

133 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

134 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

135 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

136 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

137 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

138 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

139 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

140 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

141 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

142 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

143 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

144 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

145 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

146 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

147 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

148 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

155 
SI_ASYNCNL
 = -60,

156 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

157 
SI_TKILL
 = -6,

158 
	#SI_TKILL
 
SI_TKILL


	)

159 
SI_SIGIO
,

160 
	#SI_SIGIO
 
SI_SIGIO


	)

161 
SI_ASYNCIO
,

162 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

163 
SI_MESGQ
,

164 
	#SI_MESGQ
 
SI_MESGQ


	)

165 
SI_TIMER
,

166 
	#SI_TIMER
 
SI_TIMER


	)

167 
SI_QUEUE
,

168 
	#SI_QUEUE
 
SI_QUEUE


	)

169 
SI_USER
,

170 
	#SI_USER
 
SI_USER


	)

171 
SI_KERNEL
 = 0x80

172 
	#SI_KERNEL
 
SI_KERNEL


	)

179 
ILL_ILLOPC
 = 1,

180 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

181 
ILL_ILLOPN
,

182 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

183 
ILL_ILLADR
,

184 
	#ILL_ILLADR
 
ILL_ILLADR


	)

185 
ILL_ILLTRP
,

186 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

187 
ILL_PRVOPC
,

188 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

189 
ILL_PRVREG
,

190 
	#ILL_PRVREG
 
ILL_PRVREG


	)

191 
ILL_COPROC
,

192 
	#ILL_COPROC
 
ILL_COPROC


	)

193 
ILL_BADSTK


194 
	#ILL_BADSTK
 
ILL_BADSTK


	)

200 
FPE_INTDIV
 = 1,

201 
	#FPE_INTDIV
 
FPE_INTDIV


	)

202 
FPE_INTOVF
,

203 
	#FPE_INTOVF
 
FPE_INTOVF


	)

204 
FPE_FLTDIV
,

205 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

206 
FPE_FLTOVF
,

207 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

208 
FPE_FLTUND
,

209 
	#FPE_FLTUND
 
FPE_FLTUND


	)

210 
FPE_FLTRES
,

211 
	#FPE_FLTRES
 
FPE_FLTRES


	)

212 
FPE_FLTINV
,

213 
	#FPE_FLTINV
 
FPE_FLTINV


	)

214 
FPE_FLTSUB


215 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

221 
SEGV_MAPERR
 = 1,

222 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

223 
SEGV_ACCERR


224 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

230 
BUS_ADRALN
 = 1,

231 
	#BUS_ADRALN
 
BUS_ADRALN


	)

232 
BUS_ADRERR
,

233 
	#BUS_ADRERR
 
BUS_ADRERR


	)

234 
BUS_OBJERR
,

235 
	#BUS_OBJERR
 
BUS_OBJERR


	)

236 
BUS_MCEERR_AR
,

237 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

238 
BUS_MCEERR_AO


239 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

245 
TRAP_BRKPT
 = 1,

246 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

247 
TRAP_TRACE


248 
	#TRAP_TRACE
 
TRAP_TRACE


	)

254 
CLD_EXITED
 = 1,

255 
	#CLD_EXITED
 
CLD_EXITED


	)

256 
CLD_KILLED
,

257 
	#CLD_KILLED
 
CLD_KILLED


	)

258 
CLD_DUMPED
,

259 
	#CLD_DUMPED
 
CLD_DUMPED


	)

260 
CLD_TRAPPED
,

261 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

262 
CLD_STOPPED
,

263 
	#CLD_STOPPED
 
CLD_STOPPED


	)

264 
CLD_CONTINUED


265 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

271 
POLL_IN
 = 1,

272 
	#POLL_IN
 
POLL_IN


	)

273 
POLL_OUT
,

274 
	#POLL_OUT
 
POLL_OUT


	)

275 
POLL_MSG
,

276 
	#POLL_MSG
 
POLL_MSG


	)

277 
POLL_ERR
,

278 
	#POLL_ERR
 
POLL_ERR


	)

279 
POLL_PRI
,

280 
	#POLL_PRI
 
POLL_PRI


	)

281 
POLL_HUP


282 
	#POLL_HUP
 
POLL_HUP


	)

285 #unde‡
__√ed_sigöfo_t


289 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

290 && !
deföed
 
__have_sigevít_t


291 
	#__have_sigevít_t
 1

	)

294 
	#__SIGEV_MAX_SIZE
 64

	)

295 #i‡
__WORDSIZE
 == 64

296 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

298 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

302 #i‚de‡
__have_±hªad_©å_t


303 
±hªad_©å_t
 
	t±hªad_©å_t
;

304 
	#__have_±hªad_©å_t
 1

	)

307 
	ssigevít


309 
sigvÆ_t
 
sigev_vÆue
;

310 
sigev_signo
;

311 
sigev_nŸify
;

315 
_∑d
[
__SIGEV_PAD_SIZE
];

319 
__pid_t
 
_tid
;

323 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

324 
±hªad_©å_t
 *
_©åibuã
;

325 } 
_sigev_thªad
;

326 } 
_sigev_un
;

327 } 
	tsigevít_t
;

330 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

331 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

336 
SIGEV_SIGNAL
 = 0,

337 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

338 
SIGEV_NONE
,

339 
	#SIGEV_NONE
 
SIGEV_NONE


	)

340 
SIGEV_THREAD
,

341 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

343 
SIGEV_THREAD_ID
 = 4

344 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_BSD


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_GNU


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 020200000

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

124 #ifde‡
__USE_XOPEN2K8


125 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

126 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

127 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

130 #ifde‡
__USE_GNU


131 
	#O_DIRECT
 
__O_DIRECT


	)

132 
	#O_NOATIME
 
__O_NOATIME


	)

133 
	#O_PATH
 
__O_PATH


	)

134 
	#O_TMPFILE
 
__O_TMPFILE


	)

140 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


141 
	#O_DSYNC
 
__O_DSYNC


	)

142 #i‡
deföed
 
__O_RSYNC


143 
	#O_RSYNC
 
__O_RSYNC


	)

145 
	#O_RSYNC
 
O_SYNC


	)

150 
	#F_DUPFD
 0

	)

151 
	#F_GETFD
 1

	)

152 
	#F_SETFD
 2

	)

153 
	#F_GETFL
 3

	)

154 
	#F_SETFL
 4

	)

156 #i‚de‡
__F_SETOWN


157 
	#__F_SETOWN
 8

	)

158 
	#__F_GETOWN
 9

	)

161 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


162 
	#F_SETOWN
 
__F_SETOWN


	)

163 
	#F_GETOWN
 
__F_GETOWN


	)

166 #i‚de‡
__F_SETSIG


167 
	#__F_SETSIG
 10

	)

168 
	#__F_GETSIG
 11

	)

170 #i‚de‡
__F_SETOWN_EX


171 
	#__F_SETOWN_EX
 15

	)

172 
	#__F_GETOWN_EX
 16

	)

175 #ifde‡
__USE_GNU


176 
	#F_SETSIG
 
__F_SETSIG


	)

177 
	#F_GETSIG
 
__F_GETSIG


	)

178 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

179 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

182 #ifde‡
__USE_GNU


183 
	#F_SETLEASE
 1024

	)

184 
	#F_GETLEASE
 1025

	)

185 
	#F_NOTIFY
 1026

	)

186 
	#F_SETPIPE_SZ
 1031

	)

187 
	#F_GETPIPE_SZ
 1032

	)

189 #ifde‡
__USE_XOPEN2K8


190 
	#F_DUPFD_CLOEXEC
 1030

	)

195 
	#FD_CLOEXEC
 1

	)

197 #i‚de‡
F_RDLCK


199 
	#F_RDLCK
 0

	)

200 
	#F_WRLCK
 1

	)

201 
	#F_UNLCK
 2

	)

206 #i‚de‡
F_EXLCK


207 
	#F_EXLCK
 4

	)

208 
	#F_SHLCK
 8

	)

211 #ifde‡
__USE_BSD


213 
	#LOCK_SH
 1

	)

214 
	#LOCK_EX
 2

	)

215 
	#LOCK_NB
 4

	)

217 
	#LOCK_UN
 8

	)

220 #ifde‡
__USE_GNU


221 
	#LOCK_MAND
 32

	)

222 
	#LOCK_READ
 64

	)

223 
	#LOCK_WRITE
 128

	)

224 
	#LOCK_RW
 192

	)

227 #ifde‡
__USE_GNU


229 
	#DN_ACCESS
 0x00000001

	)

230 
	#DN_MODIFY
 0x00000002

	)

231 
	#DN_CREATE
 0x00000004

	)

232 
	#DN_DELETE
 0x00000008

	)

233 
	#DN_RENAME
 0x00000010

	)

234 
	#DN_ATTRIB
 0x00000020

	)

235 
	#DN_MULTISHOT
 0x80000000

	)

239 #ifde‡
__USE_GNU


241 
	e__pid_ty≥


243 
	mF_OWNER_TID
 = 0,

244 
	mF_OWNER_PID
,

245 
	mF_OWNER_PGRP
,

246 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


250 
	sf_ow√r_ex


252 
__pid_ty≥
 
	mty≥
;

253 
__pid_t
 
	mpid
;

259 #ifdef 
__USE_BSD


260 
	#FAPPEND
 
O_APPEND


	)

261 
	#FFSYNC
 
O_FSYNC


	)

262 
	#FASYNC
 
O_ASYNC


	)

263 
	#FNONBLOCK
 
O_NONBLOCK


	)

264 
	#FNDELAY
 
O_NDELAY


	)

267 #i‚de‡
__POSIX_FADV_DONTNEED


268 
	#__POSIX_FADV_DONTNEED
 4

	)

269 
	#__POSIX_FADV_NOREUSE
 5

	)

272 #ifde‡
__USE_XOPEN2K


273 
	#POSIX_FADV_NORMAL
 0

	)

274 
	#POSIX_FADV_RANDOM
 1

	)

275 
	#POSIX_FADV_SEQUENTIAL
 2

	)

276 
	#POSIX_FADV_WILLNEED
 3

	)

277 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

278 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

282 #ifde‡
__USE_GNU


284 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

287 
	#SYNC_FILE_RANGE_WRITE
 2

	)

290 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

295 
	#SPLICE_F_MOVE
 1

	)

296 
	#SPLICE_F_NONBLOCK
 2

	)

299 
	#SPLICE_F_MORE
 4

	)

300 
	#SPLICE_F_GIFT
 8

	)

304 
	#FALLOC_FL_KEEP_SIZE
 1

	)

307 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

311 
	sfûe_h™dÀ


313 
	mh™dÀ_byãs
;

314 
	mh™dÀ_ty≥
;

316 
	mf_h™dÀ
[0];

320 
	#MAX_HANDLE_SZ
 128

	)

324 #ifde‡
__USE_ATFILE


325 
	#AT_FDCWD
 -100

	)

328 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

329 
	#AT_REMOVEDIR
 0x200

	)

331 
	#AT_SYMLINK_FOLLOW
 0x400

	)

332 #ifde‡
__USE_GNU


333 
	#AT_NO_AUTOMOUNT
 0x800

	)

335 
	#AT_EMPTY_PATH
 0x1000

	)

337 
	#AT_EACCESS
 0x200

	)

341 
	g__BEGIN_DECLS


343 #ifde‡
__USE_GNU


346 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

347 
__THROW
;

354 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

355 
__Êags
);

362 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

363 
size_t
 
__cou¡
, 
__Êags
);

369 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

370 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

371 
__Êags
);

377 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

378 
__Êags
);

384 #i‚de‡
__USE_FILE_OFFSET64


385 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

387 #ifde‡
__REDIRECT


388 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

389 
__off64_t
 
__Àn
),

390 
ÁŒoˇã64
);

392 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

397 
__off64_t
 
__Àn
);

402 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

403 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

404 
__Êags
Ë
__THROW
;

410 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

411 
__Êags
);

415 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


32 
	#PROT_READ
 0x1

	)

33 
	#PROT_WRITE
 0x2

	)

34 
	#PROT_EXEC
 0x4

	)

35 
	#PROT_NONE
 0x0

	)

36 
	#PROT_GROWSDOWN
 0x01000000

	)

38 
	#PROT_GROWSUP
 0x02000000

	)

42 
	#MAP_SHARED
 0x01

	)

43 
	#MAP_PRIVATE
 0x02

	)

44 #ifde‡
__USE_MISC


45 
	#MAP_TYPE
 0x0‡

	)

49 
	#MAP_FIXED
 0x10

	)

50 #ifde‡
__USE_MISC


51 
	#MAP_FILE
 0

	)

52 #ifde‡
__MAP_ANONYMOUS


53 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

55 
	#MAP_ANONYMOUS
 0x20

	)

57 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

59 
	#MAP_HUGE_SHIFT
 26

	)

60 
	#MAP_HUGE_MASK
 0x3f

	)

64 
	#MS_ASYNC
 1

	)

65 
	#MS_SYNC
 4

	)

66 
	#MS_INVALIDATE
 2

	)

69 #ifde‡
__USE_GNU


70 
	#MREMAP_MAYMOVE
 1

	)

71 
	#MREMAP_FIXED
 2

	)

75 #ifde‡
__USE_BSD


76 
	#MADV_NORMAL
 0

	)

77 
	#MADV_RANDOM
 1

	)

78 
	#MADV_SEQUENTIAL
 2

	)

79 
	#MADV_WILLNEED
 3

	)

80 
	#MADV_DONTNEED
 4

	)

81 
	#MADV_REMOVE
 9

	)

82 
	#MADV_DONTFORK
 10

	)

83 
	#MADV_DOFORK
 11

	)

84 
	#MADV_MERGEABLE
 12

	)

85 
	#MADV_UNMERGEABLE
 13

	)

86 
	#MADV_HUGEPAGE
 14

	)

87 
	#MADV_NOHUGEPAGE
 15

	)

88 
	#MADV_DONTDUMP
 16

	)

90 
	#MADV_DODUMP
 17

	)

91 
	#MADV_HWPOISON
 100

	)

95 #ifde‡
__USE_XOPEN2K


96 
	#POSIX_MADV_NORMAL
 0

	)

97 
	#POSIX_MADV_RANDOM
 1

	)

98 
	#POSIX_MADV_SEQUENTIAL
 2

	)

99 
	#POSIX_MADV_WILLNEED
 3

	)

100 
	#POSIX_MADV_DONTNEED
 4

	)

104 #i‚de‡
MCL_CURRENT


105 
	#MCL_CURRENT
 1

	)

106 
	#MCL_FUTURE
 2

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

23 
	~<lowÀvñlock.h
>

27 
	#_IO_lock_öex≥nsive
 1

	)

29 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

31 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

33 
	#_IO_lock_öô
(
_«me
) \

34 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

36 
	#_IO_lock_föi
(
_«me
) \

37 ((Ë0)

	)

39 
	#_IO_lock_lock
(
_«me
) \

41 *
__£lf
 = 
THREAD_SELF
; \

42 i‡((
_«me
).
ow√r
 !
__£lf
) \

44 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

45 (
_«me
).
ow√r
 = 
__£lf
; \

47 ++(
_«me
).
˙t
; \

48 } 0)

	)

50 
	#_IO_lock_åylock
(
_«me
) \

52 
__ªsu…
 = 0; \

53 *
__£lf
 = 
THREAD_SELF
; \

54 i‡((
_«me
).
ow√r
 !
__£lf
) \

56 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

58 (
_«me
).
ow√r
 = 
__£lf
; \

59 (
_«me
).
˙t
 = 1; \

62 
__ªsu…
 = 
EBUSY
; \

65 ++(
_«me
).
˙t
; \

66 
__ªsu…
; \

67 })

	)

69 
	#_IO_lock_u∆ock
(
_«me
) \

71 i‡(--(
_«me
).
˙t
 == 0) \

73 (
_«me
).
ow√r
 = 
NULL
; \

74 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

76 } 0)

	)

80 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

81 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

82 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

83 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

84 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

85 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

87 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


89 #ifde‡
__EXCEPTIONS


90 
	#_IO_acquúe_lock
(
_Â
) \

92 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

93 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

94 (
_Â
); \

95 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

96 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

98 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

99 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

100 (
_Â
); \

101 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

103 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

104 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

106 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

136 #i‡
__GNUC_PREREQ
 (4,3)

137 
	#__w¨nde˛
(
«me
, 
msg
) \

138 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

139 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

140 
	#__îr‹de˛
(
«me
, 
msg
) \

141 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

143 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

144 
	#__w¨«âr
(
msg
)

	)

145 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

149 #i‡
__GNUC_PREREQ
 (2,97)

151 
	#__Êex¨r
 []

	)

153 #ifde‡
__GNUC__


154 
	#__Êex¨r
 [0]

	)

156 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

157 
	#__Êex¨r
 []

	)

160 
	#__Êex¨r
 [1]

	)

176 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

178 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

179 #ifde‡
__˝lu•lus


180 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

181 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

187 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

188 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

190 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

191 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

204 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

205 
	#__©åibuã__
(
xyz
Ë

	)

211 #i‡
__GNUC_PREREQ
 (2,96)

212 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

214 
	#__©åibuã_mÆloc__


	)

219 #i‡
__GNUC_PREREQ
 (4, 3)

220 
	#__©åibuã_Æloc_size__
(
∑øms
) \

221 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

223 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

321 #ifde‡
__GNUC__


326 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__GNUC_GNU_INLINE__


327 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

328 
	#__exã∫_Æways_ölöe
 \

329 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

331 
	#__exã∫_ölöe
 
__ölöe


	)

332 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

335 
	#__exã∫_ölöe


	)

336 
	#__exã∫_Æways_ölöe


	)

341 #i‡
__GNUC_PREREQ
 (4,3)

342 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

343 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

350 #i‡!
__GNUC_PREREQ
 (2,8)

351 
	#__exãnsi⁄__


	)

355 #i‡!
__GNUC_PREREQ
 (2,92)

356 
	#__ª°ri˘


	)

362 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


363 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

365 #ifde‡
__GNUC__


366 
	#__ª°ri˘_¨r


	)

368 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

369 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

372 
	#__ª°ri˘_¨r


	)

377 #i‡
__GNUC__
 >= 3

378 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

379 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

381 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

382 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

385 
	~<bôs/w‹dsize.h
>

387 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


388 
	#__LDBL_COMPAT
 1

	)

389 #ifde‡
__REDIRECT


390 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

391 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

392 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

393 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

394 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

395 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

396 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

397 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

398 
	#__LDBL_REDIR_DECL
(
«me
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

400 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

401 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

406 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


407 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

408 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

409 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

410 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

411 
	#__LDBL_REDIR_DECL
(
«me
)

	)

412 #ifde‡
__REDIRECT


413 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

414 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

415 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/libc-lock.h

19 #i‚de‡
_BITS_LIBC_LOCK_H


20 
	#_BITS_LIBC_LOCK_H
 1

	)

22 
	~<±hªad.h
>

23 
	#__√ed_NULL


	)

24 
	~<°ddef.h
>

27 #ifde‡
_LIBC


28 
	~<lowÀvñlock.h
>

29 
	~<és.h
>

30 
	~<±hªad-fun˘i⁄s.h
>

31 
	~<î∫o.h
>

32 
	~<gnu/›ti⁄-groups.h
>

36 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


37 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


38 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

40 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

43 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

53 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

54 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

59 #i‡
LLL_LOCK_INITIALIZER
 == 0

60 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

61 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

63 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

64 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

66 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

67 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

69 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

70 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

71 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

72 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

76 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

77 
	#__libc_lock_öô_ªcursive
(
NAME
) \

78 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

80 
	#__libc_lock_öô_ªcursive
(
NAME
) \

82 i‡(
__±hªad_muãx_öô
 !
NULL
) \

84 
±hªad_muãx©å_t
 
__©å
; \

85 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

86 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

87 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

88 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

90 } 0)

	)

94 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

95 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

97 
	#__libc_lock_föi_ªcursive
(
NAME
) \

98 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
).
muãx
), 0)

	)

102 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

103 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

107 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

108 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

110 #i‡
__OPTION_EGLIBC_BIG_MACROS


111 
	#__libc_lock_lock_ªcursive
(
NAME
) \

113 *
£lf
 = 
THREAD_SELF
; \

114 i‡((
NAME
).
ow√r
 !
£lf
) \

116 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

117 (
NAME
).
ow√r
 = 
£lf
; \

119 ++(
NAME
).
˙t
; \

120 } 0)

	)

122 
	#__libc_lock_lock_ªcursive
(
NAME
) \

123 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

126 
	#__libc_lock_lock_ªcursive
(
NAME
) \

127 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

131 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

132 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

136 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

137 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

139 #i‡
__OPTION_EGLIBC_BIG_MACROS


140 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

142 
ªsu…
 = 0; \

143 *
£lf
 = 
THREAD_SELF
; \

144 i‡((
NAME
).
ow√r
 !
£lf
) \

146 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

148 (
NAME
).
ow√r
 = 
£lf
; \

149 (
NAME
).
˙t
 = 1; \

152 
ªsu…
 = 
EBUSY
; \

155 ++(
NAME
).
˙t
; \

156 
ªsu…
; \

157 })

	)

159 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

160 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

163 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

164 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

168 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

169 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

173 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

174 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

176 #i‡
__OPTION_EGLIBC_BIG_MACROS


178 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

180 i‡(--(
NAME
).
˙t
 == 0) \

182 (
NAME
).
ow√r
 = 
NULL
; \

183 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

185 } 0)

	)

187 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

188 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

191 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

192 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

199 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

200 (*
routöe
Ë(*), *
¨g
);

201 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

202 
execuã
);

205 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

206 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

207 
_avaû
; \

208 i‡(
DOIT
) { \

209 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

210 i‡(
_avaû
) { \

211 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

212 
ARG
)); \

214 
_buf„r
.
__routöe
 = (
FCT
); \

215 
_buf„r
.
__¨g
 = (
ARG
); \

218 
_avaû
 = 0; \

219 }

	)

222 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

223 i‡(
_avaû
) { \

224 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

225 } i‡(
DOIT
) \

226 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

227 
	}

	)
}

232 #ifde‡
_LIBC


233 
	~"libc-lockP.h
"

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_¸óã_moduÀ


	)

13 
	#__°ub_Áâach


	)

14 
	#__°ub_fchÊags


	)

15 
	#__°ub_fdëach


	)

16 
	#__°ub_gë_kî√l_syms


	)

17 
	#__°ub_gëmsg


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_lchmod


	)

20 
	#__°ub_nfs£rv˘l


	)

21 
	#__°ub_putmsg


	)

22 
	#__°ub_quîy_moduÀ


	)

23 
	#__°ub_ªvoke


	)

24 
	#__°ub_£éogö


	)

25 
	#__°ub_sigªtu∫


	)

26 
	#__°ub_s°k


	)

27 
	#__°ub_°ty


	)

28 
	#__°ub_u£lib


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LOCALES
 1

	)

34 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

35 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

36 
	#__OPTION_EGLIBC_NIS
 1

	)

37 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

38 
	#__OPTION_EGLIBC_RCMD
 1

	)

39 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

40 
	#__OPTION_EGLIBC_SPAWN
 1

	)

41 
	#__OPTION_EGLIBC_STREAMS
 1

	)

42 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

43 
	#__OPTION_EGLIBC_UTMP
 1

	)

44 
	#__OPTION_EGLIBC_UTMPX
 1

	)

45 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

46 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

47 
	#__OPTION_POSIX_REGEXP
 1

	)

48 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

49 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@
1
.
1
/usr/include
333
7533
build/libc/errno.c
include/geekos/alarm.h
include/geekos/apic.h
include/geekos/argblock.h
include/geekos/bget.h
include/geekos/bitset.h
include/geekos/blockdev.h
include/geekos/bootinfo.h
include/geekos/bufcache.h
include/geekos/cfs.h
include/geekos/cfsmodes.h
include/geekos/crc32.h
include/geekos/defs.h
include/geekos/dma.h
include/geekos/elf.h
include/geekos/errno.h
include/geekos/fileio.h
include/geekos/floppy.h
include/geekos/fmtout.h
include/geekos/gdt.h
include/geekos/gfs2.h
include/geekos/gosfs.h
include/geekos/ide.h
include/geekos/idt.h
include/geekos/int.h
include/geekos/io.h
include/geekos/irq.h
include/geekos/kassert.h
include/geekos/keyboard.h
include/geekos/kthread.h
include/geekos/ktypes.h
include/geekos/list.h
include/geekos/lock.h
include/geekos/malloc.h
include/geekos/mem.h
include/geekos/net/arp.h
include/geekos/net/ethernet.h
include/geekos/net/ip.h
include/geekos/net/ipdefs.h
include/geekos/net/ne2000.h
include/geekos/net/net.h
include/geekos/net/netbuf.h
include/geekos/net/port.h
include/geekos/net/rip.h
include/geekos/net/routing.h
include/geekos/net/socket.h
include/geekos/net/tcp.h
include/geekos/net/udp.h
include/geekos/paging.h
include/geekos/pfat.h
include/geekos/pipe.h
include/geekos/projects.h
include/geekos/range.h
include/geekos/screen.h
include/geekos/segment.h
include/geekos/sem.h
include/geekos/signal.h
include/geekos/smp.h
include/geekos/sound.h
include/geekos/string.h
include/geekos/symbol.h
include/geekos/synch.h
include/geekos/sys_net.h
include/geekos/syscall.h
include/geekos/timer.h
include/geekos/trap.h
include/geekos/tss.h
include/geekos/user.h
include/geekos/vfs.h
include/libc/bget.h
include/libc/conio.h
include/libc/fileio.h
include/libc/fmtout.h
include/libc/ip.h
include/libc/libuser.h
include/libc/mmap.h
include/libc/net.h
include/libc/process.h
include/libc/sched.h
include/libc/sema.h
include/libc/signal.h
include/libc/socket.h
include/libc/spin.h
include/libc/string.h
src/common/bget.c
src/common/fmtout.c
src/common/memmove.c
src/common/string.c
src/geekos/alarm.c
src/geekos/argblock.c
src/geekos/bitset.c
src/geekos/blockdev.c
src/geekos/bufcache.c
src/geekos/cfs.c
src/geekos/crc32.c
src/geekos/dma.c
src/geekos/elf.c
src/geekos/floppy.c
src/geekos/gdt.c
src/geekos/gfs2.c
src/geekos/gosfs.c
src/geekos/ide.c
src/geekos/idt.c
src/geekos/int.c
src/geekos/io.c
src/geekos/irq.c
src/geekos/keyboard.c
src/geekos/kthread.c
src/geekos/main.c
src/geekos/malloc.c
src/geekos/mem.c
src/geekos/net/arp.c
src/geekos/net/ethernet.c
src/geekos/net/ip.c
src/geekos/net/ne2000.c
src/geekos/net/net.c
src/geekos/net/netbuf.c
src/geekos/net/rip.c
src/geekos/net/routing.c
src/geekos/net/socket.c
src/geekos/net/sys_net.c
src/geekos/net/tcp.c
src/geekos/net/udp.c
src/geekos/paging.c
src/geekos/pfat.c
src/geekos/pipe.c
src/geekos/screen.c
src/geekos/segment.c
src/geekos/sem.c
src/geekos/signal.c
src/geekos/smp.c
src/geekos/sound/sound.c
src/geekos/synch.c
src/geekos/syscall.c
src/geekos/timer.c
src/geekos/trap.c
src/geekos/tss.c
src/geekos/user.c
src/geekos/userseg.c
src/geekos/uservm.c
src/geekos/vfs.c
src/libc/compat.c
src/libc/conio.c
src/libc/entry.c
src/libc/fileio.c
src/libc/libuser.h
src/libc/net.c
src/libc/process.c
src/libc/sched.c
src/libc/sema.c
src/libc/signal.c
src/libc/socket.c
src/libc/spin.c
src/testing/bitset.c
src/testing/bufcache.c
src/testing/dump-image.c
src/testing/fake-blockdev.c
src/testing/gfs2.c
src/testing/gfs2.h
src/testing/image-builder.c
src/tools/buildFat.c
src/tools/fake-blockdev.c
src/tools/gfs2f.c
src/user/arp.c
src/user/b.c
src/user/c.c
src/user/cat.c
src/user/cp.c
src/user/echoclnt.c
src/user/echoserv.c
src/user/ethrecv.c
src/user/ethsend.c
src/user/ethsendx.c
src/user/execr1.c
src/user/execr2.c
src/user/execr3.c
src/user/fork-p1.c
src/user/forkexec.c
src/user/forkpipe.c
src/user/gfs2f.c
src/user/halt.c
src/user/ifconfig.c
src/user/ipsend.c
src/user/kill.c
src/user/long.c
src/user/ls.c
src/user/mkdir.c
src/user/mount.c
src/user/nsp5test.c
src/user/null.c
src/user/pipe-p1.c
src/user/pipe-p2.c
src/user/ps.c
src/user/rec.c
src/user/recvbyte.c
src/user/rm.c
src/user/route.c
src/user/sched1.c
src/user/sched2.c
src/user/sched3.c
src/user/schedtst.c
src/user/sem-p1.c
src/user/sem-p2.c
src/user/sem-p3.c
src/user/sem-ping.c
src/user/sem-pong.c
src/user/semtest.c
src/user/semtest1.c
src/user/semtest2.c
src/user/sendbyte.c
src/user/setacl.c
src/user/setuid.c
src/user/shell.c
src/user/spin.c
src/user/sum.c
src/user/sync.c
src/user/time.c
src/user/touch.c
src/user/type.c
src/user/whoami.c
src/user/workload.c
src/user/write.c
src/user/z.c
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/limits.h
/usr/include/math.h
/usr/include/memory.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/fcntl.h
/usr/include/sys/mman.h
/usr/include/sys/stat.h
/usr/include/sys/types.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/math-finite.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/nan.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sched.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/mman-linux.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/asm/errno.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/libc-lock.h
/usr/include/bits/timex.h
/usr/include/bits/uio.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/linux/limits.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/bits/setjmp.h
